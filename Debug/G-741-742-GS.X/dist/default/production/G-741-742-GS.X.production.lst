

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Oct 13 10:06:51 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	18F45K80
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61  0000                     
    62                           ; Version 2.20
    63                           ; Generated 09/04/2020 GMT
    64                           ; 
    65                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F45K80 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	mediumconst
    98  0079EA                     __pmediumconst:
    99                           	callstack 0
   100  0079EA  00                 	db	0
   101  0079EB                     _sign:
   102                           	callstack 0
   103  0079EB  EE                 	db	238
   104  0079EC  F1                 	db	241
   105  0079ED  F1                 	db	241
   106  0079EE  F1                 	db	241
   107  0079EF  F1                 	db	241
   108  0079F0  F1                 	db	241
   109  0079F1  EE                 	db	238
   110  0079F2  E8                 	db	232
   111  0079F3  EC                 	db	236
   112  0079F4  EA                 	db	234
   113  0079F5  E8                 	db	232
   114  0079F6  E8                 	db	232
   115  0079F7  E8                 	db	232
   116  0079F8  E8                 	db	232
   117  0079F9  EE                 	db	238
   118  0079FA  F1                 	db	241
   119  0079FB  F0                 	db	240
   120  0079FC  E8                 	db	232
   121  0079FD  E4                 	db	228
   122  0079FE  E2                 	db	226
   123  0079FF  FF                 	db	255
   124  007A00  EE                 	db	238
   125  007A01  F1                 	db	241
   126  007A02  F0                 	db	240
   127  007A03  EC                 	db	236
   128  007A04  F0                 	db	240
   129  007A05  F1                 	db	241
   130  007A06  EE                 	db	238
   131  007A07  E8                 	db	232
   132  007A08  E4                 	db	228
   133  007A09  EA                 	db	234
   134  007A0A  E9                 	db	233
   135  007A0B  FF                 	db	255
   136  007A0C  E8                 	db	232
   137  007A0D  E8                 	db	232
   138  007A0E  FF                 	db	255
   139  007A0F  E1                 	db	225
   140  007A10  EF                 	db	239
   141  007A11  F0                 	db	240
   142  007A12  F0                 	db	240
   143  007A13  F1                 	db	241
   144  007A14  EE                 	db	238
   145  007A15  EE                 	db	238
   146  007A16  F1                 	db	241
   147  007A17  E1                 	db	225
   148  007A18  EF                 	db	239
   149  007A19  F1                 	db	241
   150  007A1A  F1                 	db	241
   151  007A1B  EE                 	db	238
   152  007A1C  FF                 	db	255
   153  007A1D  F0                 	db	240
   154  007A1E  E8                 	db	232
   155  007A1F  E4                 	db	228
   156  007A20  E2                 	db	226
   157  007A21  E2                 	db	226
   158  007A22  E2                 	db	226
   159  007A23  EE                 	db	238
   160  007A24  F1                 	db	241
   161  007A25  F1                 	db	241
   162  007A26  EE                 	db	238
   163  007A27  F1                 	db	241
   164  007A28  F1                 	db	241
   165  007A29  EE                 	db	238
   166  007A2A  EE                 	db	238
   167  007A2B  F1                 	db	241
   168  007A2C  F1                 	db	241
   169  007A2D  FE                 	db	254
   170  007A2E  F0                 	db	240
   171  007A2F  F1                 	db	241
   172  007A30  EE                 	db	238
   173  007A31  EE                 	db	238
   174  007A32  F1                 	db	241
   175  007A33  F1                 	db	241
   176  007A34  FF                 	db	255
   177  007A35  F1                 	db	241
   178  007A36  F1                 	db	241
   179  007A37  F1                 	db	241
   180  007A38  EF                 	db	239
   181  007A39  F1                 	db	241
   182  007A3A  F1                 	db	241
   183  007A3B  EF                 	db	239
   184  007A3C  F1                 	db	241
   185  007A3D  F1                 	db	241
   186  007A3E  EF                 	db	239
   187  007A3F  EE                 	db	238
   188  007A40  F1                 	db	241
   189  007A41  E1                 	db	225
   190  007A42  E1                 	db	225
   191  007A43  E1                 	db	225
   192  007A44  F1                 	db	241
   193  007A45  EE                 	db	238
   194  007A46  EF                 	db	239
   195  007A47  F1                 	db	241
   196  007A48  F1                 	db	241
   197  007A49  F1                 	db	241
   198  007A4A  F1                 	db	241
   199  007A4B  F1                 	db	241
   200  007A4C  EF                 	db	239
   201  007A4D  FF                 	db	255
   202  007A4E  E1                 	db	225
   203  007A4F  E1                 	db	225
   204  007A50  EF                 	db	239
   205  007A51  E1                 	db	225
   206  007A52  E1                 	db	225
   207  007A53  FF                 	db	255
   208  007A54  FF                 	db	255
   209  007A55  E1                 	db	225
   210  007A56  E1                 	db	225
   211  007A57  EF                 	db	239
   212  007A58  E1                 	db	225
   213  007A59  E1                 	db	225
   214  007A5A  E1                 	db	225
   215  007A5B  EE                 	db	238
   216  007A5C  F1                 	db	241
   217  007A5D  E1                 	db	225
   218  007A5E  FD                 	db	253
   219  007A5F  F1                 	db	241
   220  007A60  F1                 	db	241
   221  007A61  EE                 	db	238
   222  007A62  F1                 	db	241
   223  007A63  F1                 	db	241
   224  007A64  F1                 	db	241
   225  007A65  FF                 	db	255
   226  007A66  F1                 	db	241
   227  007A67  F1                 	db	241
   228  007A68  F1                 	db	241
   229  007A69  E4                 	db	228
   230  007A6A  E4                 	db	228
   231  007A6B  E4                 	db	228
   232  007A6C  E4                 	db	228
   233  007A6D  E4                 	db	228
   234  007A6E  E4                 	db	228
   235  007A6F  E4                 	db	228
   236  007A70  FF                 	db	255
   237  007A71  E8                 	db	232
   238  007A72  E8                 	db	232
   239  007A73  E8                 	db	232
   240  007A74  E8                 	db	232
   241  007A75  E9                 	db	233
   242  007A76  E6                 	db	230
   243  007A77  F1                 	db	241
   244  007A78  E9                 	db	233
   245  007A79  E5                 	db	229
   246  007A7A  E3                 	db	227
   247  007A7B  E5                 	db	229
   248  007A7C  E9                 	db	233
   249  007A7D  F1                 	db	241
   250  007A7E  E1                 	db	225
   251  007A7F  E1                 	db	225
   252  007A80  E1                 	db	225
   253  007A81  E1                 	db	225
   254  007A82  E1                 	db	225
   255  007A83  E1                 	db	225
   256  007A84  FF                 	db	255
   257  007A85  F1                 	db	241
   258  007A86  FB                 	db	251
   259  007A87  F5                 	db	245
   260  007A88  F1                 	db	241
   261  007A89  F1                 	db	241
   262  007A8A  F1                 	db	241
   263  007A8B  F1                 	db	241
   264  007A8C  F1                 	db	241
   265  007A8D  F1                 	db	241
   266  007A8E  F3                 	db	243
   267  007A8F  F5                 	db	245
   268  007A90  F9                 	db	249
   269  007A91  F1                 	db	241
   270  007A92  F1                 	db	241
   271  007A93  EE                 	db	238
   272  007A94  F1                 	db	241
   273  007A95  F1                 	db	241
   274  007A96  F1                 	db	241
   275  007A97  F1                 	db	241
   276  007A98  F1                 	db	241
   277  007A99  EE                 	db	238
   278  007A9A  EF                 	db	239
   279  007A9B  F1                 	db	241
   280  007A9C  F1                 	db	241
   281  007A9D  EF                 	db	239
   282  007A9E  E1                 	db	225
   283  007A9F  E1                 	db	225
   284  007AA0  E1                 	db	225
   285  007AA1  EE                 	db	238
   286  007AA2  F1                 	db	241
   287  007AA3  F1                 	db	241
   288  007AA4  F1                 	db	241
   289  007AA5  F5                 	db	245
   290  007AA6  F9                 	db	249
   291  007AA7  EE                 	db	238
   292  007AA8  EF                 	db	239
   293  007AA9  F1                 	db	241
   294  007AAA  F1                 	db	241
   295  007AAB  EF                 	db	239
   296  007AAC  E5                 	db	229
   297  007AAD  E9                 	db	233
   298  007AAE  F1                 	db	241
   299  007AAF  EE                 	db	238
   300  007AB0  F1                 	db	241
   301  007AB1  E1                 	db	225
   302  007AB2  EE                 	db	238
   303  007AB3  F0                 	db	240
   304  007AB4  F1                 	db	241
   305  007AB5  EE                 	db	238
   306  007AB6  FF                 	db	255
   307  007AB7  E4                 	db	228
   308  007AB8  E4                 	db	228
   309  007AB9  E4                 	db	228
   310  007ABA  E4                 	db	228
   311  007ABB  E4                 	db	228
   312  007ABC  E4                 	db	228
   313  007ABD  F1                 	db	241
   314  007ABE  F1                 	db	241
   315  007ABF  F1                 	db	241
   316  007AC0  F1                 	db	241
   317  007AC1  F1                 	db	241
   318  007AC2  F1                 	db	241
   319  007AC3  EE                 	db	238
   320  007AC4  F1                 	db	241
   321  007AC5  F1                 	db	241
   322  007AC6  F1                 	db	241
   323  007AC7  F1                 	db	241
   324  007AC8  F1                 	db	241
   325  007AC9  EA                 	db	234
   326  007ACA  E4                 	db	228
   327  007ACB  F1                 	db	241
   328  007ACC  F1                 	db	241
   329  007ACD  F1                 	db	241
   330  007ACE  F1                 	db	241
   331  007ACF  F1                 	db	241
   332  007AD0  F5                 	db	245
   333  007AD1  EA                 	db	234
   334  007AD2  F1                 	db	241
   335  007AD3  F1                 	db	241
   336  007AD4  EA                 	db	234
   337  007AD5  E4                 	db	228
   338  007AD6  EA                 	db	234
   339  007AD7  F1                 	db	241
   340  007AD8  F1                 	db	241
   341  007AD9  F1                 	db	241
   342  007ADA  F1                 	db	241
   343  007ADB  EA                 	db	234
   344  007ADC  E4                 	db	228
   345  007ADD  E4                 	db	228
   346  007ADE  E4                 	db	228
   347  007ADF  E4                 	db	228
   348  007AE0  FF                 	db	255
   349  007AE1  F0                 	db	240
   350  007AE2  E8                 	db	232
   351  007AE3  E4                 	db	228
   352  007AE4  E2                 	db	226
   353  007AE5  E1                 	db	225
   354  007AE6  FF                 	db	255
   355  007AE7  E0                 	db	224
   356  007AE8  E4                 	db	228
   357  007AE9  E4                 	db	228
   358  007AEA  FF                 	db	255
   359  007AEB  E4                 	db	228
   360  007AEC  E4                 	db	228
   361  007AED  E0                 	db	224
   362  007AEE  E0                 	db	224
   363  007AEF  E0                 	db	224
   364  007AF0  E0                 	db	224
   365  007AF1  FF                 	db	255
   366  007AF2  E0                 	db	224
   367  007AF3  E0                 	db	224
   368  007AF4  E0                 	db	224
   369  007AF5  FD                 	db	253
   370  007AF6  F5                 	db	245
   371  007AF7  F5                 	db	245
   372  007AF8  F5                 	db	245
   373  007AF9  F5                 	db	245
   374  007AFA  F5                 	db	245
   375  007AFB  FD                 	db	253
   376  007AFC  F2                 	db	242
   377  007AFD  F2                 	db	242
   378  007AFE  F2                 	db	242
   379  007AFF  F2                 	db	242
   380  007B00  F2                 	db	242
   381  007B01  F2                 	db	242
   382  007B02  F2                 	db	242
   383  007B03  FD                 	db	253
   384  007B04  F1                 	db	241
   385  007B05  F1                 	db	241
   386  007B06  FD                 	db	253
   387  007B07  E5                 	db	229
   388  007B08  E5                 	db	229
   389  007B09  FD                 	db	253
   390  007B0A  FD                 	db	253
   391  007B0B  F1                 	db	241
   392  007B0C  F1                 	db	241
   393  007B0D  FD                 	db	253
   394  007B0E  F1                 	db	241
   395  007B0F  F1                 	db	241
   396  007B10  FD                 	db	253
   397  007B11  F5                 	db	245
   398  007B12  F5                 	db	245
   399  007B13  F5                 	db	245
   400  007B14  FD                 	db	253
   401  007B15  F1                 	db	241
   402  007B16  F1                 	db	241
   403  007B17  F1                 	db	241
   404  007B18  FD                 	db	253
   405  007B19  E5                 	db	229
   406  007B1A  E5                 	db	229
   407  007B1B  FD                 	db	253
   408  007B1C  F1                 	db	241
   409  007B1D  F1                 	db	241
   410  007B1E  FD                 	db	253
   411  007B1F  FD                 	db	253
   412  007B20  E5                 	db	229
   413  007B21  E5                 	db	229
   414  007B22  FD                 	db	253
   415  007B23  F5                 	db	245
   416  007B24  F5                 	db	245
   417  007B25  FD                 	db	253
   418  007B26  FD                 	db	253
   419  007B27  F1                 	db	241
   420  007B28  F1                 	db	241
   421  007B29  F1                 	db	241
   422  007B2A  F1                 	db	241
   423  007B2B  F1                 	db	241
   424  007B2C  F1                 	db	241
   425  007B2D  FD                 	db	253
   426  007B2E  F5                 	db	245
   427  007B2F  F5                 	db	245
   428  007B30  FD                 	db	253
   429  007B31  F5                 	db	245
   430  007B32  F5                 	db	245
   431  007B33  FD                 	db	253
   432  007B34  FD                 	db	253
   433  007B35  F5                 	db	245
   434  007B36  F5                 	db	245
   435  007B37  FD                 	db	253
   436  007B38  F1                 	db	241
   437  007B39  F1                 	db	241
   438  007B3A  FD                 	db	253
   439  007B3B  E0                 	db	224
   440  007B3C  E0                 	db	224
   441  007B3D  E0                 	db	224
   442  007B3E  E0                 	db	224
   443  007B3F  E0                 	db	224
   444  007B40  E0                 	db	224
   445  007B41  E0                 	db	224
   446  007B42  F7                 	db	247
   447  007B43  F4                 	db	244
   448  007B44  F4                 	db	244
   449  007B45  F7                 	db	247
   450  007B46  F1                 	db	241
   451  007B47  F1                 	db	241
   452  007B48  F7                 	db	247
   453  007B49  E0                 	db	224
   454  007B4A  E0                 	db	224
   455  007B4B  E0                 	db	224
   456  007B4C  E0                 	db	224
   457  007B4D  E0                 	db	224
   458  007B4E  E0                 	db	224
   459  007B4F  E0                 	db	224
   460  007B50  E0                 	db	224
   461  007B51  E0                 	db	224
   462  007B52  E0                 	db	224
   463  007B53  E0                 	db	224
   464  007B54  E0                 	db	224
   465  007B55  E0                 	db	224
   466  007B56  E0                 	db	224
   467  007B57  E0                 	db	224
   468  007B58  E0                 	db	224
   469  007B59  E0                 	db	224
   470  007B5A  E0                 	db	224
   471  007B5B  E0                 	db	224
   472  007B5C  E0                 	db	224
   473  007B5D  E0                 	db	224
   474  007B5E  E0                 	db	224
   475  007B5F  E0                 	db	224
   476  007B60  E0                 	db	224
   477  007B61  E0                 	db	224
   478  007B62  E0                 	db	224
   479  007B63  E0                 	db	224
   480  007B64  E0                 	db	224
   481  007B65  E0                 	db	224
   482  007B66  E0                 	db	224
   483  007B67  E0                 	db	224
   484  007B68  E0                 	db	224
   485  007B69  E0                 	db	224
   486  007B6A  E0                 	db	224
   487  007B6B  E0                 	db	224
   488  007B6C  E0                 	db	224
   489  007B6D  E0                 	db	224
   490  007B6E  E0                 	db	224
   491  007B6F  E0                 	db	224
   492  007B70  E0                 	db	224
   493  007B71  E0                 	db	224
   494  007B72  E0                 	db	224
   495  007B73  E0                 	db	224
   496  007B74  E0                 	db	224
   497  007B75  E0                 	db	224
   498  007B76  E0                 	db	224
   499  007B77  E0                 	db	224
   500  007B78  E0                 	db	224
   501  007B79  E0                 	db	224
   502  007B7A  E0                 	db	224
   503  007B7B  E0                 	db	224
   504  007B7C  E0                 	db	224
   505  007B7D  E0                 	db	224
   506  007B7E  E0                 	db	224
   507  007B7F  E0                 	db	224
   508  007B80  E0                 	db	224
   509  007B81  E0                 	db	224
   510  007B82  E0                 	db	224
   511  007B83  E0                 	db	224
   512  007B84  E0                 	db	224
   513  007B85  E0                 	db	224
   514  007B86  E0                 	db	224
   515  007B87  E0                 	db	224
   516  007B88  F7                 	db	247
   517  007B89  F4                 	db	244
   518  007B8A  F4                 	db	244
   519  007B8B  F7                 	db	247
   520  007B8C  F4                 	db	244
   521  007B8D  F4                 	db	244
   522  007B8E  F7                 	db	247
   523  007B8F  E0                 	db	224
   524  007B90  E0                 	db	224
   525  007B91  E0                 	db	224
   526  007B92  E0                 	db	224
   527  007B93  E0                 	db	224
   528  007B94  E0                 	db	224
   529  007B95  E0                 	db	224
   530  007B96  E0                 	db	224
   531  007B97  E0                 	db	224
   532  007B98  E0                 	db	224
   533  007B99  E0                 	db	224
   534  007B9A  E0                 	db	224
   535  007B9B  E0                 	db	224
   536  007B9C  E0                 	db	224
   537  007B9D  E0                 	db	224
   538  007B9E  E0                 	db	224
   539  007B9F  E0                 	db	224
   540  007BA0  E0                 	db	224
   541  007BA1  E0                 	db	224
   542  007BA2  E0                 	db	224
   543  007BA3  E0                 	db	224
   544  007BA4  E0                 	db	224
   545  007BA5  E0                 	db	224
   546  007BA6  E0                 	db	224
   547  007BA7  E0                 	db	224
   548  007BA8  E0                 	db	224
   549  007BA9  E0                 	db	224
   550  007BAA  E0                 	db	224
   551  007BAB  E0                 	db	224
   552  007BAC  E0                 	db	224
   553  007BAD  E0                 	db	224
   554  007BAE  E0                 	db	224
   555  007BAF  E0                 	db	224
   556  007BB0  E0                 	db	224
   557  007BB1  E0                 	db	224
   558  007BB2  E0                 	db	224
   559  007BB3  E0                 	db	224
   560  007BB4  E0                 	db	224
   561  007BB5  E0                 	db	224
   562  007BB6  E0                 	db	224
   563  007BB7  E0                 	db	224
   564  007BB8  E0                 	db	224
   565  007BB9  E0                 	db	224
   566  007BBA  E0                 	db	224
   567  007BBB  E0                 	db	224
   568  007BBC  E0                 	db	224
   569  007BBD  E0                 	db	224
   570  007BBE  E0                 	db	224
   571  007BBF  E0                 	db	224
   572  007BC0  E0                 	db	224
   573  007BC1  E0                 	db	224
   574  007BC2  E0                 	db	224
   575  007BC3  E0                 	db	224
   576  007BC4  E0                 	db	224
   577  007BC5  E0                 	db	224
   578  007BC6  E0                 	db	224
   579  007BC7  E0                 	db	224
   580  007BC8  E0                 	db	224
   581  007BC9  E0                 	db	224
   582  007BCA  E0                 	db	224
   583  007BCB  E0                 	db	224
   584  007BCC  E0                 	db	224
   585  007BCD  E0                 	db	224
   586  007BCE  F5                 	db	245
   587  007BCF  F5                 	db	245
   588  007BD0  F5                 	db	245
   589  007BD1  F7                 	db	247
   590  007BD2  F4                 	db	244
   591  007BD3  F4                 	db	244
   592  007BD4  F4                 	db	244
   593  007BD5  E0                 	db	224
   594  007BD6  E0                 	db	224
   595  007BD7  E0                 	db	224
   596  007BD8  E0                 	db	224
   597  007BD9  E0                 	db	224
   598  007BDA  E0                 	db	224
   599  007BDB  E0                 	db	224
   600  007BDC  E0                 	db	224
   601  007BDD  E0                 	db	224
   602  007BDE  E0                 	db	224
   603  007BDF  E0                 	db	224
   604  007BE0  E0                 	db	224
   605  007BE1  E0                 	db	224
   606  007BE2  E0                 	db	224
   607  007BE3  E0                 	db	224
   608  007BE4  E0                 	db	224
   609  007BE5  E0                 	db	224
   610  007BE6  E0                 	db	224
   611  007BE7  E0                 	db	224
   612  007BE8  E0                 	db	224
   613  007BE9  E0                 	db	224
   614  007BEA  E0                 	db	224
   615  007BEB  E0                 	db	224
   616  007BEC  E0                 	db	224
   617  007BED  E0                 	db	224
   618  007BEE  E0                 	db	224
   619  007BEF  E0                 	db	224
   620  007BF0  E0                 	db	224
   621  007BF1  E0                 	db	224
   622  007BF2  E0                 	db	224
   623  007BF3  E0                 	db	224
   624  007BF4  E0                 	db	224
   625  007BF5  E0                 	db	224
   626  007BF6  E0                 	db	224
   627  007BF7  E0                 	db	224
   628  007BF8  E0                 	db	224
   629  007BF9  E0                 	db	224
   630  007BFA  E0                 	db	224
   631  007BFB  E0                 	db	224
   632  007BFC  E0                 	db	224
   633  007BFD  E0                 	db	224
   634  007BFE  E0                 	db	224
   635  007BFF  E0                 	db	224
   636  007C00  E0                 	db	224
   637  007C01  E0                 	db	224
   638  007C02  E0                 	db	224
   639  007C03  E0                 	db	224
   640  007C04  E0                 	db	224
   641  007C05  E0                 	db	224
   642  007C06  E0                 	db	224
   643  007C07  E0                 	db	224
   644  007C08  E0                 	db	224
   645  007C09  E0                 	db	224
   646  007C0A  E0                 	db	224
   647  007C0B  E0                 	db	224
   648  007C0C  E0                 	db	224
   649  007C0D  E0                 	db	224
   650  007C0E  E0                 	db	224
   651  007C0F  E0                 	db	224
   652  007C10  E0                 	db	224
   653  007C11  E0                 	db	224
   654  007C12  E0                 	db	224
   655  007C13  E0                 	db	224
   656  007C14  F7                 	db	247
   657  007C15  F1                 	db	241
   658  007C16  F1                 	db	241
   659  007C17  F7                 	db	247
   660  007C18  F4                 	db	244
   661  007C19  F4                 	db	244
   662  007C1A  F7                 	db	247
   663  007C1B  E0                 	db	224
   664  007C1C  E0                 	db	224
   665  007C1D  E0                 	db	224
   666  007C1E  E0                 	db	224
   667  007C1F  E0                 	db	224
   668  007C20  E0                 	db	224
   669  007C21  E0                 	db	224
   670  007C22  E0                 	db	224
   671  007C23  E0                 	db	224
   672  007C24  E0                 	db	224
   673  007C25  E0                 	db	224
   674  007C26  E0                 	db	224
   675  007C27  E0                 	db	224
   676  007C28  E0                 	db	224
   677  007C29  E0                 	db	224
   678  007C2A  E0                 	db	224
   679  007C2B  E0                 	db	224
   680  007C2C  E0                 	db	224
   681  007C2D  E0                 	db	224
   682  007C2E  E0                 	db	224
   683  007C2F  E0                 	db	224
   684  007C30  E0                 	db	224
   685  007C31  E0                 	db	224
   686  007C32  E0                 	db	224
   687  007C33  E0                 	db	224
   688  007C34  E0                 	db	224
   689  007C35  E0                 	db	224
   690  007C36  E0                 	db	224
   691  007C37  E0                 	db	224
   692  007C38  E0                 	db	224
   693  007C39  E0                 	db	224
   694  007C3A  E0                 	db	224
   695  007C3B  E0                 	db	224
   696  007C3C  E0                 	db	224
   697  007C3D  E0                 	db	224
   698  007C3E  E0                 	db	224
   699  007C3F  E0                 	db	224
   700  007C40  E0                 	db	224
   701  007C41  E0                 	db	224
   702  007C42  E0                 	db	224
   703  007C43  E0                 	db	224
   704  007C44  E0                 	db	224
   705  007C45  E4                 	db	228
   706  007C46  EE                 	db	238
   707  007C47  F5                 	db	245
   708  007C48  E4                 	db	228
   709  007C49  E4                 	db	228
   710  007C4A  E4                 	db	228
   711  007C4B  E4                 	db	228
   712  007C4C  E4                 	db	228
   713  007C4D  E4                 	db	228
   714  007C4E  E4                 	db	228
   715  007C4F  E4                 	db	228
   716  007C50  F5                 	db	245
   717  007C51  EE                 	db	238
   718  007C52  E4                 	db	228
   719  007C53  E0                 	db	224
   720  007C54  E0                 	db	224
   721  007C55  E0                 	db	224
   722  007C56  E0                 	db	224
   723  007C57  E0                 	db	224
   724  007C58  E0                 	db	224
   725  007C59  E0                 	db	224
   726  007C5A  E0                 	db	224
   727  007C5B  E0                 	db	224
   728  007C5C  E0                 	db	224
   729  007C5D  E0                 	db	224
   730  007C5E  E0                 	db	224
   731  007C5F  E0                 	db	224
   732  007C60  E0                 	db	224
   733  007C61  FF                 	db	255
   734  007C62  E0                 	db	224
   735  007C63  E0                 	db	224
   736  007C64  E0                 	db	224
   737  007C65  E0                 	db	224
   738  007C66  E0                 	db	224
   739  007C67  E0                 	db	224
   740  007C68  E0                 	db	224
   741  007C69  FF                 	db	255
   742  007C6A  E0                 	db	224
   743  007C6B  E0                 	db	224
   744  007C6C  E0                 	db	224
   745  007C6D  E0                 	db	224
   746  007C6E  E0                 	db	224
   747  007C6F  E0                 	db	224
   748  007C70  E0                 	db	224
   749  007C71  FF                 	db	255
   750  007C72  E0                 	db	224
   751  007C73  E0                 	db	224
   752  007C74  E0                 	db	224
   753  007C75  E0                 	db	224
   754  007C76  E0                 	db	224
   755  007C77  E0                 	db	224
   756  007C78  E0                 	db	224
   757  007C79  FF                 	db	255
   758  007C7A  E0                 	db	224
   759  007C7B  E0                 	db	224
   760  007C7C  E0                 	db	224
   761  007C7D  E0                 	db	224
   762  007C7E  E0                 	db	224
   763  007C7F  E0                 	db	224
   764  007C80  E0                 	db	224
   765  007C81  FF                 	db	255
   766  007C82  E0                 	db	224
   767  007C83  E0                 	db	224
   768  007C84  E0                 	db	224
   769  007C85  E0                 	db	224
   770  007C86  E0                 	db	224
   771  007C87  E0                 	db	224
   772  007C88  E0                 	db	224
   773  007C89  FF                 	db	255
   774  007C8A  E0                 	db	224
   775  007C8B  E0                 	db	224
   776  007C8C  E0                 	db	224
   777  007C8D  E0                 	db	224
   778  007C8E  E0                 	db	224
   779  007C8F  E0                 	db	224
   780  007C90  E0                 	db	224
   781  007C91  FF                 	db	255
   782  007C92  F0                 	db	240
   783  007C93  F0                 	db	240
   784  007C94  F0                 	db	240
   785  007C95  F0                 	db	240
   786  007C96  F0                 	db	240
   787  007C97  F0                 	db	240
   788  007C98  F0                 	db	240
   789  007C99  E8                 	db	232
   790  007C9A  E8                 	db	232
   791  007C9B  E8                 	db	232
   792  007C9C  E8                 	db	232
   793  007C9D  E8                 	db	232
   794  007C9E  E8                 	db	232
   795  007C9F  E8                 	db	232
   796  007CA0  E4                 	db	228
   797  007CA1  E4                 	db	228
   798  007CA2  E4                 	db	228
   799  007CA3  E4                 	db	228
   800  007CA4  E4                 	db	228
   801  007CA5  E4                 	db	228
   802  007CA6  E4                 	db	228
   803  007CA7  E2                 	db	226
   804  007CA8  E2                 	db	226
   805  007CA9  E2                 	db	226
   806  007CAA  E2                 	db	226
   807  007CAB  E2                 	db	226
   808  007CAC  E2                 	db	226
   809  007CAD  E2                 	db	226
   810  007CAE  E1                 	db	225
   811  007CAF  E1                 	db	225
   812  007CB0  E1                 	db	225
   813  007CB1  E1                 	db	225
   814  007CB2  E1                 	db	225
   815  007CB3  E1                 	db	225
   816  007CB4  E1                 	db	225
   817  007CB5  FF                 	db	255
   818  007CB6  FF                 	db	255
   819  007CB7  FF                 	db	255
   820  007CB8  FF                 	db	255
   821  007CB9  FF                 	db	255
   822  007CBA  FF                 	db	255
   823  007CBB  FF                 	db	255
   824  007CBC                     __end_of_sign:
   825                           	callstack 0
   826  007CBC                     _tFloor_Tab:
   827                           	callstack 0
   828  007CBC  5555               	dw	21845
   829  007CBE  0140               	dw	320
   830  007CC0  D4D4               	dw	54484
   831  007CC2  95D4               	dw	38356
   832  007CC4  81C1               	dw	33217
   833  007CC6  9595               	dw	38293
   834  007CC8  D595               	dw	54677
   835  007CCA  0154               	dw	340
   836  007CCC  D5D5               	dw	54741
   837  007CCE  95D5               	dw	38357
   838  007CD0  C1D5               	dw	49621
   839  007CD2  1DDC               	dw	7644
   840  007CD4  5415               	dw	21525
   841  007CD6  1D5C               	dw	7516
   842  007CD8  D495               	dw	54421
   843  007CDA  C095               	dw	49301
   844  007CDC  5595               	dw	21909
   845  007CDE  C1C1               	dw	49601
   846  007CE0  1C1C               	dw	7196
   847  007CE2  181C               	dw	6172
   848  007CE4  0A28               	dw	2600
   849  007CE6  5401               	dw	21505
   850  007CE8  4163               	dw	16739
   851  007CEA  4343               	dw	17219
   852  007CEC  5555               	dw	21845
   853  007CEE  C0D5               	dw	49365
   854  007CF0  81D5               	dw	33237
   855  007CF2  C235               	dw	49717
   856  007CF4  1616               	dw	5654
   857  007CF6  081C               	dw	2076
   858  007CF8  5541               	dw	21825
   859  007CFA  5541               	dw	21825
   860  007CFC  5D49               	dw	23881
   861  007CFE  2222               	dw	8738
   862  007D00  0822               	dw	2082
   863  007D02  3434               	dw	13364
   864  007D04  8888               	dw	34952
   865  007D06  8080               	dw	32896
   866  007D08  4D59               	dw	19801
   867  007D0A  4141               	dw	16705
   868  007D0C  4CD1               	dw	19665
   869  007D0E  45D1               	dw	17873
   870  007D10  41C9               	dw	16841
   871  007D12  4599               	dw	17817
   872  007D14  4D99               	dw	19865
   873  007D16  4151               	dw	16721
   874  007D18  4DD9               	dw	19929
   875  007D1A  45D9               	dw	17881
   876  007D1C  0000               	dw	0
   877  007D1E  D14C               	dw	53580
   878  007D20  0000               	dw	0
   879  007D22  0000               	dw	0
   880  007D24  0000               	dw	0
   881  007D26  0000               	dw	0
   882  007D28  0000               	dw	0
   883  007D2A  0000               	dw	0
   884  007D2C  0000               	dw	0
   885  007D2E  0000               	dw	0
   886  007D30  0000               	dw	0
   887  007D32  994C               	dw	39244
   888  007D34  0000               	dw	0
   889  007D36  0000               	dw	0
   890  007D38  0000               	dw	0
   891  007D3A  0000               	dw	0
   892  007D3C  0000               	dw	0
   893  007D3E  0000               	dw	0
   894  007D40  0000               	dw	0
   895  007D42  0000               	dw	0
   896  007D44  0000               	dw	0
   897  007D46  8949               	dw	35145
   898  007D48  0000               	dw	0
   899  007D4A  0000               	dw	0
   900  007D4C  0000               	dw	0
   901  007D4E  0000               	dw	0
   902  007D50  0000               	dw	0
   903  007D52  0000               	dw	0
   904  007D54  0000               	dw	0
   905  007D56  0000               	dw	0
   906  007D58  0000               	dw	0
   907  007D5A  9945               	dw	39237
   908  007D5C  0000               	dw	0
   909  007D5E  0000               	dw	0
   910  007D60  0000               	dw	0
   911  007D62  0000               	dw	0
   912  007D64  0000               	dw	0
   913  007D66  0000               	dw	0
   914  007D68  0060               	dw	96
   915  007D6A  00C0               	dw	192
   916  007D6C  0010               	dw	16
   917  007D6E  0008               	dw	8
   918  007D70  0004               	dw	4
   919  007D72  0010               	dw	16
   920  007D74  0040               	dw	64
   921  007D76  0100               	dw	256
   922  007D78  0400               	dw	1024
   923  007D7A  1000               	dw	4096
   924  007D7C  4000               	dw	16384
   925  007D7E  0001               	dw	1
   926  007D80  8000               	dw	32768
   927  007D82  0080               	dw	128
   928  007D84  0002               	dw	2
   929  007D86  0008               	dw	8
   930  007D88  0020               	dw	32
   931  007D8A  0200               	dw	512
   932  007D8C  0800               	dw	2048
   933  007D8E  2000               	dw	8192
   934  007D90  0004               	dw	4
   935  007D92  0010               	dw	16
   936  007D94  0040               	dw	64
   937  007D96  0100               	dw	256
   938  007D98  0400               	dw	1024
   939  007D9A  1000               	dw	4096
   940  007D9C  4000               	dw	16384
   941  007D9E  0001               	dw	1
   942  007DA0  8000               	dw	32768
   943  007DA2  0080               	dw	128
   944  007DA4  0002               	dw	2
   945  007DA6  0008               	dw	8
   946  007DA8  0020               	dw	32
   947  007DAA  0200               	dw	512
   948  007DAC  0800               	dw	2048
   949  007DAE  2000               	dw	8192
   950  007DB0  0060               	dw	96
   951  007DB2  00C0               	dw	192
   952  007DB4  0010               	dw	16
   953  007DB6  0008               	dw	8
   954  007DB8  00E0               	dw	224
   955  007DBA  FFFF               	dw	65535
   956  007DBC                     __end_of_tFloor_Tab:
   957                           	callstack 0
   958  007DBC                     _testdisplay:
   959                           	callstack 0
   960  007DBC  5A                 	db	90
   961  007DBD  5A                 	db	90
   962  007DBE  5A                 	db	90
   963  007DBF  5B                 	db	91
   964  007DC0  5B                 	db	91
   965  007DC1  5B                 	db	91
   966  007DC2  5C                 	db	92
   967  007DC3  5C                 	db	92
   968  007DC4  5C                 	db	92
   969  007DC5  5D                 	db	93
   970  007DC6  5D                 	db	93
   971  007DC7  5D                 	db	93
   972  007DC8  5E                 	db	94
   973  007DC9  5E                 	db	94
   974  007DCA  5E                 	db	94
   975  007DCB  5F                 	db	95
   976  007DCC  5F                 	db	95
   977  007DCD  5F                 	db	95
   978  007DCE  60                 	db	96
   979  007DCF  60                 	db	96
   980  007DD0  60                 	db	96
   981  007DD1  61                 	db	97
   982  007DD2  61                 	db	97
   983  007DD3  61                 	db	97
   984  007DD4  62                 	db	98
   985  007DD5  62                 	db	98
   986  007DD6  62                 	db	98
   987  007DD7  63                 	db	99
   988  007DD8  63                 	db	99
   989  007DD9  63                 	db	99
   990  007DDA  64                 	db	100
   991  007DDB  64                 	db	100
   992  007DDC  64                 	db	100
   993  007DDD  65                 	db	101
   994  007DDE  65                 	db	101
   995  007DDF  65                 	db	101
   996  007DE0  66                 	db	102
   997  007DE1  66                 	db	102
   998  007DE2  66                 	db	102
   999  007DE3  67                 	db	103
  1000  007DE4  67                 	db	103
  1001  007DE5  67                 	db	103
  1002  007DE6  45                 	db	69
  1003  007DE7  42                 	db	66
  1004  007DE8  49                 	db	73
  1005  007DE9  42                 	db	66
  1006  007DEA  3C                 	db	60
  1007  007DEB  45                 	db	69
  1008  007DEC  3C                 	db	60
  1009  007DED  3C                 	db	60
  1010  007DEE  42                 	db	66
  1011  007DEF  3C                 	db	60
  1012  007DF0  3C                 	db	60
  1013  007DF1  3C                 	db	60
  1014  007DF2  3C                 	db	60
  1015  007DF3  3C                 	db	60
  1016  007DF4  3C                 	db	60
  1017  007DF5  55                 	db	85
  1018  007DF6  31                 	db	49
  1019  007DF7  3F                 	db	63
  1020  007DF8  55                 	db	85
  1021  007DF9  31                 	db	49
  1022  007DFA  3F                 	db	63
  1023  007DFB  55                 	db	85
  1024  007DFC  31                 	db	49
  1025  007DFD  3F                 	db	63
  1026  007DFE  55                 	db	85
  1027  007DFF  31                 	db	49
  1028  007E00  3F                 	db	63
  1029  007E01  45                 	db	69
  1030  007E02  47                 	db	71
  1031  007E03  3F                 	db	63
  1032  007E04  45                 	db	69
  1033  007E05  47                 	db	71
  1034  007E06  3F                 	db	63
  1035  007E07  46                 	db	70
  1036  007E08  31                 	db	49
  1037  007E09  3F                 	db	63
  1038  007E0A  46                 	db	70
  1039  007E0B  31                 	db	49
  1040  007E0C  3F                 	db	63
  1041  007E0D  46                 	db	70
  1042  007E0E  32                 	db	50
  1043  007E0F  3F                 	db	63
  1044  007E10  46                 	db	70
  1045  007E11  32                 	db	50
  1046  007E12  3F                 	db	63
  1047  007E13  46                 	db	70
  1048  007E14  33                 	db	51
  1049  007E15  3F                 	db	63
  1050  007E16  46                 	db	70
  1051  007E17  33                 	db	51
  1052  007E18  3F                 	db	63
  1053  007E19  46                 	db	70
  1054  007E1A  34                 	db	52
  1055  007E1B  3F                 	db	63
  1056  007E1C  46                 	db	70
  1057  007E1D  34                 	db	52
  1058  007E1E  3F                 	db	63
  1059  007E1F  46                 	db	70
  1060  007E20  35                 	db	53
  1061  007E21  3F                 	db	63
  1062  007E22  46                 	db	70
  1063  007E23  35                 	db	53
  1064  007E24  3F                 	db	63
  1065  007E25  46                 	db	70
  1066  007E26  36                 	db	54
  1067  007E27  3F                 	db	63
  1068  007E28  46                 	db	70
  1069  007E29  36                 	db	54
  1070  007E2A  3F                 	db	63
  1071  007E2B  46                 	db	70
  1072  007E2C  36                 	db	54
  1073  007E2D  3E                 	db	62
  1074  007E2E  46                 	db	70
  1075  007E2F  36                 	db	54
  1076  007E30  3E                 	db	62
  1077  007E31  46                 	db	70
  1078  007E32  36                 	db	54
  1079  007E33  3E                 	db	62
  1080  007E34  46                 	db	70
  1081  007E35  36                 	db	54
  1082  007E36  3E                 	db	62
  1083  007E37  46                 	db	70
  1084  007E38  36                 	db	54
  1085  007E39  40                 	db	64
  1086  007E3A  46                 	db	70
  1087  007E3B  36                 	db	54
  1088  007E3C  40                 	db	64
  1089  007E3D  46                 	db	70
  1090  007E3E  36                 	db	54
  1091  007E3F  40                 	db	64
  1092  007E40  46                 	db	70
  1093  007E41  36                 	db	54
  1094  007E42  40                 	db	64
  1095  007E43  46                 	db	70
  1096  007E44  35                 	db	53
  1097  007E45  40                 	db	64
  1098  007E46  46                 	db	70
  1099  007E47  35                 	db	53
  1100  007E48  40                 	db	64
  1101  007E49  46                 	db	70
  1102  007E4A  34                 	db	52
  1103  007E4B  40                 	db	64
  1104  007E4C  46                 	db	70
  1105  007E4D  34                 	db	52
  1106  007E4E  40                 	db	64
  1107  007E4F  46                 	db	70
  1108  007E50  33                 	db	51
  1109  007E51  40                 	db	64
  1110  007E52  46                 	db	70
  1111  007E53  33                 	db	51
  1112  007E54  40                 	db	64
  1113  007E55  46                 	db	70
  1114  007E56  32                 	db	50
  1115  007E57  40                 	db	64
  1116  007E58  46                 	db	70
  1117  007E59  32                 	db	50
  1118  007E5A  40                 	db	64
  1119  007E5B  46                 	db	70
  1120  007E5C  31                 	db	49
  1121  007E5D  40                 	db	64
  1122  007E5E  46                 	db	70
  1123  007E5F  31                 	db	49
  1124  007E60  40                 	db	64
  1125  007E61  45                 	db	69
  1126  007E62  47                 	db	71
  1127  007E63  40                 	db	64
  1128  007E64  45                 	db	69
  1129  007E65  47                 	db	71
  1130  007E66  40                 	db	64
  1131  007E67  55                 	db	85
  1132  007E68  31                 	db	49
  1133  007E69  40                 	db	64
  1134  007E6A  55                 	db	85
  1135  007E6B  31                 	db	49
  1136  007E6C  40                 	db	64
  1137  007E6D  3D                 	db	61
  1138  007E6E  3D                 	db	61
  1139  007E6F  3E                 	db	62
  1140  007E70  3D                 	db	61
  1141  007E71  3D                 	db	61
  1142  007E72  3E                 	db	62
  1143  007E73  3C                 	db	60
  1144  007E74  3C                 	db	60
  1145  007E75  46                 	db	70
  1146  007E76  3C                 	db	60
  1147  007E77  46                 	db	70
  1148  007E78  45                 	db	69
  1149  007E79  46                 	db	70
  1150  007E7A  45                 	db	69
  1151  007E7B  55                 	db	85
  1152  007E7C  45                 	db	69
  1153  007E7D  55                 	db	85
  1154  007E7E  45                 	db	69
  1155  007E7F  55                 	db	85
  1156  007E80  45                 	db	69
  1157  007E81  52                 	db	82
  1158  007E82  45                 	db	69
  1159  007E83  52                 	db	82
  1160  007E84  57                 	db	87
  1161  007E85  52                 	db	82
  1162  007E86  57                 	db	87
  1163  007E87  45                 	db	69
  1164  007E88  57                 	db	87
  1165  007E89  45                 	db	69
  1166  007E8A  48                 	db	72
  1167  007E8B  45                 	db	69
  1168  007E8C  48                 	db	72
  1169  007E8D  52                 	db	82
  1170  007E8E  48                 	db	72
  1171  007E8F  52                 	db	82
  1172  007E90  46                 	db	70
  1173  007E91  52                 	db	82
  1174  007E92  46                 	db	70
  1175  007E93  41                 	db	65
  1176  007E94  46                 	db	70
  1177  007E95  41                 	db	65
  1178  007E96  48                 	db	72
  1179  007E97  41                 	db	65
  1180  007E98  48                 	db	72
  1181  007E99  52                 	db	82
  1182  007E9A  48                 	db	72
  1183  007E9B  52                 	db	82
  1184  007E9C  54                 	db	84
  1185  007E9D  52                 	db	82
  1186  007E9E  54                 	db	84
  1187  007E9F  3C                 	db	60
  1188  007EA0  54                 	db	84
  1189  007EA1  3C                 	db	60
  1190  007EA2  3C                 	db	60
  1191  007EA3  3C                 	db	60
  1192  007EA4  3C                 	db	60
  1193  007EA5  3C                 	db	60
  1194  007EA6  3C                 	db	60
  1195  007EA7  3C                 	db	60
  1196  007EA8  3C                 	db	60
  1197  007EA9  3C                 	db	60
  1198  007EAA  3C                 	db	60
  1199  007EAB  3C                 	db	60
  1200  007EAC                     __end_of_testdisplay:
  1201                           	callstack 0
  1202  007EAC                     _dict:
  1203                           	callstack 0
  1204  007EAC  1000               	dw	4096
  1205  007EAE  00                 	db	0
  1206  007EAF  00                 	db	0
  1207  007EB0  04                 	db	4
  1208  007EB1  B3                 	db	low _device_type
  1209  007EB2  00                 	db	0
  1210  007EB3  1001               	dw	4097
  1211  007EB5  00                 	db	0
  1212  007EB6  00                 	db	0
  1213  007EB7  01                 	db	1
  1214  007EB8  BA                 	db	low _errorregister
  1215  007EB9  00                 	db	0
  1216  007EBA  1008               	dw	4104
  1217  007EBC  00                 	db	0
  1218  007EBD  00                 	db	0
  1219  007EBE  06                 	db	6
  1220  007EBF  F2                 	db	low _device_name_G741
  1221  007EC0  7F                 	db	high _device_name_G741
  1222  007EC1  1009               	dw	4105
  1223  007EC3  00                 	db	0
  1224  007EC4  00                 	db	0
  1225  007EC5  05                 	db	5
  1226  007EC6  EC                 	db	low _hardware_uea_G741
  1227  007EC7  7F                 	db	high _hardware_uea_G741
  1228  007EC8  100A               	dw	4106
  1229  007ECA  00                 	db	0
  1230  007ECB  00                 	db	0
  1231  007ECC  05                 	db	5
  1232  007ECD  F8                 	db	low _version_uea_G741
  1233  007ECE  7F                 	db	high _version_uea_G741
  1234  007ECF  1016               	dw	4118
  1235  007ED1  08                 	db	8
  1236  007ED2  00                 	db	0
  1237  007ED3  04                 	db	4
  1238  007ED4  00                 	db	0
  1239  007ED5  00                 	db	0
  1240  007ED6  1018               	dw	4120
  1241  007ED8  04                 	db	4
  1242  007ED9  01                 	db	1
  1243  007EDA  04                 	db	4
  1244  007EDB  00                 	db	0
  1245  007EDC  00                 	db	0
  1246  007EDD  6000               	dw	24576
  1247  007EDF  03                 	db	3
  1248  007EE0  00                 	db	0
  1249  007EE1  02                 	db	2
  1250  007EE2  AD                 	db	low _virtual_device
  1251  007EE3  00                 	db	0
  1252  007EE4  6001               	dw	24577
  1253  007EE6  00                 	db	0
  1254  007EE7  01                 	db	1
  1255  007EE8  01                 	db	1
  1256  007EE9  2A                 	db	low _disp_lift
  1257  007EEA  00                 	db	0
  1258  007EEB  6120               	dw	24864
  1259  007EED  08                 	db	8
  1260  007EEE  01                 	db	1
  1261  007EEF  04                 	db	4
  1262  007EF0  00                 	db	0
  1263  007EF1  00                 	db	0
  1264  007EF2  6140               	dw	24896
  1265  007EF4  08                 	db	8
  1266  007EF5  01                 	db	1
  1267  007EF6  04                 	db	4
  1268  007EF7  00                 	db	0
  1269  007EF8  00                 	db	0
  1270  007EF9  6160               	dw	24928
  1271  007EFB  08                 	db	8
  1272  007EFC  01                 	db	1
  1273  007EFD  04                 	db	4
  1274  007EFE  B9                 	db	low _in_polarity
  1275  007EFF  00                 	db	0
  1276  007F00  6180               	dw	24960
  1277  007F02  08                 	db	8
  1278  007F03  01                 	db	1
  1279  007F04  04                 	db	4
  1280  007F05  46                 	db	low (_inpar+6)
  1281  007F06  01                 	db	high (_inpar+6)
  1282  007F07  6220               	dw	25120
  1283  007F09  08                 	db	8
  1284  007F0A  01                 	db	1
  1285  007F0B  04                 	db	4
  1286  007F0C  00                 	db	0
  1287  007F0D  00                 	db	0
  1288  007F0E  6240               	dw	25152
  1289  007F10  08                 	db	8
  1290  007F11  01                 	db	1
  1291  007F12  04                 	db	4
  1292  007F13  00                 	db	0
  1293  007F14  00                 	db	0
  1294  007F15  6260               	dw	25184
  1295  007F17  08                 	db	8
  1296  007F18  01                 	db	1
  1297  007F19  04                 	db	4
  1298  007F1A  29                 	db	low _out_polarity
  1299  007F1B  00                 	db	0
  1300  007F1C  6280               	dw	25216
  1301  007F1E  08                 	db	8
  1302  007F1F  01                 	db	1
  1303  007F20  04                 	db	4
  1304  007F21  06                 	db	low (_outpar+6)
  1305  007F22  01                 	db	high (_outpar+6)
  1306  007F23  6010               	dw	24592
  1307  007F25  00                 	db	0
  1308  007F26  00                 	db	0
  1309  007F27  07                 	db	7
  1310  007F28  00                 	db	0
  1311  007F29  00                 	db	0
  1312  007F2A  6011               	dw	24593
  1313  007F2C  00                 	db	0
  1314  007F2D  01                 	db	1
  1315  007F2E  07                 	db	7
  1316  007F2F  00                 	db	0
  1317  007F30  00                 	db	0
  1318  007F31  6100               	dw	24832
  1319  007F33  08                 	db	8
  1320  007F34  01                 	db	1
  1321  007F35  07                 	db	7
  1322  007F36  00                 	db	0
  1323  007F37  00                 	db	0
  1324  007F38  6200               	dw	25088
  1325  007F3A  08                 	db	8
  1326  007F3B  01                 	db	1
  1327  007F3C  07                 	db	7
  1328  007F3D  00                 	db	0
  1329  007F3E  00                 	db	0
  1330  007F3F  2FFD               	dw	12285
  1331  007F41  00                 	db	0
  1332  007F42  00                 	db	0
  1333  007F43  01                 	db	1
  1334  007F44  BB                 	db	low _in
  1335  007F45  00                 	db	0
  1336  007F46  2FFE               	dw	12286
  1337  007F48  00                 	db	0
  1338  007F49  01                 	db	1
  1339  007F4A  01                 	db	1
  1340  007F4B  2B                 	db	low _out
  1341  007F4C  00                 	db	0
  1342  007F4D  24CA               	dw	9418
  1343  007F4F  00                 	db	0
  1344  007F50  01                 	db	1
  1345  007F51  01                 	db	1
  1346  007F52  B8                 	db	low _arrowtype
  1347  007F53  00                 	db	0
  1348  007F54  24EE               	dw	9454
  1349  007F56  00                 	db	0
  1350  007F57  01                 	db	1
  1351  007F58  01                 	db	1
  1352  007F59  27                 	db	low _direction_ind_mode
  1353  007F5A  00                 	db	0
  1354  007F5B  250D               	dw	9485
  1355  007F5D  00                 	db	0
  1356  007F5E  01                 	db	1
  1357  007F5F  01                 	db	1
  1358  007F60  26                 	db	low _backlight_mode
  1359  007F61  00                 	db	0
  1360  007F62  FFFF               	dw	65535
  1361  007F64  00                 	db	0
  1362  007F65  00                 	db	0
  1363  007F66  00                 	db	0
  1364  007F67  00                 	db	0
  1365  007F68  00                 	db	0
  1366  007F69                     __end_of_dict:
  1367                           	callstack 0
  1368  007F69                     _tDisp_FloorAscii:
  1369                           	callstack 0
  1370  007F69  30                 	db	48
  1371  007F6A  31                 	db	49
  1372  007F6B  32                 	db	50
  1373  007F6C  33                 	db	51
  1374  007F6D  34                 	db	52
  1375  007F6E  35                 	db	53
  1376  007F6F  36                 	db	54
  1377  007F70  37                 	db	55
  1378  007F71  38                 	db	56
  1379  007F72  39                 	db	57
  1380  007F73  41                 	db	65
  1381  007F74  42                 	db	66
  1382  007F75  43                 	db	67
  1383  007F76  44                 	db	68
  1384  007F77  45                 	db	69
  1385  007F78  46                 	db	70
  1386  007F79  47                 	db	71
  1387  007F7A  48                 	db	72
  1388  007F7B  49                 	db	73
  1389  007F7C  4A                 	db	74
  1390  007F7D  4B                 	db	75
  1391  007F7E  4C                 	db	76
  1392  007F7F  4D                 	db	77
  1393  007F80  4E                 	db	78
  1394  007F81  4F                 	db	79
  1395  007F82  50                 	db	80
  1396  007F83  51                 	db	81
  1397  007F84  52                 	db	82
  1398  007F85  53                 	db	83
  1399  007F86  54                 	db	84
  1400  007F87  55                 	db	85
  1401  007F88  56                 	db	86
  1402  007F89  57                 	db	87
  1403  007F8A  58                 	db	88
  1404  007F8B  59                 	db	89
  1405  007F8C  5A                 	db	90
  1406  007F8D  2B                 	db	43
  1407  007F8E  2D                 	db	45
  1408  007F8F  61                 	db	97
  1409  007F90  62                 	db	98
  1410  007F91  63                 	db	99
  1411  007F92  64                 	db	100
  1412  007F93  65                 	db	101
  1413  007F94  66                 	db	102
  1414  007F95  67                 	db	103
  1415  007F96  68                 	db	104
  1416  007F97  69                 	db	105
  1417  007F98  6A                 	db	106
  1418  007F99  6B                 	db	107
  1419  007F9A  6C                 	db	108
  1420  007F9B  6D                 	db	109
  1421  007F9C  6E                 	db	110
  1422  007F9D  6F                 	db	111
  1423  007F9E  70                 	db	112
  1424  007F9F  71                 	db	113
  1425  007FA0  72                 	db	114
  1426  007FA1  73                 	db	115
  1427  007FA2  74                 	db	116
  1428  007FA3  75                 	db	117
  1429  007FA4  76                 	db	118
  1430  007FA5  77                 	db	119
  1431  007FA6  78                 	db	120
  1432  007FA7  79                 	db	121
  1433  007FA8  7A                 	db	122
  1434  007FA9  21                 	db	33
  1435  007FAA  23                 	db	35
  1436  007FAB  24                 	db	36
  1437  007FAC  25                 	db	37
  1438  007FAD  26                 	db	38
  1439  007FAE  28                 	db	40
  1440  007FAF  29                 	db	41
  1441  007FB0  2A                 	db	42
  1442  007FB1  27                 	db	39
  1443  007FB2  2C                 	db	44
  1444  007FB3  3A                 	db	58
  1445  007FB4  3B                 	db	59
  1446  007FB5  3C                 	db	60
  1447  007FB6  3E                 	db	62
  1448  007FB7  3D                 	db	61
  1449  007FB8  40                 	db	64
  1450  007FB9  5B                 	db	91
  1451  007FBA  5D                 	db	93
  1452  007FBB  7B                 	db	123
  1453  007FBC  7D                 	db	125
  1454  007FBD  7C                 	db	124
  1455  007FBE  00                 	db	0
  1456  007FBF                     __end_of_tDisp_FloorAscii:
  1457                           	callstack 0
  1458  007FBF                     _identyty:
  1459                           	callstack 0
  1460  007FBF  00B5               	dw	181
  1461  007FC1  0000               	dw	0
  1462  007FC3  0000               	dw	0
  1463  007FC5  0000               	dw	0
  1464  007FC7  0000               	dw	0
  1465  007FC9  0000               	dw	0
  1466  007FCB  0000               	dw	0
  1467  007FCD  0000               	dw	0
  1468  007FCF                     __end_of_identyty:
  1469                           	callstack 0
  1470  007FCF                     _hardware_uea_G742:
  1471                           	callstack 0
  1472  007FCF  56                 	db	86
  1473  007FD0  31                 	db	49
  1474  007FD1  2E                 	db	46
  1475  007FD2  31                 	db	49
  1476  007FD3  00                 	db	0
  1477  007FD4  00                 	db	0
  1478  007FD5                     __end_of_hardware_uea_G742:
  1479                           	callstack 0
  1480  007FD5                     _device_name_G742:
  1481                           	callstack 0
  1482  007FD5  47                 	db	71
  1483  007FD6  2D                 	db	45
  1484  007FD7  37                 	db	55
  1485  007FD8  34                 	db	52
  1486  007FD9  32                 	db	50
  1487  007FDA  00                 	db	0
  1488  007FDB                     __end_of_device_name_G742:
  1489                           	callstack 0
  1490  007FDB                     _version_uea_G742:
  1491                           	callstack 0
  1492  007FDB  56                 	db	86
  1493  007FDC  31                 	db	49
  1494  007FDD  2E                 	db	46
  1495  007FDE  34                 	db	52
  1496  007FDF  41                 	db	65
  1497  007FE0  00                 	db	0
  1498  007FE1                     __end_of_version_uea_G742:
  1499                           	callstack 0
  1500  007FE1                     _version_chksum:
  1501                           	callstack 0
  1502  007FE1  FFFF               	dw	65535
  1503  007FE3  FFFF               	dw	65535
  1504  007FE5                     __end_of_version_chksum:
  1505                           	callstack 0
  1506  007FE5                     _tKeyCode:
  1507                           	callstack 0
  1508  007FE5  01                 	db	1
  1509  007FE6  02                 	db	2
  1510  007FE7  04                 	db	4
  1511  007FE8  AA                 	db	170
  1512  007FE9                     __end_of_tKeyCode:
  1513                           	callstack 0
  1514  007FE9                     _version_fver:
  1515                           	callstack 0
  1516  007FE9  E741               	dw	59201
  1517  007FEB                     __end_of_version_fver:
  1518                           	callstack 0
  1519  007FEB                     _C_INIT_NODEID:
  1520                           	callstack 0
  1521  007FEB  FF                 	db	255
  1522  007FEC                     __end_of_C_INIT_NODEID:
  1523                           	callstack 0
  1524  007FEC                     _hardware_uea_G741:
  1525                           	callstack 0
  1526  007FEC  56                 	db	86
  1527  007FED  31                 	db	49
  1528  007FEE  2E                 	db	46
  1529  007FEF  33                 	db	51
  1530  007FF0  00                 	db	0
  1531  007FF1  00                 	db	0
  1532  007FF2                     __end_of_hardware_uea_G741:
  1533                           	callstack 0
  1534  007FF2                     _device_name_G741:
  1535                           	callstack 0
  1536  007FF2  47                 	db	71
  1537  007FF3  2D                 	db	45
  1538  007FF4  37                 	db	55
  1539  007FF5  34                 	db	52
  1540  007FF6  31                 	db	49
  1541  007FF7  00                 	db	0
  1542  007FF8                     __end_of_device_name_G741:
  1543                           	callstack 0
  1544  007FF8                     _version_uea_G741:
  1545                           	callstack 0
  1546  007FF8  56                 	db	86
  1547  007FF9  31                 	db	49
  1548  007FFA  2E                 	db	46
  1549  007FFB  35                 	db	53
  1550  007FFC  41                 	db	65
  1551  007FFD  00                 	db	0
  1552  007FFE                     __end_of_version_uea_G741:
  1553                           	callstack 0
  1554  0000                     _RXM1SIDH	set	3836
  1555  0000                     _RXM1SIDL	set	3837
  1556  0000                     _RXF5SIDH	set	3828
  1557  0000                     _RXF5SIDL	set	3829
  1558  0000                     _RXF4SIDH	set	3824
  1559  0000                     _RXF4SIDL	set	3825
  1560  0000                     _RXF3SIDH	set	3820
  1561  0000                     _RXF3SIDL	set	3821
  1562  0000                     _RXF2SIDH	set	3816
  1563  0000                     _RXF2SIDL	set	3817
  1564  0000                     _RXM0SIDH	set	3832
  1565  0000                     _RXM0SIDL	set	3833
  1566  0000                     _RXF1SIDH	set	3812
  1567  0000                     _RXF1SIDL	set	3813
  1568  0000                     _RXF0SIDH	set	3808
  1569  0000                     _RXF0SIDL	set	3809
  1570  0000                     _BRGCON3	set	3653
  1571  0000                     _BRGCON2	set	3652
  1572  0000                     _BRGCON1	set	3651
  1573  0000                     _TXB1CONbits	set	3856
  1574  0000                     _TXB0CONbits	set	3872
  1575  0000                     _TXB0DLC	set	3877
  1576  0000                     _TXB0SIDL	set	3874
  1577  0000                     _TXB0SIDH	set	3873
  1578  0000                     _RXB1CONbits	set	3888
  1579  0000                     _RXB1DLC	set	3893
  1580  0000                     _RXB1SIDL	set	3890
  1581  0000                     _RXB1SIDH	set	3889
  1582  0000                     _TXB1D0	set	3862
  1583  0000                     _TXB1DLC	set	3861
  1584  0000                     _TXB1SIDL	set	3858
  1585  0000                     _TXB1SIDH	set	3857
  1586  0000                     _RXB1CON	set	3888
  1587  0000                     _ANCON1	set	3932
  1588  0000                     _ANCON0	set	3933
  1589  0000                     _PADCFG1	set	3926
  1590  0000                     _CTMUCONL	set	3924
  1591  0000                     _CTMUCONH	set	3925
  1592  0000                     _TXB0D0	set	3878
  1593  0000                     _RXB1D0	set	3894
  1594  0000                     _LATDbits	set	3980
  1595  0000                     _LATBbits	set	3978
  1596  0000                     _PIR4bits	set	4023
  1597  0000                     _EECON2	set	3966
  1598  0000                     _EEDATA	set	3955
  1599  0000                     _EECON1bits	set	3967
  1600  0000                     _EEADR	set	3956
  1601  0000                     _EEADRH	set	3957
  1602  0000                     _LATEbits	set	3981
  1603  0000                     _COMSTATbits	set	3953
  1604  0000                     _RXB0CONbits	set	3936
  1605  0000                     _RXB0DLC	set	3941
  1606  0000                     _RXB0SIDL	set	3938
  1607  0000                     _RXB0SIDH	set	3937
  1608  0000                     _PIR5bits	set	3959
  1609  0000                     _IPR5	set	3960
  1610  0000                     _PIE5	set	3958
  1611  0000                     _PIR5	set	3959
  1612  0000                     _RXB0CON	set	3936
  1613  0000                     _CANSTAT	set	3950
  1614  0000                     _CANCON	set	3951
  1615  0000                     _CIOCONbits	set	3952
  1616  0000                     _TRISBbits	set	3987
  1617  0000                     _INTCON	set	4082
  1618  0000                     _PORTA	set	3968
  1619  0000                     _ODCON	set	3985
  1620  0000                     _ADCON1	set	4033
  1621  0000                     _ADCON0	set	4034
  1622  0000                     _RCONbits	set	4048
  1623  0000                     _T2CON	set	4042
  1624  0000                     _TMR2	set	4044
  1625  0000                     _PR2	set	4043
  1626  0000                     _T1CON	set	4045
  1627  0000                     _TMR1L	set	4046
  1628  0000                     _TMR1H	set	4047
  1629  0000                     _IPR1bits	set	3999
  1630  0000                     _PIR1bits	set	3998
  1631  0000                     _T0CON	set	4053
  1632  0000                     _TMR0L	set	4054
  1633  0000                     _TMR0H	set	4055
  1634  0000                     _INTCON2bits	set	4081
  1635  0000                     _LATE	set	3981
  1636  0000                     _LATD	set	3980
  1637  0000                     _LATC	set	3979
  1638  0000                     _LATB	set	3978
  1639  0000                     _TRISE	set	3990
  1640  0000                     _TRISD	set	3989
  1641  0000                     _TRISC	set	3988
  1642  0000                     _TRISB	set	3987
  1643  0000                     _PORTB	set	3969
  1644  0000                     _LATAbits	set	3977
  1645  0000                     _TRISA	set	3986
  1646  0000                     _PORTC	set	3970
  1647  0000                     _PIE1bits	set	3997
  1648  0000                     _PORTCbits	set	3970
  1649  0000                     _INTCONbits	set	4082
  1650  0000                     _LATCbits	set	3979
  1651  0000                     _RXB0D0	set	3942
  1652  007FFE  00                 	db	0	; dummy byte at the end
  1653  0000                     
  1654                           ; #config settings
  1655                           
  1656                           	psect	cinit
  1657  004270                     __pcinit:
  1658                           	callstack 0
  1659  004270                     start_initialization:
  1660                           	callstack 0
  1661  004270                     __initialization:
  1662                           	callstack 0
  1663                           
  1664                           ; Clear objects allocated to BIGRAM (600 bytes)
  1665  004270  EE01  F08B         	lfsr	0,__pbssBIGRAM
  1666  004274  EE12 F058          	lfsr	1,600
  1667  004278                     clear_0:
  1668  004278  6AEE               	clrf	postinc0,c
  1669  00427A  50E5               	movf	postdec1,w,c
  1670  00427C  50E1               	movf	fsr1l,w,c
  1671  00427E  E1FC               	bnz	clear_0
  1672  004280  50E2               	movf	fsr1h,w,c
  1673  004282  E1FA               	bnz	clear_0
  1674                           
  1675                           ; Clear objects allocated to BANK1 (120 bytes)
  1676  004284  EE01  F000         	lfsr	0,__pbssBANK1
  1677  004288  0E78               	movlw	120
  1678  00428A                     clear_1:
  1679  00428A  6AEE               	clrf	postinc0,c
  1680  00428C  06E8               	decf	wreg,f,c
  1681  00428E  E1FD               	bnz	clear_1
  1682                           
  1683                           ; Clear objects allocated to BANK0 (92 bytes)
  1684  004290  EE00  F060         	lfsr	0,__pbssBANK0
  1685  004294  0E5C               	movlw	92
  1686  004296                     clear_2:
  1687  004296  6AEE               	clrf	postinc0,c
  1688  004298  06E8               	decf	wreg,f,c
  1689  00429A  E1FD               	bnz	clear_2
  1690                           
  1691                           ; Clear objects allocated to COMRAM (43 bytes)
  1692  00429C  EE00  F001         	lfsr	0,__pbssCOMRAM
  1693  0042A0  0E2B               	movlw	43
  1694  0042A2                     clear_3:
  1695  0042A2  6AEE               	clrf	postinc0,c
  1696  0042A4  06E8               	decf	wreg,f,c
  1697  0042A6  E1FD               	bnz	clear_3
  1698  0042A8                     end_of_initialization:
  1699                           	callstack 0
  1700  0042A8                     __end_of__initialization:
  1701                           	callstack 0
  1702  0042A8  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1703  0042AA  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1704  0042AC  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1705  0042AE  6EF8               	movwf	tblptru,c
  1706  0042B0  0100               	movlb	0
  1707  0042B2  EF61  F00F         	goto	_main	;jump to C main() function
  1708                           
  1709                           	psect	bssCOMRAM
  1710  000001                     __pbssCOMRAM:
  1711                           	callstack 0
  1712  000001                     _input:
  1713                           	callstack 0
  1714  000001                     	ds	3
  1715  000004                     InterruptHandlerLow@timer_cnt:
  1716                           	callstack 0
  1717  000004                     	ds	1
  1718  000005                     InterruptHandlerLow@a:
  1719                           	callstack 0
  1720  000005                     	ds	1
  1721  000006                     InterruptHandlerLow@count:
  1722                           	callstack 0
  1723  000006                     	ds	1
  1724  000007                     InterruptHandlerLow@timer_100ms:
  1725                           	callstack 0
  1726  000007                     	ds	1
  1727  000008                     	ds	1
  1728  000009                     _tr:
  1729                           	callstack 0
  1730  000009                     	ds	1
  1731  00000A                     _ti:
  1732                           	callstack 0
  1733  00000A                     	ds	1
  1734  00000B                     _to:
  1735                           	callstack 0
  1736  00000B                     	ds	1
  1737  00000C                     _ri:
  1738                           	callstack 0
  1739  00000C                     	ds	1
  1740  00000D                     _tc:
  1741                           	callstack 0
  1742  00000D                     	ds	1
  1743  00000E                     _bTime:
  1744                           	callstack 0
  1745  00000E                     	ds	1
  1746  00000F                     _display_STN_mode:
  1747                           	callstack 0
  1748  00000F                     	ds	1
  1749  000010                     _light_para_ok:
  1750                           	callstack 0
  1751  000010                     	ds	1
  1752  000011                     _backlight_func:
  1753                           	callstack 0
  1754  000011                     	ds	1
  1755  000012                     _u8PWM_Count:
  1756                           	callstack 0
  1757  000012                     	ds	1
  1758  000013                     _u8Start_Dark:
  1759                           	callstack 0
  1760  000013                     	ds	1
  1761  000014                     _timer1_countL:
  1762                           	callstack 0
  1763  000014                     	ds	1
  1764  000015                     _timer1_countH:
  1765                           	callstack 0
  1766  000015                     	ds	1
  1767  000016                     _can_passive_time:
  1768                           	callstack 0
  1769  000016                     	ds	1
  1770  000017                     _hsetime:
  1771                           	callstack 0
  1772  000017                     	ds	1
  1773  000018                     _input_detect:
  1774                           	callstack 0
  1775  000018                     	ds	1
  1776  000019                     _scrolltimer:
  1777                           	callstack 0
  1778  000019                     	ds	1
  1779  00001A                     _scrollpos:
  1780                           	callstack 0
  1781  00001A                     	ds	1
  1782  00001B                     _outpush:
  1783                           	callstack 0
  1784  00001B                     	ds	1
  1785  00001C                     _inpush:
  1786                           	callstack 0
  1787  00001C                     	ds	1
  1788  00001D                     _keytimer:
  1789                           	callstack 0
  1790  00001D                     	ds	1
  1791  00001E                     _arrowflash_old:
  1792                           	callstack 0
  1793  00001E                     	ds	1
  1794  00001F                     _mSwitch_code:
  1795                           	callstack 0
  1796  00001F                     	ds	1
  1797  000020                     _mKeyValue:
  1798                           	callstack 0
  1799  000020                     	ds	1
  1800  000021                     _mLongKeyTime:
  1801                           	callstack 0
  1802  000021                     	ds	1
  1803  000022                     _bKey_Fg:
  1804                           	callstack 0
  1805  000022                     	ds	1
  1806  000023                     _mKeyValue_Back:
  1807                           	callstack 0
  1808  000023                     	ds	1
  1809  000024                     _flashcontent:
  1810                           	callstack 0
  1811  000024                     	ds	1
  1812  000025                     _scroll:
  1813                           	callstack 0
  1814  000025                     	ds	1
  1815  000026                     _backlight_mode:
  1816                           	callstack 0
  1817  000026                     	ds	1
  1818  000027                     _direction_ind_mode:
  1819                           	callstack 0
  1820  000027                     	ds	1
  1821  000028                     _row:
  1822                           	callstack 0
  1823  000028                     	ds	1
  1824  000029                     _out_polarity:
  1825                           	callstack 0
  1826  000029                     	ds	1
  1827  00002A                     _disp_lift:
  1828                           	callstack 0
  1829  00002A                     	ds	1
  1830  00002B                     _out:
  1831                           	callstack 0
  1832  00002B                     	ds	1
  1833                           
  1834                           	psect	bssBANK0
  1835  000060                     __pbssBANK0:
  1836                           	callstack 0
  1837  000060                     _recei_monitor:
  1838                           	callstack 0
  1839  000060                     	ds	8
  1840  000068                     _display:
  1841                           	callstack 0
  1842  000068                     	ds	4
  1843  00006C                     _id_buff:
  1844                           	callstack 0
  1845  00006C                     	ds	4
  1846  000070                     	ds	3
  1847  000073                     SetNodeId@buffer:
  1848                           	callstack 0
  1849  000073                     	ds	3
  1850  000076                     _backlight_time_count:
  1851                           	callstack 0
  1852  000076                     	ds	2
  1853  000078                     _backlight_off_time:
  1854                           	callstack 0
  1855  000078                     	ds	2
  1856  00007A                     _errorcode:
  1857                           	callstack 0
  1858  00007A                     	ds	2
  1859  00007C                     _sdo_index:
  1860                           	callstack 0
  1861  00007C                     	ds	2
  1862  00007E                     _nmtwait:
  1863                           	callstack 0
  1864  00007E                     	ds	2
  1865  000080                     _fire_state:
  1866                           	callstack 0
  1867  000080                     	ds	1
  1868  000081                     _fire_evacuation:
  1869                           	callstack 0
  1870  000081                     	ds	1
  1871  000082                     _fire_alarm:
  1872                           	callstack 0
  1873  000082                     	ds	1
  1874  000083                     _ro:
  1875                           	callstack 0
  1876  000083                     	ds	1
  1877  000084                     _com_can_work:
  1878                           	callstack 0
  1879  000084                     	ds	1
  1880  000085                     _display_scantimer:
  1881                           	callstack 0
  1882  000085                     	ds	1
  1883  000086                     _can_inittime:
  1884                           	callstack 0
  1885  000086                     	ds	1
  1886  000087                     _hse_heartbeat:
  1887                           	callstack 0
  1888  000087                     	ds	1
  1889  000088                     _hsecheck:
  1890                           	callstack 0
  1891  000088                     	ds	1
  1892  000089                     _baudrate:
  1893                           	callstack 0
  1894  000089                     	ds	1
  1895  00008A                     _landingcallfloor:
  1896                           	callstack 0
  1897  00008A                     	ds	1
  1898  00008B                     _landingcalltimer:
  1899                           	callstack 0
  1900  00008B                     	ds	1
  1901  00008C                     _heartbeat:
  1902                           	callstack 0
  1903  00008C                     	ds	1
  1904  00008D                     _inold:
  1905                           	callstack 0
  1906  00008D                     	ds	1
  1907  00008E                     _sdo_timer:
  1908                           	callstack 0
  1909  00008E                     	ds	1
  1910  00008F                     _sdo_subindex:
  1911                           	callstack 0
  1912  00008F                     	ds	1
  1913  000090                     _nmtstate:
  1914                           	callstack 0
  1915  000090                     	ds	1
  1916  000091                     _merker:
  1917                           	callstack 0
  1918  000091                     	ds	1
  1919  000092                     _rc:
  1920                           	callstack 0
  1921  000092                     	ds	1
  1922  000093                     TestMode@oldin:
  1923                           	callstack 0
  1924  000093                     	ds	1
  1925  000094                     _preset_node_id:
  1926                           	callstack 0
  1927  000094                     	ds	1
  1928  000095                     _arrowflash:
  1929                           	callstack 0
  1930  000095                     	ds	1
  1931  000096                     _testno:
  1932                           	callstack 0
  1933  000096                     	ds	1
  1934  000097                     _display_timer:
  1935                           	callstack 0
  1936  000097                     	ds	1
  1937  000098                     _timer_1S5:
  1938                           	callstack 0
  1939  000098                     	ds	1
  1940  000099                     _flashtimer:
  1941                           	callstack 0
  1942  000099                     	ds	1
  1943  00009A                     _hardware_version:
  1944                           	callstack 0
  1945  00009A                     	ds	1
  1946  00009B                     _setid_mode:
  1947                           	callstack 0
  1948  00009B                     	ds	1
  1949  00009C                     _setid_mode_old:
  1950                           	callstack 0
  1951  00009C                     	ds	1
  1952  00009D                     _node_id:
  1953                           	callstack 0
  1954  00009D                     	ds	1
  1955  00009E                     _disp_id:
  1956                           	callstack 0
  1957  00009E                     	ds	1
  1958  00009F                     _virt_out:
  1959                           	callstack 0
  1960  00009F                     	ds	7
  1961  0000A6                     _virt_in:
  1962                           	callstack 0
  1963  0000A6                     	ds	7
  1964  0000AD                     _virtual_device:
  1965                           	callstack 0
  1966  0000AD                     	ds	6
  1967  0000B3                     _device_type:
  1968                           	callstack 0
  1969  0000B3                     	ds	4
  1970  0000B7                     read_rx@pos:
  1971                           	callstack 0
  1972  0000B7                     	ds	1
  1973  0000B8                     _arrowtype:
  1974                           	callstack 0
  1975  0000B8                     	ds	1
  1976  0000B9                     _in_polarity:
  1977                           	callstack 0
  1978  0000B9                     	ds	1
  1979  0000BA                     _errorregister:
  1980                           	callstack 0
  1981  0000BA                     	ds	1
  1982  0000BB                     _in:
  1983                           	callstack 0
  1984  0000BB                     	ds	1
  1985                           
  1986                           	psect	bssBANK1
  1987  000100                     __pbssBANK1:
  1988                           	callstack 0
  1989  000100                     _outpar:
  1990                           	callstack 0
  1991  000100                     	ds	64
  1992  000140                     _inpar:
  1993                           	callstack 0
  1994  000140                     	ds	56
  1995                           
  1996                           	psect	bssBIGRAM
  1997  00018B                     __pbssBIGRAM:
  1998                           	callstack 0
  1999  00018B                     _tx:
  2000                           	callstack 0
  2001  00018B                     	ds	300
  2002  0002B7                     _rx:
  2003                           	callstack 0
  2004  0002B7                     	ds	300
  2005                           
  2006                           	psect	cstackBANK1
  2007  000178                     __pcstackBANK1:
  2008                           	callstack 0
  2009  000178                     read_rx@buffer:
  2010                           	callstack 0
  2011                           
  2012                           ; 8 bytes @ 0x0
  2013  000178                     	ds	8
  2014  000180                     read_rx@size:
  2015                           	callstack 0
  2016                           
  2017                           ; 1 bytes @ 0x8
  2018  000180                     	ds	1
  2019  000181                     read_rx@sub:
  2020                           	callstack 0
  2021                           
  2022                           ; 1 bytes @ 0x9
  2023  000181                     	ds	1
  2024  000182                     read_rx@value:
  2025                           	callstack 0
  2026                           
  2027                           ; 4 bytes @ 0xA
  2028  000182                     	ds	4
  2029  000186                     read_rx@type:
  2030                           	callstack 0
  2031                           
  2032                           ; 1 bytes @ 0xE
  2033  000186                     	ds	1
  2034  000187                     read_rx@index:
  2035                           	callstack 0
  2036                           
  2037                           ; 2 bytes @ 0xF
  2038  000187                     	ds	2
  2039  000189                     read_rx@subindex:
  2040                           	callstack 0
  2041                           
  2042                           ; 1 bytes @ 0x11
  2043  000189                     	ds	1
  2044  00018A                     read_rx@i:
  2045                           	callstack 0
  2046                           
  2047                           ; 1 bytes @ 0x12
  2048  00018A                     	ds	1
  2049                           
  2050                           	psect	cstackBANK0
  2051  0000BC                     __pcstackBANK0:
  2052                           	callstack 0
  2053  0000BC                     InterruptHandlerLow@arrow_mes:
  2054                           	callstack 0
  2055                           
  2056                           ; 1 bytes @ 0x0
  2057  0000BC                     	ds	1
  2058  0000BD                     InterruptHandlerLow@buf:
  2059                           	callstack 0
  2060                           
  2061                           ; 2 bytes @ 0x1
  2062  0000BD                     	ds	2
  2063  0000BF                     InterruptHandlerLow@j:
  2064                           	callstack 0
  2065                           
  2066                           ; 1 bytes @ 0x3
  2067  0000BF                     	ds	1
  2068  0000C0                     InterruptHandlerLow@pos:
  2069                           	callstack 0
  2070                           
  2071                           ; 1 bytes @ 0x4
  2072  0000C0                     	ds	1
  2073  0000C1                     InterruptHandlerLow@unit:
  2074                           	callstack 0
  2075                           
  2076                           ; 2 bytes @ 0x5
  2077  0000C1                     	ds	2
  2078  0000C3                     InterruptHandlerLow@ten:
  2079                           	callstack 0
  2080                           
  2081                           ; 2 bytes @ 0x7
  2082  0000C3                     	ds	2
  2083  0000C5                     InterruptHandlerLow@i:
  2084                           	callstack 0
  2085                           
  2086                           ; 1 bytes @ 0x9
  2087  0000C5                     	ds	1
  2088  0000C6                     ??_init_can:
  2089  0000C6                     ??_set_io_config:
  2090  0000C6                     ??_KeyScan:
  2091  0000C6                     ??_can_transmit:
  2092  0000C6                     ?___wmul:
  2093                           	callstack 0
  2094  0000C6                     ?___awdiv:
  2095                           	callstack 0
  2096  0000C6                     ?_search_dict:
  2097                           	callstack 0
  2098  0000C6                     ?_read_dict:
  2099                           	callstack 0
  2100  0000C6                     init_userpara@i:
  2101                           	callstack 0
  2102  0000C6                     check_for_call@value:
  2103                           	callstack 0
  2104  0000C6                     read_dict@subindex:
  2105                           	callstack 0
  2106  0000C6                     write_dict@subindex:
  2107                           	callstack 0
  2108  0000C6                     ___lbmod@divisor:
  2109                           	callstack 0
  2110  0000C6                     DelayMs@tick:
  2111                           	callstack 0
  2112  0000C6                     check_version@buf0:
  2113                           	callstack 0
  2114  0000C6                     search_dict@index:
  2115                           	callstack 0
  2116  0000C6                     read_eeprom@address:
  2117                           	callstack 0
  2118  0000C6                     ___wmul@multiplier:
  2119                           	callstack 0
  2120  0000C6                     ___awdiv@dividend:
  2121                           	callstack 0
  2122                           
  2123                           ; 2 bytes @ 0xA
  2124  0000C6                     	ds	1
  2125  0000C7                     ??_check_hse:
  2126  0000C7                     set_output@virt:
  2127                           	callstack 0
  2128  0000C7                     ___lbmod@dividend:
  2129                           	callstack 0
  2130  0000C7                     write_dict@value:
  2131                           	callstack 0
  2132                           
  2133                           ; 4 bytes @ 0xB
  2134  0000C7                     	ds	1
  2135  0000C8                     ??_set_output:
  2136  0000C8                     init_can@baudrate:
  2137                           	callstack 0
  2138  0000C8                     set_io_config@i:
  2139                           	callstack 0
  2140  0000C8                     search_dict@subindex:
  2141                           	callstack 0
  2142  0000C8                     ___lbmod@counter:
  2143                           	callstack 0
  2144  0000C8                     check_version@buf1:
  2145                           	callstack 0
  2146  0000C8                     can_transmit@ptr:
  2147                           	callstack 0
  2148  0000C8                     write_eeprom@address:
  2149                           	callstack 0
  2150  0000C8                     ___wmul@multiplicand:
  2151                           	callstack 0
  2152  0000C8                     ___awdiv@divisor:
  2153                           	callstack 0
  2154  0000C8                     DelayMs@i:
  2155                           	callstack 0
  2156                           
  2157                           ; 4 bytes @ 0xC
  2158  0000C8                     	ds	1
  2159  0000C9                     check_hse@mode:
  2160                           	callstack 0
  2161  0000C9                     init_can@i:
  2162                           	callstack 0
  2163  0000C9                     search_dict@type:
  2164                           	callstack 0
  2165  0000C9                     ___lbmod@rem:
  2166                           	callstack 0
  2167                           
  2168                           ; 1 bytes @ 0xD
  2169  0000C9                     	ds	1
  2170  0000CA                     ??_read_dict:
  2171  0000CA                     KeyScan@j:
  2172                           	callstack 0
  2173  0000CA                     check_hse@help:
  2174                           	callstack 0
  2175  0000CA                     check_version@m:
  2176                           	callstack 0
  2177  0000CA                     init_can@j:
  2178                           	callstack 0
  2179  0000CA                     can_transmit@lenght:
  2180                           	callstack 0
  2181  0000CA                     search_dict@pos:
  2182                           	callstack 0
  2183  0000CA                     write_eeprom@value:
  2184                           	callstack 0
  2185  0000CA                     ___awdiv@counter:
  2186                           	callstack 0
  2187  0000CA                     ___wmul@product:
  2188                           	callstack 0
  2189                           
  2190                           ; 2 bytes @ 0xE
  2191  0000CA                     	ds	1
  2192  0000CB                     ??_write_dict:
  2193  0000CB                     KeyScan@value:
  2194                           	callstack 0
  2195  0000CB                     check_hse@i:
  2196                           	callstack 0
  2197  0000CB                     check_version@k:
  2198                           	callstack 0
  2199  0000CB                     can_transmit@i:
  2200                           	callstack 0
  2201  0000CB                     search_dict@index_exists:
  2202                           	callstack 0
  2203  0000CB                     ___awdiv@sign:
  2204                           	callstack 0
  2205  0000CB                     set_output@index:
  2206                           	callstack 0
  2207                           
  2208                           ; 2 bytes @ 0xF
  2209  0000CB                     	ds	1
  2210  0000CC                     ??_transmit_error:
  2211  0000CC                     ?___lwdiv:
  2212                           	callstack 0
  2213  0000CC                     KeyScan@key_code:
  2214                           	callstack 0
  2215  0000CC                     check_version@version:
  2216                           	callstack 0
  2217  0000CC                     transmit_in@input:
  2218                           	callstack 0
  2219  0000CC                     sdo_segment@size:
  2220                           	callstack 0
  2221  0000CC                     lss_response@value:
  2222                           	callstack 0
  2223  0000CC                     search_dict@subindex_exists:
  2224                           	callstack 0
  2225  0000CC                     sdo_response@index:
  2226                           	callstack 0
  2227  0000CC                     ___awdiv@quotient:
  2228                           	callstack 0
  2229  0000CC                     ___lwdiv@dividend:
  2230                           	callstack 0
  2231  0000CC                     abort_sdo@errorcode:
  2232                           	callstack 0
  2233                           
  2234                           ; 4 bytes @ 0x10
  2235  0000CC                     	ds	1
  2236  0000CD                     ??_lss_response:
  2237  0000CD                     ??_transmit_in:
  2238  0000CD                     KeyScan@i:
  2239                           	callstack 0
  2240  0000CD                     check_version@i:
  2241                           	callstack 0
  2242  0000CD                     search_dict@size:
  2243                           	callstack 0
  2244  0000CD                     sdo_segment@value:
  2245                           	callstack 0
  2246  0000CD                     set_output@buf:
  2247                           	callstack 0
  2248                           
  2249                           ; 3 bytes @ 0x11
  2250  0000CD                     	ds	1
  2251  0000CE                     ?___awmod:
  2252                           	callstack 0
  2253  0000CE                     sdo_response@subindex:
  2254                           	callstack 0
  2255  0000CE                     transmit_error@i:
  2256                           	callstack 0
  2257  0000CE                     search_dict@i:
  2258                           	callstack 0
  2259  0000CE                     ___awmod@dividend:
  2260                           	callstack 0
  2261  0000CE                     ___lwdiv@divisor:
  2262                           	callstack 0
  2263                           
  2264                           ; 2 bytes @ 0x12
  2265  0000CE                     	ds	1
  2266  0000CF                     ??_sdo_segment:
  2267  0000CF                     transmit_in@i:
  2268                           	callstack 0
  2269  0000CF                     lss_response@command:
  2270                           	callstack 0
  2271  0000CF                     sdo_response@value:
  2272                           	callstack 0
  2273                           
  2274                           ; 4 bytes @ 0x13
  2275  0000CF                     	ds	1
  2276  0000D0                     lss_response@i:
  2277                           	callstack 0
  2278  0000D0                     set_output@sub:
  2279                           	callstack 0
  2280  0000D0                     ___lwdiv@counter:
  2281                           	callstack 0
  2282  0000D0                     ___awmod@divisor:
  2283                           	callstack 0
  2284                           
  2285                           ; 2 bytes @ 0x14
  2286  0000D0                     	ds	1
  2287  0000D1                     KeyProg@value:
  2288                           	callstack 0
  2289  0000D1                     sdo_segment@command:
  2290                           	callstack 0
  2291  0000D1                     set_output@iotype:
  2292                           	callstack 0
  2293  0000D1                     write_dict@address:
  2294                           	callstack 0
  2295  0000D1                     ___lwdiv@quotient:
  2296                           	callstack 0
  2297                           
  2298                           ; 2 bytes @ 0x15
  2299  0000D1                     	ds	1
  2300  0000D2                     sdo_segment@i:
  2301                           	callstack 0
  2302  0000D2                     set_output@i:
  2303                           	callstack 0
  2304  0000D2                     write_dict@j:
  2305                           	callstack 0
  2306  0000D2                     ___awmod@counter:
  2307                           	callstack 0
  2308  0000D2                     read_dict@value:
  2309                           	callstack 0
  2310                           
  2311                           ; 4 bytes @ 0x16
  2312  0000D2                     	ds	1
  2313  0000D3                     sdo_response@command:
  2314                           	callstack 0
  2315  0000D3                     write_dict@size:
  2316                           	callstack 0
  2317  0000D3                     ___awmod@sign:
  2318                           	callstack 0
  2319                           
  2320                           ; 1 bytes @ 0x17
  2321  0000D3                     	ds	1
  2322  0000D4                     ??_Display_test:
  2323  0000D4                     ??_SetNodeId:
  2324  0000D4                     write_dict@i:
  2325                           	callstack 0
  2326                           
  2327                           ; 1 bytes @ 0x18
  2328  0000D4                     	ds	1
  2329  0000D5                     write_dict@pos:
  2330                           	callstack 0
  2331                           
  2332                           ; 1 bytes @ 0x19
  2333  0000D5                     	ds	1
  2334  0000D6                     read_dict@address:
  2335                           	callstack 0
  2336                           
  2337                           ; 1 bytes @ 0x1A
  2338  0000D6                     	ds	1
  2339  0000D7                     read_dict@size:
  2340                           	callstack 0
  2341                           
  2342                           ; 1 bytes @ 0x1B
  2343  0000D7                     	ds	1
  2344  0000D8                     read_dict@i:
  2345                           	callstack 0
  2346                           
  2347                           ; 1 bytes @ 0x1C
  2348  0000D8                     	ds	1
  2349  0000D9                     read_dict@pos:
  2350                           	callstack 0
  2351                           
  2352                           ; 1 bytes @ 0x1D
  2353  0000D9                     	ds	1
  2354  0000DA                     ??_read_rx:
  2355  0000DA                     Display_test@buf:
  2356                           	callstack 0
  2357                           
  2358                           ; 4 bytes @ 0x1E
  2359  0000DA                     	ds	4
  2360  0000DE                     Display_test@number:
  2361                           	callstack 0
  2362                           
  2363                           ; 1 bytes @ 0x22
  2364  0000DE                     	ds	1
  2365  0000DF                     ??_TestMode:
  2366                           
  2367                           ; 1 bytes @ 0x23
  2368  0000DF                     	ds	2
  2369  0000E1                     TestMode@i:
  2370                           	callstack 0
  2371                           
  2372                           ; 1 bytes @ 0x25
  2373  0000E1                     	ds	3
  2374  0000E4                     ??_main:
  2375                           
  2376                           ; 1 bytes @ 0x28
  2377  0000E4                     	ds	2
  2378  0000E6                     main@help:
  2379                           	callstack 0
  2380                           
  2381                           ; 1 bytes @ 0x2A
  2382  0000E6                     	ds	1
  2383  0000E7                     main@instate:
  2384                           	callstack 0
  2385                           
  2386                           ; 1 bytes @ 0x2B
  2387  0000E7                     	ds	1
  2388  0000E8                     main@j:
  2389                           	callstack 0
  2390                           
  2391                           ; 1 bytes @ 0x2C
  2392  0000E8                     	ds	1
  2393  0000E9                     main@i:
  2394                           	callstack 0
  2395                           
  2396                           ; 1 bytes @ 0x2D
  2397  0000E9                     	ds	1
  2398                           
  2399                           	psect	cstackCOMRAM
  2400  00002C                     __pcstackCOMRAM:
  2401                           	callstack 0
  2402  00002C                     ??_InterruptHandlerHigh:
  2403  00002C                     
  2404                           ; 1 bytes @ 0x0
  2405  00002C                     	ds	9
  2406  000035                     InterruptHandlerHigh@hse_no:
  2407                           	callstack 0
  2408                           
  2409                           ; 1 bytes @ 0x9
  2410  000035                     	ds	1
  2411  000036                     InterruptHandlerHigh@tempCANSTAT:
  2412                           	callstack 0
  2413                           
  2414                           ; 1 bytes @ 0xA
  2415  000036                     	ds	1
  2416  000037                     InterruptHandlerHigh@ptr:
  2417                           	callstack 0
  2418                           
  2419                           ; 2 bytes @ 0xB
  2420  000037                     	ds	2
  2421  000039                     InterruptHandlerHigh@lenght:
  2422                           	callstack 0
  2423                           
  2424                           ; 1 bytes @ 0xD
  2425  000039                     	ds	1
  2426  00003A                     InterruptHandlerHigh@i:
  2427                           	callstack 0
  2428                           
  2429                           ; 1 bytes @ 0xE
  2430  00003A                     	ds	1
  2431  00003B                     ??_SPI_SendOneByte:
  2432  00003B                     i1___lbmod@divisor:
  2433                           	callstack 0
  2434                           
  2435                           ; 1 bytes @ 0xF
  2436  00003B                     	ds	1
  2437  00003C                     SPI_SendOneByte@dat:
  2438                           	callstack 0
  2439  00003C                     i1___lbmod@dividend:
  2440                           	callstack 0
  2441                           
  2442                           ; 1 bytes @ 0x10
  2443  00003C                     	ds	1
  2444  00003D                     SPI_SendOneByte@i:
  2445                           	callstack 0
  2446  00003D                     i1___lbmod@counter:
  2447                           	callstack 0
  2448                           
  2449                           ; 1 bytes @ 0x11
  2450  00003D                     	ds	1
  2451  00003E                     i1___lbmod@rem:
  2452                           	callstack 0
  2453                           
  2454                           ; 1 bytes @ 0x12
  2455  00003E                     	ds	1
  2456  00003F                     ??_InterruptHandlerLow:
  2457                           
  2458                           ; 1 bytes @ 0x13
  2459  00003F                     	ds	14
  2460                           
  2461 ;;
  2462 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2463 ;;
  2464 ;; *************** function _main *****************
  2465 ;; Defined at:
  2466 ;;		line 290 in file "../../src/Main.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  i               1   45[BANK0 ] unsigned char 
  2471 ;;  j               1   44[BANK0 ] unsigned char 
  2472 ;;  instate         1   43[BANK0 ] unsigned char 
  2473 ;;  help            1   42[BANK0 ] unsigned char 
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  1    wreg      void 
  2476 ;; Registers used:
  2477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 3F/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2484 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2486 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2487 ;;Total ram usage:        6 bytes
  2488 ;; Hardware stack levels required when called:    6
  2489 ;; This function calls:
  2490 ;;		_DelayMs
  2491 ;;		_InitPorts
  2492 ;;		_KeyProg
  2493 ;;		_KeyScan
  2494 ;;		_SetNodeId
  2495 ;;		_TestMode
  2496 ;;		___lwdiv
  2497 ;;		___wmul
  2498 ;;		_abort_sdo
  2499 ;;		_check_hse
  2500 ;;		_check_version
  2501 ;;		_init_can
  2502 ;;		_init_timer0
  2503 ;;		_init_timer1
  2504 ;;		_init_timer2
  2505 ;;		_init_userpara
  2506 ;;		_read_eeprom
  2507 ;;		_read_rx
  2508 ;;		_sent_heartbeat
  2509 ;;		_set_io_config
  2510 ;;		_transmit_error
  2511 ;;		_transmit_in
  2512 ;; This function is called by:
  2513 ;;		Startup code after reset
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text0
  2518  001EC2                     __ptext0:
  2519                           	callstack 0
  2520  001EC2                     _main:
  2521                           	callstack 25
  2522                           
  2523                           ;Main.c: 291: BYTE i, j;;Main.c: 292: BYTE instate;;Main.c: 293: BYTE help;;Main.c: 295:
      +                           if (merker == 0x5A)
  2524                           
  2525                           ;incstack = 0
  2526  001EC2  0E5A               	movlw	90
  2527  001EC4  0100               	movlb	0	; () banked
  2528  001EC6  1991               	xorwf	_merker& (0+255),w,b
  2529  001EC8  B4D8               	btfsc	status,2,c
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;Main.c: 296: {;Main.c: 297: errorregister |= 0x10;
  2533  001ECA  89BA               	bsf	_errorregister& (0+255),4,b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;Main.c: 298: };Main.c: 299: if (merker == 0x55)
  2537  001ECC  0E55               	movlw	85
  2538  001ECE  1991               	xorwf	_merker& (0+255),w,b
  2539  001ED0  A4D8               	btfss	status,2,c
  2540  001ED2  D002               	goto	l537
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;Main.c: 300: {;Main.c: 301: errorregister |= 0x10;
  2544  001ED4  89BA               	bsf	_errorregister& (0+255),4,b
  2545                           
  2546                           ;Main.c: 302: }
  2547  001ED6  D008               	goto	l10661
  2548  001ED8                     l537:
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;Main.c: 303: else if (RCONbits.POR)
  2552  001ED8  B2D0               	btfsc	208,1,c	;volatile
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;Main.c: 304: {;Main.c: 305: if (!RCONbits.TO)
  2556  001EDA  B6D0               	btfsc	208,3,c	;volatile
  2557  001EDC  D005               	goto	l10661
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;Main.c: 306: {;Main.c: 307: errorregister |= 0x01;
  2561  001EDE  81BA               	bsf	_errorregister& (0+255),0,b
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;Main.c: 308: errorcode = 0x6100;
  2565  001EE0  0E61               	movlw	97
  2566  001EE2  6F7B               	movwf	(_errorcode+1)& (0+255),b
  2567  001EE4  0E00               	movlw	0
  2568  001EE6  6F7A               	movwf	_errorcode& (0+255),b
  2569  001EE8                     l10661:
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;Main.c: 309: };Main.c: 310: };Main.c: 311: RCONbits.POR = 1;
  2573  001EE8  82D0               	bsf	208,1,c	;volatile
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;Main.c: 312: RCONbits.BOR = 1;
  2577  001EEA  80D0               	bsf	208,0,c	;volatile
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;Main.c: 313: merker = 0xAA;
  2581  001EEC  0EAA               	movlw	170
  2582  001EEE  6F91               	movwf	_merker& (0+255),b
  2583  001EF0  0004               	clrwdt		;# 
  2584                           
  2585                           ;Main.c: 317: ADCON0 = 0x00;
  2586  001EF2  0E00               	movlw	0
  2587  001EF4  6EC2               	movwf	194,c	;volatile
  2588                           
  2589                           ;Main.c: 318: ADCON1 = 0x00;
  2590  001EF6  0E00               	movlw	0
  2591  001EF8  6EC1               	movwf	193,c	;volatile
  2592                           
  2593                           ;Main.c: 319: ODCON = 0x00;
  2594  001EFA  0E00               	movlw	0
  2595  001EFC  6E91               	movwf	145,c	;volatile
  2596                           
  2597                           ;Main.c: 320: CTMUCONH = 0x00;
  2598  001EFE  0E00               	movlw	0
  2599  001F00  010F               	movlb	15	; () banked
  2600  001F02  6F55               	movwf	85,b	;volatile
  2601                           
  2602                           ; BSR set to: 15
  2603                           ;Main.c: 321: CTMUCONL = 0x00;
  2604  001F04  0E00               	movlw	0
  2605  001F06  6F54               	movwf	84,b	;volatile
  2606                           
  2607                           ; BSR set to: 15
  2608                           ;Main.c: 322: PADCFG1 = 0x80;
  2609  001F08  0E80               	movlw	128
  2610  001F0A  6F56               	movwf	86,b	;volatile
  2611                           
  2612                           ; BSR set to: 15
  2613                           ;Main.c: 323: ANCON0 = 0x00;
  2614  001F0C  0E00               	movlw	0
  2615  001F0E  6F5D               	movwf	93,b	;volatile
  2616                           
  2617                           ; BSR set to: 15
  2618                           ;Main.c: 324: ANCON1 = 0x00;
  2619  001F10  0E00               	movlw	0
  2620  001F12  6F5C               	movwf	92,b	;volatile
  2621                           
  2622                           ; BSR set to: 15
  2623                           ;Main.c: 327: TRISA = 0xFF;
  2624  001F14  6892               	setf	146,c	;volatile
  2625                           
  2626                           ; BSR set to: 15
  2627                           ;Main.c: 328: for(i = 0; i < 10; i++)
  2628  001F16  0E00               	movlw	0
  2629  001F18  0100               	movlb	0	; () banked
  2630  001F1A  6FE9               	movwf	main@i& (0+255),b
  2631  001F1C                     l10691:
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;Main.c: 329: {;Main.c: 330: rx[0][i] = PORTA & 0X01;
  2635  001F1C  0EB7               	movlw	low _rx
  2636  001F1E  25E9               	addwf	main@i& (0+255),w,b
  2637  001F20  6ED9               	movwf	fsr2l,c
  2638  001F22  6ADA               	clrf	fsr2h,c
  2639  001F24  0E02               	movlw	high _rx
  2640  001F26  22DA               	addwfc	fsr2h,f,c
  2641  001F28  5080               	movf	128,w,c	;volatile
  2642  001F2A  0B01               	andlw	1
  2643  001F2C  6EDF               	movwf	indf2,c
  2644                           
  2645                           ;Main.c: 331: rx[1][i] = PORTA & 0X02;
  2646  001F2E  0EC1               	movlw	low (_rx+10)
  2647  001F30  25E9               	addwf	main@i& (0+255),w,b
  2648  001F32  6ED9               	movwf	fsr2l,c
  2649  001F34  6ADA               	clrf	fsr2h,c
  2650  001F36  0E02               	movlw	high (_rx+10)
  2651  001F38  22DA               	addwfc	fsr2h,f,c
  2652  001F3A  5080               	movf	128,w,c	;volatile
  2653  001F3C  0B02               	andlw	2
  2654  001F3E  6EDF               	movwf	indf2,c
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;Main.c: 332: DelayMs(10);
  2658  001F40  0E00               	movlw	0
  2659  001F42  6FC7               	movwf	(DelayMs@tick+1)& (0+255),b
  2660  001F44  0E0A               	movlw	10
  2661  001F46  6FC6               	movwf	DelayMs@tick& (0+255),b
  2662  001F48  ECED  F020         	call	_DelayMs	;wreg free
  2663                           
  2664                           ; BSR set to: 0
  2665  001F4C  2BE9               	incf	main@i& (0+255),f,b
  2666                           
  2667                           ; BSR set to: 0
  2668  001F4E  0E09               	movlw	9
  2669  001F50  65E9               	cpfsgt	main@i& (0+255),b
  2670  001F52  D7E4               	goto	l10691
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;Main.c: 333: };Main.c: 334: i = check_version((BYTE*)(&rx[0][0]), (BYTE*)(&rx[1][0])) &
      +                           0x03;
  2674  001F54  0EB7               	movlw	low _rx
  2675  001F56  6FC6               	movwf	check_version@buf0& (0+255),b
  2676  001F58  0E02               	movlw	high _rx
  2677  001F5A  6FC7               	movwf	(check_version@buf0+1)& (0+255),b
  2678  001F5C  0EC1               	movlw	low (_rx+10)
  2679  001F5E  6FC8               	movwf	check_version@buf1& (0+255),b
  2680  001F60  0E02               	movlw	high (_rx+10)
  2681  001F62  6FC9               	movwf	(check_version@buf1+1)& (0+255),b
  2682  001F64  EC9A  F020         	call	_check_version	;wreg free
  2683  001F68  0B03               	andlw	3
  2684  001F6A  6FE9               	movwf	main@i& (0+255),b
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;Main.c: 335: if(!(i & 0X01))
  2688  001F6C  B1E9               	btfsc	main@i& (0+255),0,b
  2689  001F6E  D002               	goto	l543
  2690  001F70                     u13520:
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;Main.c: 336: hardware_version = 0;
  2694  001F70  0E00               	movlw	0
  2695  001F72  D003               	goto	L1
  2696  001F74                     l543:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;Main.c: 337: else if(!(i & 0X02))
  2700  001F74  B3E9               	btfsc	main@i& (0+255),1,b
  2701  001F76  D7FC               	goto	u13520
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;Main.c: 338: hardware_version = 1;
  2705  001F78  0E01               	movlw	1
  2706  001F7A                     L1:
  2707  001F7A  6F9A               	movwf	_hardware_version& (0+255),b
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;Main.c: 342: InitPorts();
  2711  001F7C  EC79  F021         	call	_InitPorts	;wreg free
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;Main.c: 344: node_id = read_eeprom(0x00);
  2715  001F80  0E00               	movlw	0
  2716  001F82  6FC7               	movwf	(read_eeprom@address+1)& (0+255),b
  2717  001F84  0E00               	movlw	0
  2718  001F86  6FC6               	movwf	read_eeprom@address& (0+255),b
  2719  001F88  EC22  F022         	call	_read_eeprom	;wreg free
  2720  001F8C  0100               	movlb	0	; () banked
  2721  001F8E  6F9D               	movwf	_node_id& (0+255),b
  2722                           
  2723                           ;Main.c: 345: disp_lift = 0x01;
  2724  001F90  0E01               	movlw	1
  2725  001F92  6E2A               	movwf	_disp_lift^0,c
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;Main.c: 346: if ((node_id > 110) || (!node_id))
  2729  001F94  0E6F               	movlw	111
  2730  001F96  619D               	cpfslt	_node_id& (0+255),b
  2731  001F98  D003               	goto	u13550
  2732                           
  2733                           ; BSR set to: 0
  2734  001F9A  519D               	movf	_node_id& (0+255),w,b
  2735  001F9C  A4D8               	btfss	status,2,c
  2736  001F9E  D002               	goto	l547
  2737  001FA0                     u13550:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;Main.c: 347: node_id = 0x10;
  2741  001FA0  0E10               	movlw	16
  2742  001FA2  6F9D               	movwf	_node_id& (0+255),b
  2743  001FA4                     l547:
  2744                           
  2745                           ; BSR set to: 0
  2746  001FA4  0004               	clrwdt		;# 
  2747                           
  2748                           ;Main.c: 350: nmtstate = 0x00;
  2749  001FA6  0E00               	movlw	0
  2750  001FA8  0100               	movlb	0	; () banked
  2751  001FAA  6F90               	movwf	_nmtstate& (0+255),b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;Main.c: 351: nmtwait = node_id;
  2755  001FAC  C09D  F07E         	movff	_node_id,_nmtwait	;volatile
  2756  001FB0  6B7F               	clrf	(_nmtwait+1)& (0+255),b	;volatile
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;Main.c: 352: preset_node_id = node_id;
  2760  001FB2  C09D  F094         	movff	_node_id,_preset_node_id
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;Main.c: 353: nmtwait = (nmtwait * 20 + 1000) / 3 + 600;
  2764  001FB6  C07E  F0C6         	movff	_nmtwait,___wmul@multiplier	;volatile
  2765  001FBA  C07F  F0C7         	movff	_nmtwait+1,___wmul@multiplier+1	;volatile
  2766  001FBE  0E00               	movlw	0
  2767  001FC0  6FC9               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2768  001FC2  0E14               	movlw	20
  2769  001FC4  6FC8               	movwf	___wmul@multiplicand& (0+255),b
  2770  001FC6  ECEC  F021         	call	___wmul	;wreg free
  2771  001FCA  0EE8               	movlw	232
  2772  001FCC  25C6               	addwf	?___wmul& (0+255),w,b
  2773  001FCE  6FCC               	movwf	___lwdiv@dividend& (0+255),b
  2774  001FD0  0E03               	movlw	3
  2775  001FD2  21C7               	addwfc	(?___wmul+1)& (0+255),w,b
  2776  001FD4  6FCD               	movwf	(___lwdiv@dividend+1)& (0+255),b
  2777  001FD6  0E00               	movlw	0
  2778  001FD8  6FCF               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2779  001FDA  0E03               	movlw	3
  2780  001FDC  6FCE               	movwf	___lwdiv@divisor& (0+255),b
  2781  001FDE  ECC4  F020         	call	___lwdiv	;wreg free
  2782  001FE2  0E58               	movlw	88
  2783  001FE4  25CC               	addwf	?___lwdiv& (0+255),w,b
  2784  001FE6  6F7E               	movwf	_nmtwait& (0+255),b	;volatile
  2785  001FE8  0E02               	movlw	2
  2786  001FEA  21CD               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2787  001FEC  6F7F               	movwf	(_nmtwait+1)& (0+255),b	;volatile
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;Main.c: 354: if (node_id == 0x10)
  2791  001FEE  0E10               	movlw	16
  2792  001FF0  199D               	xorwf	_node_id& (0+255),w,b
  2793  001FF2  A4D8               	btfss	status,2,c
  2794  001FF4  D004               	goto	l10729
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;Main.c: 355: nmtwait = 1000 / 3 + 600;
  2798  001FF6  0E03               	movlw	3
  2799  001FF8  6F7F               	movwf	(_nmtwait+1)& (0+255),b	;volatile
  2800  001FFA  0EA5               	movlw	165
  2801  001FFC  6F7E               	movwf	_nmtwait& (0+255),b	;volatile
  2802  001FFE                     l10729:
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;Main.c: 357: init_userpara();
  2806  001FFE  EC8D  F01B         	call	_init_userpara	;wreg free
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;Main.c: 359: INTCON = 0;
  2810  002002  0E00               	movlw	0
  2811  002004  6EF2               	movwf	242,c	;volatile
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;Main.c: 360: RCONbits.IPEN = 1;
  2815  002006  8ED0               	bsf	208,7,c	;volatile
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;Main.c: 361: init_timer2();
  2819  002008  EC19  F022         	call	_init_timer2	;wreg free
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;Main.c: 362: init_timer1();
  2823  00200C  ECC2  F021         	call	_init_timer1	;wreg free
  2824  002010  0004               	clrwdt		;# 
  2825                           
  2826                           ;Main.c: 365: init_timer0();
  2827  002012  EC0F  F022         	call	_init_timer0	;wreg free
  2828                           
  2829                           ;Main.c: 366: INTCONbits.GIEH = 1;
  2830  002016  8EF2               	bsf	242,7,c	;volatile
  2831                           
  2832                           ;Main.c: 367: INTCONbits.GIEL = 1;
  2833  002018  8CF2               	bsf	242,6,c	;volatile
  2834                           
  2835                           ;Main.c: 369: while (nmtwait)
  2836  00201A  D001               	goto	l10745
  2837  00201C                     l552:
  2838                           
  2839                           ; BSR set to: 0
  2840  00201C  0004               	clrwdt		;# 
  2841  00201E                     l10745:
  2842  00201E  0100               	movlb	0	; () banked
  2843  002020  517E               	movf	_nmtwait& (0+255),w,b	;volatile
  2844  002022  117F               	iorwf	(_nmtwait+1)& (0+255),w,b	;volatile
  2845  002024  A4D8               	btfss	status,2,c
  2846  002026  D7FA               	goto	l552
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;Main.c: 372: baudrate = 1;
  2850  002028  0E01               	movlw	1
  2851  00202A  6F89               	movwf	_baudrate& (0+255),b
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;Main.c: 373: init_can (baudrate);
  2855  00202C  0E01               	movlw	1
  2856  00202E  ECE2  F018         	call	_init_can
  2857                           
  2858                           ; BSR set to: 15
  2859                           ;Main.c: 374: DelayMs(100);
  2860  002032  0E00               	movlw	0
  2861  002034  0100               	movlb	0	; () banked
  2862  002036  6FC7               	movwf	(DelayMs@tick+1)& (0+255),b
  2863  002038  0E64               	movlw	100
  2864  00203A  6FC6               	movwf	DelayMs@tick& (0+255),b
  2865  00203C  ECED  F020         	call	_DelayMs	;wreg free
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;Main.c: 376: heartbeat = 4;
  2869  002040  0E04               	movlw	4
  2870  002042  6F8C               	movwf	_heartbeat& (0+255),b
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;Main.c: 377: sent_heartbeat();
  2874  002044  ECFF  F021         	call	_sent_heartbeat	;wreg free
  2875                           
  2876                           ; BSR set to: 15
  2877                           ;Main.c: 378: nmtstate = 0x7F;
  2878  002048  0E7F               	movlw	127
  2879  00204A  0100               	movlb	0	; () banked
  2880  00204C  6F90               	movwf	_nmtstate& (0+255),b
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;Main.c: 380: j = 0;
  2884                           
  2885                           ; BSR set to: 0
  2886  00204E  0E00               	movlw	0
  2887  002050  6FE8               	movwf	main@j& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;Main.c: 382: hsetime = 50;
  2891  002052  0E32               	movlw	50
  2892  002054  6E17               	movwf	_hsetime^0,c	;volatile
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;Main.c: 383: hsecheck = 0;
  2896  002056  0E00               	movlw	0
  2897  002058  6F88               	movwf	_hsecheck& (0+255),b	;volatile
  2898  00205A  0004               	clrwdt		;# 
  2899                           
  2900                           ;Main.c: 385: inold = 0;
  2901  00205C  0E00               	movlw	0
  2902  00205E  0100               	movlb	0	; () banked
  2903  002060  6F8D               	movwf	_inold& (0+255),b
  2904                           
  2905                           ;Main.c: 386: set_io_config();
  2906  002062  ECEF  F01E         	call	_set_io_config	;wreg free
  2907  002066                     l554:
  2908                           
  2909                           ; BSR set to: 0
  2910  002066  0004               	clrwdt		;# 
  2911                           
  2912                           ;Main.c: 391: if (rc)
  2913  002068  0100               	movlb	0	; () banked
  2914  00206A  5192               	movf	_rc& (0+255),w,b	;volatile
  2915  00206C  A4D8               	btfss	status,2,c
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;Main.c: 392: read_rx ();
  2919  00206E  EC30  F003         	call	_read_rx	;wreg free
  2920                           
  2921                           ;Main.c: 394: if(display_scantimer)
  2922  002072  0100               	movlb	0	; () banked
  2923  002074  5185               	movf	_display_scantimer& (0+255),w,b
  2924  002076  B4D8               	btfsc	status,2,c
  2925  002078  D01A               	goto	l10793
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;Main.c: 395: {;Main.c: 396: KeyScan();
  2929  00207A  EC87  F01E         	call	_KeyScan	;wreg free
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;Main.c: 397: KeyProg(mKeyValue);
  2933  00207E  5020               	movf	_mKeyValue^0,w,c
  2934  002080  ECEF  F01A         	call	_KeyProg
  2935                           
  2936                           ;Main.c: 398: if (setid_mode)
  2937  002084  0100               	movlb	0	; () banked
  2938  002086  519B               	movf	_setid_mode& (0+255),w,b
  2939  002088  B4D8               	btfsc	status,2,c
  2940  00208A  D003               	goto	l10783
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;Main.c: 399: SetNodeId();
  2944  00208C  EC26  F01C         	call	_SetNodeId	;wreg free
  2945  002090  D00C               	goto	l10791
  2946  002092                     l10783:
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;Main.c: 400: else if((nmtstate == 0xF0) || ((mSwitch_code == 1) && (com_can_work > 10))
      +                          )
  2950  002092  0EF0               	movlw	240
  2951  002094  1990               	xorwf	_nmtstate& (0+255),w,b
  2952  002096  B4D8               	btfsc	status,2,c
  2953  002098  D006               	goto	u13630
  2954                           
  2955                           ; BSR set to: 0
  2956  00209A  041F               	decf	_mSwitch_code^0,w,c
  2957  00209C  A4D8               	btfss	status,2,c
  2958  00209E  D005               	goto	l10791
  2959                           
  2960                           ; BSR set to: 0
  2961  0020A0  0E0A               	movlw	10
  2962  0020A2  6584               	cpfsgt	_com_can_work& (0+255),b
  2963  0020A4  D002               	goto	l10791
  2964  0020A6                     u13630:
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;Main.c: 401: TestMode ();
  2968  0020A6  EC97  F019         	call	_TestMode	;wreg free
  2969  0020AA                     l10791:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;Main.c: 402: display_scantimer = 0;
  2973  0020AA  0E00               	movlw	0
  2974  0020AC  6F85               	movwf	_display_scantimer& (0+255),b
  2975  0020AE                     l10793:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;Main.c: 403: };Main.c: 404: if (sdo_index && !sdo_timer)
  2979  0020AE  517C               	movf	_sdo_index& (0+255),w,b	;volatile
  2980  0020B0  117D               	iorwf	(_sdo_index+1)& (0+255),w,b	;volatile
  2981  0020B2  B4D8               	btfsc	status,2,c
  2982  0020B4  D011               	goto	l10801
  2983                           
  2984                           ; BSR set to: 0
  2985  0020B6  518E               	movf	_sdo_timer& (0+255),w,b
  2986  0020B8  A4D8               	btfss	status,2,c
  2987  0020BA  D00E               	goto	l10801
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;Main.c: 405: {;Main.c: 406: sdo_index = 0;
  2991  0020BC  0E00               	movlw	0
  2992  0020BE  6F7D               	movwf	(_sdo_index+1)& (0+255),b	;volatile
  2993  0020C0  0E00               	movlw	0
  2994  0020C2  6F7C               	movwf	_sdo_index& (0+255),b	;volatile
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;Main.c: 407: abort_sdo (0x05040000);
  2998  0020C4  0E00               	movlw	0
  2999  0020C6  6FCC               	movwf	abort_sdo@errorcode& (0+255),b
  3000  0020C8  0E00               	movlw	0
  3001  0020CA  6FCD               	movwf	(abort_sdo@errorcode+1)& (0+255),b
  3002  0020CC  0E04               	movlw	4
  3003  0020CE  6FCE               	movwf	(abort_sdo@errorcode+2)& (0+255),b
  3004  0020D0  0E05               	movlw	5
  3005  0020D2  6FCF               	movwf	(abort_sdo@errorcode+3)& (0+255),b
  3006  0020D4  ECB3  F01D         	call	_abort_sdo	;wreg free
  3007  0020D8                     l10801:
  3008                           
  3009                           ;Main.c: 408: };Main.c: 409: if ((!heartbeat) && (hse_heartbeat) && (!can_inittime) && (
      +                          !setid_mode))
  3010  0020D8  0100               	movlb	0	; () banked
  3011  0020DA  518C               	movf	_heartbeat& (0+255),w,b
  3012  0020DC  A4D8               	btfss	status,2,c
  3013  0020DE  D00D               	goto	l10813
  3014                           
  3015                           ; BSR set to: 0
  3016  0020E0  5187               	movf	_hse_heartbeat& (0+255),w,b	;volatile
  3017  0020E2  B4D8               	btfsc	status,2,c
  3018  0020E4  D00A               	goto	l10813
  3019                           
  3020                           ; BSR set to: 0
  3021  0020E6  5186               	movf	_can_inittime& (0+255),w,b	;volatile
  3022  0020E8  A4D8               	btfss	status,2,c
  3023  0020EA  D007               	goto	l10813
  3024                           
  3025                           ; BSR set to: 0
  3026  0020EC  519B               	movf	_setid_mode& (0+255),w,b
  3027  0020EE  A4D8               	btfss	status,2,c
  3028  0020F0  D004               	goto	l10813
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;Main.c: 410: {;Main.c: 411: heartbeat = 4;
  3032  0020F2  0E04               	movlw	4
  3033  0020F4  6F8C               	movwf	_heartbeat& (0+255),b
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;Main.c: 412: sent_heartbeat();
  3037  0020F6  ECFF  F021         	call	_sent_heartbeat	;wreg free
  3038  0020FA                     l10813:
  3039                           
  3040                           ;Main.c: 413: };Main.c: 414: if (errorcode)
  3041  0020FA  0100               	movlb	0	; () banked
  3042  0020FC  517A               	movf	_errorcode& (0+255),w,b
  3043  0020FE  117B               	iorwf	(_errorcode+1)& (0+255),w,b
  3044  002100  B4D8               	btfsc	status,2,c
  3045  002102  D009               	goto	l10821
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;Main.c: 415: {;Main.c: 416: transmit_error ();
  3049  002104  EC4A  F01F         	call	_transmit_error	;wreg free
  3050                           
  3051                           ;Main.c: 417: errorregister = 0;
  3052  002108  0E00               	movlw	0
  3053  00210A  0100               	movlb	0	; () banked
  3054  00210C  6FBA               	movwf	_errorregister& (0+255),b
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Main.c: 418: errorcode = 0;
  3058  00210E  0E00               	movlw	0
  3059  002110  6F7B               	movwf	(_errorcode+1)& (0+255),b
  3060  002112  0E00               	movlw	0
  3061  002114  6F7A               	movwf	_errorcode& (0+255),b
  3062  002116                     l10821:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;Main.c: 419: };Main.c: 420: if (hsecheck)
  3066  002116  5188               	movf	_hsecheck& (0+255),w,b	;volatile
  3067  002118  B4D8               	btfsc	status,2,c
  3068  00211A  D005               	goto	l10827
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;Main.c: 421: {;Main.c: 422: hsecheck = 0;
  3072  00211C  0E00               	movlw	0
  3073  00211E  6F88               	movwf	_hsecheck& (0+255),b	;volatile
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;Main.c: 423: check_hse (1);
  3077  002120  0E01               	movlw	1
  3078  002122  EC44  F01A         	call	_check_hse
  3079  002126                     l10827:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;Main.c: 424: };Main.c: 425: if(((merker == 0x55) && (!can_inittime)) || (com_can_work >
      +                           40))
  3083  002126  0E55               	movlw	85
  3084  002128  1991               	xorwf	_merker& (0+255),w,b
  3085  00212A  A4D8               	btfss	status,2,c
  3086  00212C  D003               	goto	u13730
  3087                           
  3088                           ; BSR set to: 0
  3089  00212E  5186               	movf	_can_inittime& (0+255),w,b	;volatile
  3090  002130  B4D8               	btfsc	status,2,c
  3091  002132  D003               	goto	u13740
  3092  002134                     u13730:
  3093                           
  3094                           ; BSR set to: 0
  3095  002134  0E28               	movlw	40
  3096  002136  6584               	cpfsgt	_com_can_work& (0+255),b
  3097  002138  D00D               	goto	l10841
  3098  00213A                     u13740:
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;Main.c: 426: {;Main.c: 427: merker = 0;
  3102  00213A  0E00               	movlw	0
  3103  00213C  6F91               	movwf	_merker& (0+255),b
  3104                           
  3105                           ;Main.c: 428: com_can_work = 0;
  3106  00213E  0E00               	movlw	0
  3107  002140  6F84               	movwf	_com_can_work& (0+255),b
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;Main.c: 429: init_can(1);
  3111  002142  0E01               	movlw	1
  3112  002144  ECE2  F018         	call	_init_can
  3113                           
  3114                           ; BSR set to: 15
  3115                           ;Main.c: 430: errorregister |= 0x10;
  3116  002148  0100               	movlb	0	; () banked
  3117  00214A  89BA               	bsf	_errorregister& (0+255),4,b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;Main.c: 431: errorcode = 0x8141;
  3121  00214C  0E81               	movlw	129
  3122  00214E  6F7B               	movwf	(_errorcode+1)& (0+255),b
  3123  002150  0E41               	movlw	65
  3124  002152  6F7A               	movwf	_errorcode& (0+255),b
  3125  002154                     l10841:
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;Main.c: 432: };Main.c: 433: if(nmtstate == 0x7F)
  3129  002154  0E7F               	movlw	127
  3130  002156  1990               	xorwf	_nmtstate& (0+255),w,b
  3131  002158  A4D8               	btfss	status,2,c
  3132  00215A  D020               	goto	l10857
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;Main.c: 434: {;Main.c: 435: instate = in ^ in_polarity;
  3136  00215C  51BB               	movf	_in& (0+255),w,b	;volatile
  3137  00215E  19B9               	xorwf	_in_polarity& (0+255),w,b
  3138  002160  6FE7               	movwf	main@instate& (0+255),b
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;Main.c: 436: for (i = 0; i < 8; i++)
  3142  002162  0E00               	movlw	0
  3143  002164  6FE9               	movwf	main@i& (0+255),b
  3144  002166                     l10851:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;Main.c: 437: inpar[i][5] = ((instate >> i) & 1);
  3148  002166  51E9               	movf	main@i& (0+255),w,b
  3149  002168  0D07               	mullw	7
  3150  00216A  0E45               	movlw	low (_inpar+5)
  3151  00216C  24F3               	addwf	243,w,c
  3152  00216E  6ED9               	movwf	fsr2l,c
  3153  002170  0E01               	movlw	high (_inpar+5)
  3154  002172  20F4               	addwfc	prodh,w,c
  3155  002174  6EDA               	movwf	fsr2h,c
  3156  002176  C0E9  F0E4         	movff	main@i,??_main
  3157  00217A  C0E7  F0E5         	movff	main@instate,??_main+1
  3158  00217E  2BE4               	incf	??_main& (0+255),f,b
  3159  002180  D002               	goto	u13764
  3160  002182                     u13765:
  3161  002182  90D8               	bcf	status,0,c
  3162  002184  33E5               	rrcf	(??_main+1)& (0+255),f,b
  3163  002186                     u13764:
  3164  002186  2FE4               	decfsz	??_main& (0+255),f,b
  3165  002188  D7FC               	goto	u13765
  3166  00218A  0100               	movlb	0	; () banked
  3167  00218C  51E5               	movf	(??_main+1)& (0+255),w,b
  3168  00218E  0B01               	andlw	1
  3169  002190  6EDF               	movwf	indf2,c
  3170                           
  3171                           ; BSR set to: 0
  3172  002192  2BE9               	incf	main@i& (0+255),f,b
  3173                           
  3174                           ; BSR set to: 0
  3175  002194  0E07               	movlw	7
  3176  002196  65E9               	cpfsgt	main@i& (0+255),b
  3177  002198  D7E6               	goto	l10851
  3178  00219A  D765               	goto	l554
  3179  00219C                     l10857:
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;Main.c: 439: else if(nmtstate == 0x05)
  3183  00219C  0E05               	movlw	5
  3184  00219E  1990               	xorwf	_nmtstate& (0+255),w,b
  3185  0021A0  A4D8               	btfss	status,2,c
  3186  0021A2  D761               	goto	l554
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;Main.c: 440: {;Main.c: 441: instate = in ^ in_polarity;
  3190  0021A4  51BB               	movf	_in& (0+255),w,b	;volatile
  3191  0021A6  19B9               	xorwf	_in_polarity& (0+255),w,b
  3192  0021A8  6FE7               	movwf	main@instate& (0+255),b
  3193                           
  3194                           ;Main.c: 442: if (instate != inold)
  3195  0021AA  518D               	movf	_inold& (0+255),w,b
  3196  0021AC  19E7               	xorwf	main@instate& (0+255),w,b
  3197  0021AE  B4D8               	btfsc	status,2,c
  3198  0021B0  D75A               	goto	l554
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;Main.c: 443: {;Main.c: 444: for (i = 0; i < 8; i++)
  3202  0021B2  0E00               	movlw	0
  3203  0021B4  6FE9               	movwf	main@i& (0+255),b
  3204  0021B6                     l10867:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;Main.c: 445: {;Main.c: 446: help = ((instate >> i) & 1);
  3208  0021B6  C0E9  F0E4         	movff	main@i,??_main
  3209  0021BA  C0E7  F0E5         	movff	main@instate,??_main+1
  3210  0021BE  2BE4               	incf	??_main& (0+255),f,b
  3211  0021C0  D002               	goto	u13804
  3212  0021C2                     u13805:
  3213  0021C2  90D8               	bcf	status,0,c
  3214  0021C4  33E5               	rrcf	(??_main+1)& (0+255),f,b
  3215  0021C6                     u13804:
  3216  0021C6  2FE4               	decfsz	??_main& (0+255),f,b
  3217  0021C8  D7FC               	goto	u13805
  3218  0021CA  0100               	movlb	0	; () banked
  3219  0021CC  51E5               	movf	(??_main+1)& (0+255),w,b
  3220  0021CE  0B01               	andlw	1
  3221  0021D0  6FE6               	movwf	main@help& (0+255),b
  3222                           
  3223                           ;Main.c: 447: if (help != ((inold >> i) & 1))
  3224  0021D2  C0E9  F0E4         	movff	main@i,??_main
  3225  0021D6  C08D  F0E5         	movff	_inold,??_main+1
  3226  0021DA  2BE4               	incf	??_main& (0+255),f,b
  3227  0021DC  D002               	goto	u13814
  3228  0021DE                     u13815:
  3229  0021DE  90D8               	bcf	status,0,c
  3230  0021E0  33E5               	rrcf	(??_main+1)& (0+255),f,b
  3231  0021E2                     u13814:
  3232  0021E2  2FE4               	decfsz	??_main& (0+255),f,b
  3233  0021E4  D7FC               	goto	u13815
  3234  0021E6  0100               	movlb	0	; () banked
  3235  0021E8  51E5               	movf	(??_main+1)& (0+255),w,b
  3236  0021EA  0B01               	andlw	1
  3237  0021EC  19E6               	xorwf	main@help& (0+255),w,b
  3238  0021EE  B4D8               	btfsc	status,2,c
  3239  0021F0  D06F               	goto	l580
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;Main.c: 448: {;Main.c: 449: inpar[i][5] = help;
  3243  0021F2  51E9               	movf	main@i& (0+255),w,b
  3244  0021F4  0D07               	mullw	7
  3245  0021F6  0E45               	movlw	low (_inpar+5)
  3246  0021F8  24F3               	addwf	243,w,c
  3247  0021FA  6ED9               	movwf	fsr2l,c
  3248  0021FC  0E01               	movlw	high (_inpar+5)
  3249  0021FE  20F4               	addwfc	prodh,w,c
  3250  002200  6EDA               	movwf	fsr2h,c
  3251  002202  C0E6  FFDF         	movff	main@help,indf2
  3252                           
  3253                           ;Main.c: 450: if (inpar[i][0])
  3254  002206  51E9               	movf	main@i& (0+255),w,b
  3255  002208  0D07               	mullw	7
  3256  00220A  0E40               	movlw	low _inpar
  3257  00220C  24F3               	addwf	243,w,c
  3258  00220E  6ED9               	movwf	fsr2l,c
  3259  002210  0E01               	movlw	high _inpar
  3260  002212  20F4               	addwfc	prodh,w,c
  3261  002214  6EDA               	movwf	fsr2h,c
  3262  002216  50DF               	movf	indf2,w,c
  3263  002218  B4D8               	btfsc	status,2,c
  3264  00221A  D05A               	goto	l580
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;Main.c: 451: {;Main.c: 452: for (j = 0; j < 7; j++)
  3268  00221C  0E00               	movlw	0
  3269  00221E  6FE8               	movwf	main@j& (0+255),b
  3270  002220                     l10873:
  3271                           
  3272                           ; BSR set to: 0
  3273  002220  0E06               	movlw	6
  3274  002222  65E8               	cpfsgt	main@j& (0+255),b
  3275  002224  D001               	goto	l10877
  3276  002226  D044               	goto	l10903
  3277  002228                     l10877:
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;Main.c: 453: virt_in[j] = inpar[i][j];
  3281  002228  51E9               	movf	main@i& (0+255),w,b
  3282  00222A  0D07               	mullw	7
  3283  00222C  0E40               	movlw	low _inpar
  3284  00222E  6FE4               	movwf	??_main& (0+255),b
  3285  002230  0E01               	movlw	high _inpar
  3286  002232  6FE5               	movwf	(??_main+1)& (0+255),b
  3287  002234  50F3               	movf	243,w,c
  3288  002236  27E4               	addwf	??_main& (0+255),f,b
  3289  002238  50F4               	movf	244,w,c
  3290  00223A  23E5               	addwfc	(??_main+1)& (0+255),f,b
  3291  00223C  51E8               	movf	main@j& (0+255),w,b
  3292  00223E  25E4               	addwf	??_main& (0+255),w,b
  3293  002240  6ED9               	movwf	fsr2l,c
  3294  002242  0E00               	movlw	0
  3295  002244  21E5               	addwfc	(??_main+1)& (0+255),w,b
  3296  002246  6EDA               	movwf	fsr2h,c
  3297  002248  51E8               	movf	main@j& (0+255),w,b
  3298  00224A  0FA6               	addlw	low _virt_in
  3299  00224C  6EE1               	movwf	fsr1l,c
  3300  00224E  6AE2               	clrf	fsr1h,c
  3301  002250  CFDF FFE7          	movff	indf2,indf1
  3302                           
  3303                           ; BSR set to: 0
  3304  002254  2BE8               	incf	main@j& (0+255),f,b
  3305  002256  D7E4               	goto	l10873
  3306  002258                     l10883:
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;Main.c: 458: if (help)
  3310  002258  51E6               	movf	main@help& (0+255),w,b
  3311  00225A  B4D8               	btfsc	status,2,c
  3312  00225C  D039               	goto	l580
  3313  00225E                     u13850:
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;Main.c: 459: transmit_in (virt_in);
  3317  00225E  0EA6               	movlw	low _virt_in
  3318  002260  6FCC               	movwf	transmit_in@input& (0+255),b
  3319  002262  EC27  F020         	call	_transmit_in	;wreg free
  3320  002266  D034               	goto	l580
  3321  002268                     l10887:
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;Main.c: 462: if(!setid_mode)
  3325  002268  519B               	movf	_setid_mode& (0+255),w,b
  3326  00226A  A4D8               	btfss	status,2,c
  3327  00226C  D031               	goto	l580
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;Main.c: 463: {;Main.c: 464: if ((!landingcalltimer) || (inpar[i][3] != landingcallfloor
      +                          ))
  3331  00226E  518B               	movf	_landingcalltimer& (0+255),w,b
  3332  002270  B4D8               	btfsc	status,2,c
  3333  002272  D00C               	goto	u13880
  3334                           
  3335                           ; BSR set to: 0
  3336  002274  51E9               	movf	main@i& (0+255),w,b
  3337  002276  0D07               	mullw	7
  3338  002278  0E43               	movlw	low (_inpar+3)
  3339  00227A  24F3               	addwf	243,w,c
  3340  00227C  6ED9               	movwf	fsr2l,c
  3341  00227E  0E01               	movlw	high (_inpar+3)
  3342  002280  20F4               	addwfc	prodh,w,c
  3343  002282  6EDA               	movwf	fsr2h,c
  3344  002284  518A               	movf	_landingcallfloor& (0+255),w,b
  3345  002286  18DE               	xorwf	postinc2,w,c
  3346  002288  B4D8               	btfsc	status,2,c
  3347  00228A  D004               	goto	l10895
  3348  00228C                     u13880:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;Main.c: 465: transmit_in (virt_in);
  3352  00228C  0EA6               	movlw	low _virt_in
  3353  00228E  6FCC               	movwf	transmit_in@input& (0+255),b
  3354  002290  EC27  F020         	call	_transmit_in	;wreg free
  3355  002294                     l10895:
  3356                           
  3357                           ;Main.c: 466: landingcalltimer = 2;
  3358  002294  0E02               	movlw	2
  3359  002296  0100               	movlb	0	; () banked
  3360  002298  6F8B               	movwf	_landingcalltimer& (0+255),b
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;Main.c: 467: landingcallfloor = inpar[i][3];
  3364  00229A  51E9               	movf	main@i& (0+255),w,b
  3365  00229C  0D07               	mullw	7
  3366  00229E  0E43               	movlw	low (_inpar+3)
  3367  0022A0  24F3               	addwf	243,w,c
  3368  0022A2  6ED9               	movwf	fsr2l,c
  3369  0022A4  0E01               	movlw	high (_inpar+3)
  3370  0022A6  20F4               	addwfc	prodh,w,c
  3371  0022A8  6EDA               	movwf	fsr2h,c
  3372  0022AA  50DF               	movf	indf2,w,c
  3373  0022AC  6F8A               	movwf	_landingcallfloor& (0+255),b
  3374  0022AE  D010               	goto	l580
  3375  0022B0                     l10903:
  3376                           
  3377                           ; BSR set to: 0
  3378  0022B0  51E9               	movf	main@i& (0+255),w,b
  3379  0022B2  0D07               	mullw	7
  3380  0022B4  0E40               	movlw	low _inpar
  3381  0022B6  24F3               	addwf	243,w,c
  3382  0022B8  6ED9               	movwf	fsr2l,c
  3383  0022BA  0E01               	movlw	high _inpar
  3384  0022BC  20F4               	addwfc	prodh,w,c
  3385  0022BE  6EDA               	movwf	fsr2h,c
  3386  0022C0  50DF               	movf	indf2,w,c
  3387                           
  3388                           ; Switch size 1, requested type "simple"
  3389                           ; Number of cases is 2, Range of values is 2 to 5
  3390                           ; switch strategies available:
  3391                           ; Name         Instructions Cycles
  3392                           ; simple_byte            7     4 (average)
  3393                           ;	Chosen strategy is simple_byte
  3394  0022C2  0A02               	xorlw	2	; case 2
  3395  0022C4  B4D8               	btfsc	status,2,c
  3396  0022C6  D7D0               	goto	l10887
  3397  0022C8  0A07               	xorlw	7	; case 5
  3398  0022CA  B4D8               	btfsc	status,2,c
  3399  0022CC  D7C5               	goto	l10883
  3400  0022CE  D7C7               	goto	u13850
  3401  0022D0                     l580:
  3402                           
  3403                           ; BSR set to: 0
  3404  0022D0  0100               	movlb	0	; () banked
  3405  0022D2  2BE9               	incf	main@i& (0+255),f,b
  3406                           
  3407                           ; BSR set to: 0
  3408  0022D4  0E07               	movlw	7
  3409  0022D6  65E9               	cpfsgt	main@i& (0+255),b
  3410  0022D8  D76E               	goto	l10867
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;Main.c: 475: };Main.c: 476: };Main.c: 477: };Main.c: 478: inold = instate;
  3414  0022DA  C0E7  F08D         	movff	main@instate,_inold
  3415                           
  3416                           ; BSR set to: 0
  3417  0022DE  D6C3               	goto	l554
  3418  0022E0                     __end_of_main:
  3419                           	callstack 0
  3420                           
  3421 ;; *************** function _transmit_in *****************
  3422 ;; Defined at:
  3423 ;;		line 262 in file "../../src/can.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  input           1   16[BANK0 ] PTR unsigned char 
  3426 ;;		 -> virt_in(7), 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  i               1   19[BANK0 ] unsigned char 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      void 
  3431 ;; Registers used:
  3432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 3F/0
  3435 ;;		On exit  : 30/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3438 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3440 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3441 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3442 ;;Total ram usage:        4 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    4
  3445 ;; This function calls:
  3446 ;;		_can_transmit
  3447 ;; This function is called by:
  3448 ;;		_main
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           	psect	text1
  3453  00404E                     __ptext1:
  3454                           	callstack 0
  3455  00404E                     _transmit_in:
  3456                           	callstack 26
  3457                           
  3458                           ; BSR set to: 0
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;can.c: 263: BYTE i;;can.c: 264: while (tc == 30);
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;incstack = 0
  3465  00404E  0E1E               	movlw	30
  3466  004050  180D               	xorwf	_tc^0,w,c	;volatile
  3467  004052  B4D8               	btfsc	status,2,c
  3468  004054  D7FC               	goto	_transmit_in
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;can.c: 265: tx[ti][0] = 0x90 + 7;
  3472  004056  500A               	movf	_ti^0,w,c	;volatile
  3473  004058  0D0A               	mullw	10
  3474  00405A  0E8B               	movlw	low _tx
  3475  00405C  24F3               	addwf	243,w,c
  3476  00405E  6ED9               	movwf	fsr2l,c
  3477  004060  0E01               	movlw	high _tx
  3478  004062  20F4               	addwfc	prodh,w,c
  3479  004064  6EDA               	movwf	fsr2h,c
  3480  004066  0E97               	movlw	151
  3481  004068  6EDF               	movwf	indf2,c
  3482                           
  3483                           ;can.c: 266: tx[ti][1] = node_id;
  3484  00406A  500A               	movf	_ti^0,w,c	;volatile
  3485  00406C  0D0A               	mullw	10
  3486  00406E  0E8C               	movlw	low (_tx+1)
  3487  004070  24F3               	addwf	243,w,c
  3488  004072  6ED9               	movwf	fsr2l,c
  3489  004074  0E01               	movlw	high (_tx+1)
  3490  004076  20F4               	addwfc	prodh,w,c
  3491  004078  6EDA               	movwf	fsr2h,c
  3492  00407A  C09D  FFDF         	movff	_node_id,indf2
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;can.c: 267: for (i = 0; i < 7; i++)
  3496  00407E  0E00               	movlw	0
  3497  004080  6FCF               	movwf	transmit_in@i& (0+255),b
  3498  004082                     l10593:
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;can.c: 268: tx[ti][2 + i] = *input++;
  3502  004082  51CC               	movf	transmit_in@input& (0+255),w,b
  3503  004084  6ED9               	movwf	fsr2l,c
  3504  004086  6ADA               	clrf	fsr2h,c
  3505  004088  500A               	movf	_ti^0,w,c	;volatile
  3506  00408A  0D0A               	mullw	10
  3507  00408C  0E8B               	movlw	low _tx
  3508  00408E  6FCD               	movwf	??_transmit_in& (0+255),b
  3509  004090  0E01               	movlw	high _tx
  3510  004092  6FCE               	movwf	(??_transmit_in+1)& (0+255),b
  3511  004094  0E02               	movlw	2
  3512  004096  27CD               	addwf	??_transmit_in& (0+255),f,b
  3513  004098  0E00               	movlw	0
  3514  00409A  23CE               	addwfc	(??_transmit_in+1)& (0+255),f,b
  3515  00409C  50F3               	movf	243,w,c
  3516  00409E  27CD               	addwf	??_transmit_in& (0+255),f,b
  3517  0040A0  50F4               	movf	244,w,c
  3518  0040A2  23CE               	addwfc	(??_transmit_in+1)& (0+255),f,b
  3519  0040A4  51CF               	movf	transmit_in@i& (0+255),w,b
  3520  0040A6  25CD               	addwf	??_transmit_in& (0+255),w,b
  3521  0040A8  6EE1               	movwf	fsr1l,c
  3522  0040AA  0E00               	movlw	0
  3523  0040AC  21CE               	addwfc	(??_transmit_in+1)& (0+255),w,b
  3524  0040AE  6EE2               	movwf	fsr1h,c
  3525  0040B0  CFDF FFE7          	movff	indf2,indf1
  3526                           
  3527                           ; BSR set to: 0
  3528  0040B4  2BCC               	incf	transmit_in@input& (0+255),f,b
  3529                           
  3530                           ; BSR set to: 0
  3531  0040B6  2BCF               	incf	transmit_in@i& (0+255),f,b
  3532                           
  3533                           ; BSR set to: 0
  3534  0040B8  0E06               	movlw	6
  3535  0040BA  65CF               	cpfsgt	transmit_in@i& (0+255),b
  3536  0040BC  D7E2               	goto	l10593
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;can.c: 269: can_transmit ();
  3540  0040BE  ECBC  F01C         	call	_can_transmit	;wreg free
  3541  0040C2  0012               	return		;funcret
  3542  0040C4                     __end_of_transmit_in:
  3543                           	callstack 0
  3544                           
  3545 ;; *************** function _transmit_error *****************
  3546 ;; Defined at:
  3547 ;;		line 342 in file "../../src/can.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  i               1   18[BANK0 ] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 3F/0
  3558 ;;		On exit  : 30/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3563 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3564 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3565 ;;Total ram usage:        3 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    4
  3568 ;; This function calls:
  3569 ;;		_can_transmit
  3570 ;; This function is called by:
  3571 ;;		_main
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text2
  3576  003E94                     __ptext2:
  3577                           	callstack 0
  3578  003E94                     _transmit_error:
  3579                           	callstack 26
  3580                           
  3581                           ; BSR set to: 0
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;can.c: 343: BYTE i;;can.c: 344: while (tc == 30);
  3585                           
  3586                           ;incstack = 0
  3587  003E94  0E1E               	movlw	30
  3588  003E96  180D               	xorwf	_tc^0,w,c	;volatile
  3589  003E98  B4D8               	btfsc	status,2,c
  3590  003E9A  D7FC               	goto	_transmit_error
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;can.c: 345: tx[ti][0] = 0x10 + 8;
  3594  003E9C  500A               	movf	_ti^0,w,c	;volatile
  3595  003E9E  0D0A               	mullw	10
  3596  003EA0  0E8B               	movlw	low _tx
  3597  003EA2  24F3               	addwf	243,w,c
  3598  003EA4  6ED9               	movwf	fsr2l,c
  3599  003EA6  0E01               	movlw	high _tx
  3600  003EA8  20F4               	addwfc	prodh,w,c
  3601  003EAA  6EDA               	movwf	fsr2h,c
  3602  003EAC  0E18               	movlw	24
  3603  003EAE  6EDF               	movwf	indf2,c
  3604                           
  3605                           ;can.c: 346: tx[ti][1] = node_id;
  3606  003EB0  500A               	movf	_ti^0,w,c	;volatile
  3607  003EB2  0D0A               	mullw	10
  3608  003EB4  0E8C               	movlw	low (_tx+1)
  3609  003EB6  24F3               	addwf	243,w,c
  3610  003EB8  6ED9               	movwf	fsr2l,c
  3611  003EBA  0E01               	movlw	high (_tx+1)
  3612  003EBC  20F4               	addwfc	prodh,w,c
  3613  003EBE  6EDA               	movwf	fsr2h,c
  3614  003EC0  C09D  FFDF         	movff	_node_id,indf2
  3615                           
  3616                           ;can.c: 347: tx[ti][2] = errorcode;
  3617  003EC4  500A               	movf	_ti^0,w,c	;volatile
  3618  003EC6  0D0A               	mullw	10
  3619  003EC8  0E8D               	movlw	low (_tx+2)
  3620  003ECA  24F3               	addwf	243,w,c
  3621  003ECC  6ED9               	movwf	fsr2l,c
  3622  003ECE  0E01               	movlw	high (_tx+2)
  3623  003ED0  20F4               	addwfc	prodh,w,c
  3624  003ED2  6EDA               	movwf	fsr2h,c
  3625  003ED4  C07A  FFDF         	movff	_errorcode,indf2
  3626                           
  3627                           ;can.c: 348: tx[ti][3] = errorcode >> 8;
  3628  003ED8  500A               	movf	_ti^0,w,c	;volatile
  3629  003EDA  0D0A               	mullw	10
  3630  003EDC  0E8E               	movlw	low (_tx+3)
  3631  003EDE  24F3               	addwf	243,w,c
  3632  003EE0  6ED9               	movwf	fsr2l,c
  3633  003EE2  0E01               	movlw	high (_tx+3)
  3634  003EE4  20F4               	addwfc	prodh,w,c
  3635  003EE6  6EDA               	movwf	fsr2h,c
  3636  003EE8  C07B  FFDF         	movff	_errorcode+1,indf2
  3637                           
  3638                           ;can.c: 349: tx[ti][4] = errorregister;
  3639  003EEC  500A               	movf	_ti^0,w,c	;volatile
  3640  003EEE  0D0A               	mullw	10
  3641  003EF0  0E8F               	movlw	low (_tx+4)
  3642  003EF2  24F3               	addwf	243,w,c
  3643  003EF4  6ED9               	movwf	fsr2l,c
  3644  003EF6  0E01               	movlw	high (_tx+4)
  3645  003EF8  20F4               	addwfc	prodh,w,c
  3646  003EFA  6EDA               	movwf	fsr2h,c
  3647  003EFC  C0BA  FFDF         	movff	_errorregister,indf2
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;can.c: 350: for (i = 5; i <= 9; i++)
  3651  003F00  0E05               	movlw	5
  3652  003F02  6FCE               	movwf	transmit_error@i& (0+255),b
  3653  003F04                     l10573:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;can.c: 351: tx[ti][i] = 0;
  3657  003F04  500A               	movf	_ti^0,w,c	;volatile
  3658  003F06  0D0A               	mullw	10
  3659  003F08  0E8B               	movlw	low _tx
  3660  003F0A  6FCC               	movwf	??_transmit_error& (0+255),b
  3661  003F0C  0E01               	movlw	high _tx
  3662  003F0E  6FCD               	movwf	(??_transmit_error+1)& (0+255),b
  3663  003F10  50F3               	movf	243,w,c
  3664  003F12  27CC               	addwf	??_transmit_error& (0+255),f,b
  3665  003F14  50F4               	movf	244,w,c
  3666  003F16  23CD               	addwfc	(??_transmit_error+1)& (0+255),f,b
  3667  003F18  51CE               	movf	transmit_error@i& (0+255),w,b
  3668  003F1A  25CC               	addwf	??_transmit_error& (0+255),w,b
  3669  003F1C  6ED9               	movwf	fsr2l,c
  3670  003F1E  0E00               	movlw	0
  3671  003F20  21CD               	addwfc	(??_transmit_error+1)& (0+255),w,b
  3672  003F22  6EDA               	movwf	fsr2h,c
  3673  003F24  0E00               	movlw	0
  3674  003F26  6EDF               	movwf	indf2,c
  3675                           
  3676                           ; BSR set to: 0
  3677  003F28  2BCE               	incf	transmit_error@i& (0+255),f,b
  3678                           
  3679                           ; BSR set to: 0
  3680  003F2A  0E09               	movlw	9
  3681  003F2C  65CE               	cpfsgt	transmit_error@i& (0+255),b
  3682  003F2E  D7EA               	goto	l10573
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;can.c: 352: can_transmit ();
  3686  003F30  ECBC  F01C         	call	_can_transmit	;wreg free
  3687  003F34  0012               	return		;funcret
  3688  003F36                     __end_of_transmit_error:
  3689                           	callstack 0
  3690                           
  3691 ;; *************** function _sent_heartbeat *****************
  3692 ;; Defined at:
  3693 ;;		line 1142 in file "../../src/can.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;		None
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;		None
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		wreg, status,2, status,0
  3702 ;; Tracked objects:
  3703 ;;		On entry : 3F/0
  3704 ;;		On exit  : 3F/F
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3711 ;;Total ram usage:        0 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    3
  3714 ;; This function calls:
  3715 ;;		Nothing
  3716 ;; This function is called by:
  3717 ;;		_main
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text3
  3722  0043FE                     __ptext3:
  3723                           	callstack 0
  3724  0043FE                     _sent_heartbeat:
  3725                           	callstack 27
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;can.c: 1143: TXB1SIDH = 0xE0 + (node_id >> 3);
  3729                           
  3730                           ;incstack = 0
  3731  0043FE  399D               	swapf	_node_id& (0+255),w,b
  3732  004400  46E8               	rlncf	wreg,f,c
  3733  004402  0B1F               	andlw	31
  3734  004404  0FE0               	addlw	224
  3735  004406  010F               	movlb	15	; () banked
  3736  004408  6F11               	movwf	17,b	;volatile
  3737                           
  3738                           ;can.c: 1144: TXB1SIDL = node_id << 5;
  3739  00440A  0100               	movlb	0	; () banked
  3740  00440C  399D               	swapf	_node_id& (0+255),w,b
  3741  00440E  46E8               	rlncf	wreg,f,c
  3742  004410  0BE0               	andlw	224
  3743  004412  010F               	movlb	15	; () banked
  3744  004414  6F12               	movwf	18,b	;volatile
  3745                           
  3746                           ; BSR set to: 15
  3747                           ;can.c: 1145: TXB1D0 = nmtstate;
  3748  004416  C090  FF16         	movff	_nmtstate,3862	;volatile
  3749                           
  3750                           ; BSR set to: 15
  3751                           ;can.c: 1146: TXB1CONbits.TXREQ = 1;
  3752  00441A  8710               	bsf	16,3,b	;volatile
  3753                           
  3754                           ; BSR set to: 15
  3755  00441C  0012               	return		;funcret
  3756  00441E                     __end_of_sent_heartbeat:
  3757                           	callstack 0
  3758                           
  3759 ;; *************** function _read_rx *****************
  3760 ;; Defined at:
  3761 ;;		line 358 in file "../../src/can.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  buffer          8    0[BANK1 ] unsigned char [8]
  3766 ;;  value           4   10[BANK1 ] unsigned long 
  3767 ;;  index           2   15[BANK1 ] unsigned int 
  3768 ;;  i               1   18[BANK1 ] unsigned char 
  3769 ;;  subindex        1   17[BANK1 ] unsigned char 
  3770 ;;  type            1   14[BANK1 ] unsigned char 
  3771 ;;  sub             1    9[BANK1 ] unsigned char 
  3772 ;;  size            1    8[BANK1 ] unsigned char 
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 3F/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3783 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3784 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3785 ;;      Totals:         0      10      19       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3786 ;;Total ram usage:       29 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    5
  3789 ;; This function calls:
  3790 ;;		___awdiv
  3791 ;;		___awmod
  3792 ;;		___lbmod
  3793 ;;		_abort_sdo
  3794 ;;		_read_dict
  3795 ;;		_sdo_response
  3796 ;;		_sdo_segment
  3797 ;;		_search_dict
  3798 ;;		_set_io_config
  3799 ;;		_set_output
  3800 ;;		_write_dict
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text4
  3807  000660                     __ptext4:
  3808                           	callstack 0
  3809  000660                     _read_rx:
  3810                           	callstack 25
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;can.c: 359: BYTE type;;can.c: 360: WORD index;;can.c: 361: BYTE subindex;;can.c: 362: B
      +                          YTE i;;can.c: 363: BYTE size;;can.c: 364: BYTE sub;;can.c: 365: DWORD value;;can.c: 366:
      +                           BYTE buffer[8];;can.c: 367: static BYTE pos = 0;;can.c: 368: static BYTE cte = 0;;can.c
      +                          : 370: switch (rx[ro][0])
  3814                           
  3815                           ; BSR set to: 15
  3816                           ;incstack = 0
  3817  000660  EF19  F009         	goto	l10489
  3818  000664                     l10135:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;can.c: 373: index = rx[ro][2];
  3822  000664  5183               	movf	_ro& (0+255),w,b	;volatile
  3823  000666  0D0A               	mullw	10
  3824  000668  0EB9               	movlw	low (_rx+2)
  3825  00066A  24F3               	addwf	243,w,c
  3826  00066C  6ED9               	movwf	fsr2l,c
  3827  00066E  0E02               	movlw	high (_rx+2)
  3828  000670  20F4               	addwfc	prodh,w,c
  3829  000672  6EDA               	movwf	fsr2h,c
  3830  000674  50DF               	movf	indf2,w,c
  3831  000676  6FDA               	movwf	??_read_rx& (0+255),b
  3832  000678  51DA               	movf	??_read_rx& (0+255),w,b
  3833  00067A  0101               	movlb	1	; () banked
  3834  00067C  6F87               	movwf	read_rx@index& (0+255),b
  3835  00067E  6B88               	clrf	(read_rx@index+1)& (0+255),b
  3836  000680  0100               	movlb	0	; () banked
  3837  000682  5183               	movf	_ro& (0+255),w,b	;volatile
  3838  000684  0D0A               	mullw	10
  3839  000686  0EBA               	movlw	low (_rx+3)
  3840  000688  24F3               	addwf	243,w,c
  3841  00068A  6ED9               	movwf	fsr2l,c
  3842  00068C  0E02               	movlw	high (_rx+3)
  3843  00068E  20F4               	addwfc	prodh,w,c
  3844  000690  6EDA               	movwf	fsr2h,c
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;can.c: 375: if (index)
  3848  000692  0101               	movlb	1	; () banked
  3849  000694  5187               	movf	read_rx@index& (0+255),w,b
  3850  000696  1188               	iorwf	(read_rx@index+1)& (0+255),w,b
  3851  000698  B4D8               	btfsc	status,2,c
  3852  00069A  EF33  F009         	goto	l10491
  3853                           
  3854                           ; BSR set to: 1
  3855                           ;can.c: 376: {;can.c: 377: if (nmtstate == 0x05)
  3856  00069E  0E05               	movlw	5
  3857  0006A0  0100               	movlb	0	; () banked
  3858  0006A2  1990               	xorwf	_nmtstate& (0+255),w,b
  3859  0006A4  A4D8               	btfss	status,2,c
  3860  0006A6  EF33  F009         	goto	l10491
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;can.c: 378: {;can.c: 379: for (i = 0; i < 7; i++)
  3864  0006AA  0E00               	movlw	0
  3865  0006AC  0101               	movlb	1	; () banked
  3866  0006AE  6F8A               	movwf	read_rx@i& (0+255),b
  3867  0006B0                     l10147:
  3868                           
  3869                           ; BSR set to: 1
  3870                           ;can.c: 380: virt_out[i] = rx[ro][i + 2];
  3871  0006B0  0100               	movlb	0	; () banked
  3872  0006B2  5183               	movf	_ro& (0+255),w,b	;volatile
  3873  0006B4  0D0A               	mullw	10
  3874  0006B6  0EB7               	movlw	low _rx
  3875  0006B8  6FDA               	movwf	??_read_rx& (0+255),b
  3876  0006BA  0E02               	movlw	high _rx
  3877  0006BC  6FDB               	movwf	(??_read_rx+1)& (0+255),b
  3878  0006BE  0E02               	movlw	2
  3879  0006C0  27DA               	addwf	??_read_rx& (0+255),f,b
  3880  0006C2  0E00               	movlw	0
  3881  0006C4  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  3882  0006C6  50F3               	movf	243,w,c
  3883  0006C8  27DA               	addwf	??_read_rx& (0+255),f,b
  3884  0006CA  50F4               	movf	244,w,c
  3885  0006CC  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  3886  0006CE  0101               	movlb	1	; () banked
  3887  0006D0  518A               	movf	read_rx@i& (0+255),w,b
  3888  0006D2  0100               	movlb	0	; () banked
  3889  0006D4  25DA               	addwf	??_read_rx& (0+255),w,b
  3890  0006D6  6ED9               	movwf	fsr2l,c
  3891  0006D8  0101               	movlb	1	; () banked
  3892  0006DA  0E00               	movlw	0
  3893  0006DC  0100               	movlb	0	; () banked
  3894  0006DE  21DB               	addwfc	(??_read_rx+1)& (0+255),w,b
  3895  0006E0  6EDA               	movwf	fsr2h,c
  3896  0006E2  0101               	movlb	1	; () banked
  3897  0006E4  518A               	movf	read_rx@i& (0+255),w,b
  3898  0006E6  0F9F               	addlw	low _virt_out
  3899  0006E8  6EE1               	movwf	fsr1l,c
  3900  0006EA  6AE2               	clrf	fsr1h,c
  3901  0006EC  CFDF FFE7          	movff	indf2,indf1
  3902                           
  3903                           ; BSR set to: 1
  3904  0006F0  2B8A               	incf	read_rx@i& (0+255),f,b
  3905                           
  3906                           ; BSR set to: 1
  3907  0006F2  0E06               	movlw	6
  3908  0006F4  658A               	cpfsgt	read_rx@i& (0+255),b
  3909  0006F6  D7DC               	goto	l10147
  3910                           
  3911                           ; BSR set to: 1
  3912                           ;can.c: 381: set_output (virt_out);
  3913  0006F8  0E9F               	movlw	low _virt_out
  3914  0006FA  0100               	movlb	0	; () banked
  3915  0006FC  6FC7               	movwf	set_output@virt& (0+255),b
  3916  0006FE  EC65  F009         	call	_set_output	;wreg free
  3917                           
  3918                           ;can.c: 382: };can.c: 383: };can.c: 384: break;
  3919  000702  EF33  F009         	goto	l10491
  3920  000706                     l10155:
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;can.c: 387: type = rx[ro][2];
  3924  000706  5183               	movf	_ro& (0+255),w,b	;volatile
  3925  000708  0D0A               	mullw	10
  3926  00070A  0EB9               	movlw	low (_rx+2)
  3927  00070C  24F3               	addwf	243,w,c
  3928  00070E  6ED9               	movwf	fsr2l,c
  3929  000710  0E02               	movlw	high (_rx+2)
  3930  000712  20F4               	addwfc	prodh,w,c
  3931  000714  6EDA               	movwf	fsr2h,c
  3932  000716  50DF               	movf	indf2,w,c
  3933  000718  0101               	movlb	1	; () banked
  3934  00071A  6F86               	movwf	read_rx@type& (0+255),b
  3935                           
  3936                           ;can.c: 388: switch (type & 0xE0)
  3937  00071C  EF9B  F007         	goto	l10377
  3938  000720                     l10157:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;can.c: 391: index = *(WORD *)&rx[ro][3];
  3942  000720  5183               	movf	_ro& (0+255),w,b	;volatile
  3943  000722  0D0A               	mullw	10
  3944  000724  0EBA               	movlw	low (_rx+3)
  3945  000726  24F3               	addwf	243,w,c
  3946  000728  6ED9               	movwf	fsr2l,c
  3947  00072A  0E02               	movlw	high (_rx+3)
  3948  00072C  20F4               	addwfc	prodh,w,c
  3949  00072E  6EDA               	movwf	fsr2h,c
  3950  000730  CFDE F187          	movff	postinc2,read_rx@index
  3951  000734  CFDD F188          	movff	postdec2,read_rx@index+1
  3952                           
  3953                           ;can.c: 392: subindex = rx[ro][5];
  3954  000738  5183               	movf	_ro& (0+255),w,b	;volatile
  3955  00073A  0D0A               	mullw	10
  3956  00073C  0EBC               	movlw	low (_rx+5)
  3957  00073E  24F3               	addwf	243,w,c
  3958  000740  6ED9               	movwf	fsr2l,c
  3959  000742  0E02               	movlw	high (_rx+5)
  3960  000744  20F4               	addwfc	prodh,w,c
  3961  000746  6EDA               	movwf	fsr2h,c
  3962  000748  50DF               	movf	indf2,w,c
  3963  00074A  0101               	movlb	1	; () banked
  3964  00074C  6F89               	movwf	read_rx@subindex& (0+255),b
  3965                           
  3966                           ; BSR set to: 1
  3967                           ;can.c: 393: value = search_dict (index, subindex, type, &pos);
  3968  00074E  C187  F0C6         	movff	read_rx@index,search_dict@index
  3969  000752  C188  F0C7         	movff	read_rx@index+1,search_dict@index+1
  3970  000756  C189  F0C8         	movff	read_rx@subindex,search_dict@subindex
  3971  00075A  C186  F0C9         	movff	read_rx@type,search_dict@type
  3972  00075E  0EB7               	movlw	low read_rx@pos
  3973  000760  0100               	movlb	0	; () banked
  3974  000762  6FCA               	movwf	search_dict@pos& (0+255),b
  3975  000764  EC17  F018         	call	_search_dict	;wreg free
  3976  000768  C0C6  F182         	movff	?_search_dict,read_rx@value
  3977  00076C  C0C7  F183         	movff	?_search_dict+1,read_rx@value+1
  3978  000770  C0C8  F184         	movff	?_search_dict+2,read_rx@value+2
  3979  000774  C0C9  F185         	movff	?_search_dict+3,read_rx@value+3
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;can.c: 394: if (value)
  3983  000778  0101               	movlb	1	; () banked
  3984  00077A  5182               	movf	read_rx@value& (0+255),w,b
  3985  00077C  1183               	iorwf	(read_rx@value+1)& (0+255),w,b
  3986  00077E  1184               	iorwf	(read_rx@value+2)& (0+255),w,b
  3987  000780  1185               	iorwf	(read_rx@value+3)& (0+255),w,b
  3988  000782  B4D8               	btfsc	status,2,c
  3989  000784  D00C               	goto	l975
  3990  000786                     u12910:
  3991                           
  3992                           ; BSR set to: 1
  3993                           ;can.c: 395: abort_sdo (value);
  3994  000786  C182  F0CC         	movff	read_rx@value,abort_sdo@errorcode
  3995  00078A  C183  F0CD         	movff	read_rx@value+1,abort_sdo@errorcode+1
  3996  00078E  C184  F0CE         	movff	read_rx@value+2,abort_sdo@errorcode+2
  3997  000792  C185  F0CF         	movff	read_rx@value+3,abort_sdo@errorcode+3
  3998  000796  ECB3  F01D         	call	_abort_sdo	;wreg free
  3999  00079A  EF33  F009         	goto	l10491
  4000  00079E                     l975:
  4001                           
  4002                           ; BSR set to: 1
  4003                           ;can.c: 396: else;can.c: 397: {;can.c: 398: if (type & 0x02)
  4004  00079E  A386               	btfss	read_rx@type& (0+255),1,b
  4005  0007A0  D05B               	goto	l10191
  4006                           
  4007                           ; BSR set to: 1
  4008                           ;can.c: 399: {;can.c: 400: value = write_dict (pos, subindex, *(DWORD *)&rx[ro][6]);
  4009  0007A2  C189  F0C6         	movff	read_rx@subindex,write_dict@subindex
  4010  0007A6  0100               	movlb	0	; () banked
  4011  0007A8  5183               	movf	_ro& (0+255),w,b	;volatile
  4012  0007AA  0D0A               	mullw	10
  4013  0007AC  0EBD               	movlw	low (_rx+6)
  4014  0007AE  24F3               	addwf	243,w,c
  4015  0007B0  6ED9               	movwf	fsr2l,c
  4016  0007B2  0E02               	movlw	high (_rx+6)
  4017  0007B4  20F4               	addwfc	prodh,w,c
  4018  0007B6  6EDA               	movwf	fsr2h,c
  4019  0007B8  CFDE F0C7          	movff	postinc2,write_dict@value
  4020  0007BC  CFDE F0C8          	movff	postinc2,write_dict@value+1
  4021  0007C0  CFDE F0C9          	movff	postinc2,write_dict@value+2
  4022  0007C4  CFDE F0CA          	movff	postinc2,write_dict@value+3
  4023  0007C8  51B7               	movf	read_rx@pos& (0+255),w,b
  4024  0007CA  EC69  F013         	call	_write_dict
  4025  0007CE  0100               	movlb	0	; () banked
  4026  0007D0  6FDA               	movwf	??_read_rx& (0+255),b
  4027  0007D2  51DA               	movf	??_read_rx& (0+255),w,b
  4028  0007D4  0101               	movlb	1	; () banked
  4029  0007D6  6F82               	movwf	read_rx@value& (0+255),b
  4030  0007D8  6B83               	clrf	(read_rx@value+1)& (0+255),b
  4031  0007DA  6B84               	clrf	(read_rx@value+2)& (0+255),b
  4032  0007DC  6B85               	clrf	(read_rx@value+3)& (0+255),b
  4033                           
  4034                           ; BSR set to: 1
  4035                           ;can.c: 401: if (value)
  4036  0007DE  5182               	movf	read_rx@value& (0+255),w,b
  4037  0007E0  1183               	iorwf	(read_rx@value+1)& (0+255),w,b
  4038  0007E2  1184               	iorwf	(read_rx@value+2)& (0+255),w,b
  4039  0007E4  1185               	iorwf	(read_rx@value+3)& (0+255),w,b
  4040  0007E6  A4D8               	btfss	status,2,c
  4041  0007E8  D7CE               	goto	u12910
  4042                           
  4043                           ; BSR set to: 1
  4044                           ;can.c: 403: else;can.c: 404: {;can.c: 405: sdo_response (0x60, index, subindex, *(DWORD
      +                           *)&rx[ro][6]);
  4045  0007EA  C187  F0CC         	movff	read_rx@index,sdo_response@index
  4046  0007EE  C188  F0CD         	movff	read_rx@index+1,sdo_response@index+1
  4047  0007F2  C189  F0CE         	movff	read_rx@subindex,sdo_response@subindex
  4048  0007F6  0100               	movlb	0	; () banked
  4049  0007F8  5183               	movf	_ro& (0+255),w,b	;volatile
  4050  0007FA  0D0A               	mullw	10
  4051  0007FC  0EBD               	movlw	low (_rx+6)
  4052  0007FE  24F3               	addwf	243,w,c
  4053  000800  6ED9               	movwf	fsr2l,c
  4054  000802  0E02               	movlw	high (_rx+6)
  4055  000804  20F4               	addwfc	prodh,w,c
  4056  000806  6EDA               	movwf	fsr2h,c
  4057  000808  CFDE F0CF          	movff	postinc2,sdo_response@value
  4058  00080C  CFDE F0D0          	movff	postinc2,sdo_response@value+1
  4059  000810  CFDE F0D1          	movff	postinc2,sdo_response@value+2
  4060  000814  CFDE F0D2          	movff	postinc2,sdo_response@value+3
  4061  000818  0E60               	movlw	96
  4062  00081A  EC46  F01D         	call	_sdo_response
  4063                           
  4064                           ;can.c: 406: if (index == 0x24CA)
  4065  00081E  0ECA               	movlw	202
  4066  000820  0101               	movlb	1	; () banked
  4067  000822  1987               	xorwf	read_rx@index& (0+255),w,b
  4068  000824  E103               	bnz	u12941
  4069  000826  0E24               	movlw	36
  4070  000828  1988               	xorwf	(read_rx@index+1)& (0+255),w,b
  4071  00082A  A4D8               	btfss	status,2,c
  4072  00082C                     u12941:
  4073  00082C  EF33  F009         	goto	l10491
  4074                           
  4075                           ; BSR set to: 1
  4076                           ;can.c: 407: {;can.c: 408: if (arrowtype == 0)
  4077  000830  0100               	movlb	0	; () banked
  4078  000832  51B8               	movf	_arrowtype& (0+255),w,b
  4079  000834  A4D8               	btfss	status,2,c
  4080  000836  D008               	goto	l10183
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;can.c: 409: {;can.c: 410: if(hardware_version == 0)
  4084  000838  519A               	movf	_hardware_version& (0+255),w,b
  4085  00083A  A4D8               	btfss	status,2,c
  4086  00083C  D002               	goto	l10181
  4087  00083E                     u12960:
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;can.c: 411: arrowflash = 0x01;
  4091  00083E  0E01               	movlw	1
  4092  000840  D001               	goto	L2
  4093  000842                     l10181:
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;can.c: 412: else;can.c: 413: arrowflash = 0x00;
  4097  000842  0E00               	movlw	0
  4098  000844                     L2:
  4099  000844  6F95               	movwf	_arrowflash& (0+255),b
  4100  000846  D004               	goto	l10189
  4101  000848                     l10183:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;can.c: 415: else if (arrowtype == 1)
  4105  000848  05B8               	decf	_arrowtype& (0+255),w,b
  4106  00084A  B4D8               	btfsc	status,2,c
  4107  00084C  D7F8               	goto	u12960
  4108  00084E  D7F9               	goto	l10181
  4109  000850                     l10189:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;can.c: 419: arrowflash_old = arrowflash;
  4113  000850  C095  F01E         	movff	_arrowflash,_arrowflash_old
  4114  000854  EF33  F009         	goto	l10491
  4115  000858                     l10191:
  4116                           
  4117                           ; BSR set to: 1
  4118                           ;can.c: 423: else;can.c: 424: {;can.c: 425: sdo_response (0x60, index, subindex, 0);
  4119  000858  C187  F0CC         	movff	read_rx@index,sdo_response@index
  4120  00085C  C188  F0CD         	movff	read_rx@index+1,sdo_response@index+1
  4121  000860  C189  F0CE         	movff	read_rx@subindex,sdo_response@subindex
  4122  000864  0E00               	movlw	0
  4123  000866  0100               	movlb	0	; () banked
  4124  000868  6FCF               	movwf	sdo_response@value& (0+255),b
  4125  00086A  0E00               	movlw	0
  4126  00086C  6FD0               	movwf	(sdo_response@value+1)& (0+255),b
  4127  00086E  0E00               	movlw	0
  4128  000870  6FD1               	movwf	(sdo_response@value+2)& (0+255),b
  4129  000872  0E00               	movlw	0
  4130  000874  6FD2               	movwf	(sdo_response@value+3)& (0+255),b
  4131  000876  0E60               	movlw	96
  4132  000878  EC46  F01D         	call	_sdo_response
  4133  00087C                     l10193:
  4134                           
  4135                           ;can.c: 426: sdo_index = index;
  4136  00087C  C187  F07C         	movff	read_rx@index,_sdo_index	;volatile
  4137  000880  C188  F07D         	movff	read_rx@index+1,_sdo_index+1	;volatile
  4138                           
  4139                           ;can.c: 427: sdo_subindex = subindex;
  4140  000884  C189  F08F         	movff	read_rx@subindex,_sdo_subindex	;volatile
  4141                           
  4142                           ;can.c: 428: sdo_timer = 0x0A;
  4143  000888  0E0A               	movlw	10
  4144  00088A  0100               	movlb	0	; () banked
  4145  00088C  D18B               	goto	L3
  4146  00088E                     l10199:
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;can.c: 434: if (!sdo_index)
  4150  00088E  517C               	movf	_sdo_index& (0+255),w,b	;volatile
  4151  000890  117D               	iorwf	(_sdo_index+1)& (0+255),w,b	;volatile
  4152  000892  A4D8               	btfss	status,2,c
  4153  000894  D00B               	goto	l990
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;can.c: 435: abort_sdo (0x06010000);
  4157  000896  0E00               	movlw	0
  4158  000898  6FCC               	movwf	abort_sdo@errorcode& (0+255),b
  4159  00089A  0E00               	movlw	0
  4160  00089C  6FCD               	movwf	(abort_sdo@errorcode+1)& (0+255),b
  4161  00089E  0E01               	movlw	1
  4162  0008A0  6FCE               	movwf	(abort_sdo@errorcode+2)& (0+255),b
  4163  0008A2  0E06               	movlw	6
  4164  0008A4  6FCF               	movwf	(abort_sdo@errorcode+3)& (0+255),b
  4165  0008A6  ECB3  F01D         	call	_abort_sdo	;wreg free
  4166  0008AA  D334               	goto	l10371
  4167  0008AC                     l990:
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;can.c: 436: else if (type & 0x10)
  4171  0008AC  0101               	movlb	1	; () banked
  4172  0008AE  A986               	btfss	read_rx@type& (0+255),4,b
  4173  0008B0  D00C               	goto	l992
  4174                           
  4175                           ; BSR set to: 1
  4176                           ;can.c: 437: abort_sdo (0x05030000);
  4177  0008B2  0E00               	movlw	0
  4178  0008B4  0100               	movlb	0	; () banked
  4179  0008B6  6FCC               	movwf	abort_sdo@errorcode& (0+255),b
  4180  0008B8  0E00               	movlw	0
  4181  0008BA  6FCD               	movwf	(abort_sdo@errorcode+1)& (0+255),b
  4182  0008BC  0E03               	movlw	3
  4183  0008BE  6FCE               	movwf	(abort_sdo@errorcode+2)& (0+255),b
  4184  0008C0  0E05               	movlw	5
  4185  0008C2  6FCF               	movwf	(abort_sdo@errorcode+3)& (0+255),b
  4186  0008C4  ECB3  F01D         	call	_abort_sdo	;wreg free
  4187  0008C8  D325               	goto	l10371
  4188  0008CA                     l992:
  4189                           
  4190                           ; BSR set to: 1
  4191                           ;can.c: 438: else if (!(type & 0x01))
  4192  0008CA  B186               	btfsc	read_rx@type& (0+255),0,b
  4193  0008CC  D13F               	goto	l10253
  4194                           
  4195                           ; BSR set to: 1
  4196                           ;can.c: 439: abort_sdo (0x06070012);
  4197  0008CE  0E12               	movlw	18
  4198  0008D0  0100               	movlb	0	; () banked
  4199  0008D2  6FCC               	movwf	abort_sdo@errorcode& (0+255),b
  4200  0008D4  0E00               	movlw	0
  4201  0008D6  6FCD               	movwf	(abort_sdo@errorcode+1)& (0+255),b
  4202  0008D8  0E07               	movlw	7
  4203  0008DA  6FCE               	movwf	(abort_sdo@errorcode+2)& (0+255),b
  4204  0008DC  0E06               	movlw	6
  4205  0008DE  6FCF               	movwf	(abort_sdo@errorcode+3)& (0+255),b
  4206  0008E0  ECB3  F01D         	call	_abort_sdo	;wreg free
  4207  0008E4  D317               	goto	l10371
  4208  0008E6                     l10207:
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;can.c: 445: for (i = 0; i < 7; i++)
  4212  0008E6  0E00               	movlw	0
  4213  0008E8  0101               	movlb	1	; () banked
  4214  0008EA  6F8A               	movwf	read_rx@i& (0+255),b
  4215  0008EC                     l10213:
  4216                           
  4217                           ; BSR set to: 1
  4218                           ;can.c: 446: virt_out[i] = rx[ro][3 + i];
  4219  0008EC  0100               	movlb	0	; () banked
  4220  0008EE  5183               	movf	_ro& (0+255),w,b	;volatile
  4221  0008F0  0D0A               	mullw	10
  4222  0008F2  0EB7               	movlw	low _rx
  4223  0008F4  6FDA               	movwf	??_read_rx& (0+255),b
  4224  0008F6  0E02               	movlw	high _rx
  4225  0008F8  6FDB               	movwf	(??_read_rx+1)& (0+255),b
  4226  0008FA  0E03               	movlw	3
  4227  0008FC  27DA               	addwf	??_read_rx& (0+255),f,b
  4228  0008FE  0E00               	movlw	0
  4229  000900  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4230  000902  50F3               	movf	243,w,c
  4231  000904  27DA               	addwf	??_read_rx& (0+255),f,b
  4232  000906  50F4               	movf	244,w,c
  4233  000908  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4234  00090A  0101               	movlb	1	; () banked
  4235  00090C  518A               	movf	read_rx@i& (0+255),w,b
  4236  00090E  0100               	movlb	0	; () banked
  4237  000910  25DA               	addwf	??_read_rx& (0+255),w,b
  4238  000912  6ED9               	movwf	fsr2l,c
  4239  000914  0101               	movlb	1	; () banked
  4240  000916  0E00               	movlw	0
  4241  000918  0100               	movlb	0	; () banked
  4242  00091A  21DB               	addwfc	(??_read_rx+1)& (0+255),w,b
  4243  00091C  6EDA               	movwf	fsr2h,c
  4244  00091E  0101               	movlb	1	; () banked
  4245  000920  518A               	movf	read_rx@i& (0+255),w,b
  4246  000922  0F9F               	addlw	low _virt_out
  4247  000924  6EE1               	movwf	fsr1l,c
  4248  000926  6AE2               	clrf	fsr1h,c
  4249  000928  CFDF FFE7          	movff	indf2,indf1
  4250                           
  4251                           ; BSR set to: 1
  4252  00092C  2B8A               	incf	read_rx@i& (0+255),f,b
  4253                           
  4254                           ; BSR set to: 1
  4255  00092E  0E06               	movlw	6
  4256  000930  658A               	cpfsgt	read_rx@i& (0+255),b
  4257  000932  D7DC               	goto	l10213
  4258                           
  4259                           ; BSR set to: 1
  4260                           ;can.c: 447: set_output (virt_out);
  4261  000934  0E9F               	movlw	low _virt_out
  4262  000936  0100               	movlb	0	; () banked
  4263  000938  6FC7               	movwf	set_output@virt& (0+255),b
  4264  00093A  EC65  F009         	call	_set_output	;wreg free
  4265                           
  4266                           ;can.c: 448: break;
  4267  00093E  D124               	goto	l10255
  4268  000940                     l10221:
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;can.c: 451: for (i = 0; i < 5; i++)
  4272  000940  0E00               	movlw	0
  4273  000942  0101               	movlb	1	; () banked
  4274  000944  6F8A               	movwf	read_rx@i& (0+255),b
  4275  000946                     l10227:
  4276                           
  4277                           ; BSR set to: 1
  4278                           ;can.c: 452: {;can.c: 453: if (inpar[sdo_subindex - 1][i] != rx[ro][3 + i])
  4279  000946  0100               	movlb	0	; () banked
  4280  000948  5183               	movf	_ro& (0+255),w,b	;volatile
  4281  00094A  0D0A               	mullw	10
  4282  00094C  0EB7               	movlw	low _rx
  4283  00094E  6FDA               	movwf	??_read_rx& (0+255),b
  4284  000950  0E02               	movlw	high _rx
  4285  000952  6FDB               	movwf	(??_read_rx+1)& (0+255),b
  4286  000954  0E03               	movlw	3
  4287  000956  27DA               	addwf	??_read_rx& (0+255),f,b
  4288  000958  0E00               	movlw	0
  4289  00095A  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4290  00095C  50F3               	movf	243,w,c
  4291  00095E  27DA               	addwf	??_read_rx& (0+255),f,b
  4292  000960  50F4               	movf	244,w,c
  4293  000962  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4294  000964  0101               	movlb	1	; () banked
  4295  000966  518A               	movf	read_rx@i& (0+255),w,b
  4296  000968  0100               	movlb	0	; () banked
  4297  00096A  25DA               	addwf	??_read_rx& (0+255),w,b
  4298  00096C  6ED9               	movwf	fsr2l,c
  4299  00096E  0101               	movlb	1	; () banked
  4300  000970  0E00               	movlw	0
  4301  000972  0100               	movlb	0	; () banked
  4302  000974  21DB               	addwfc	(??_read_rx+1)& (0+255),w,b
  4303  000976  6EDA               	movwf	fsr2h,c
  4304  000978  518F               	movf	_sdo_subindex& (0+255),w,b	;volatile
  4305  00097A  0D07               	mullw	7
  4306  00097C  0EF9               	movlw	249
  4307  00097E  6FDD               	movwf	(??_read_rx+3)& (0+255),b
  4308  000980  0EFF               	movlw	255
  4309  000982  6FDE               	movwf	(??_read_rx+4)& (0+255),b
  4310  000984  0E40               	movlw	low _inpar
  4311  000986  6FDF               	movwf	(??_read_rx+5)& (0+255),b
  4312  000988  0E01               	movlw	high _inpar
  4313  00098A  6FE0               	movwf	(??_read_rx+6)& (0+255),b
  4314  00098C  51DD               	movf	(??_read_rx+3)& (0+255),w,b
  4315  00098E  27DF               	addwf	(??_read_rx+5)& (0+255),f,b
  4316  000990  51DE               	movf	(??_read_rx+4)& (0+255),w,b
  4317  000992  23E0               	addwfc	(??_read_rx+6)& (0+255),f,b
  4318  000994  50F3               	movf	243,w,c
  4319  000996  27DF               	addwf	(??_read_rx+5)& (0+255),f,b
  4320  000998  50F4               	movf	244,w,c
  4321  00099A  23E0               	addwfc	(??_read_rx+6)& (0+255),f,b
  4322  00099C  0101               	movlb	1	; () banked
  4323  00099E  518A               	movf	read_rx@i& (0+255),w,b
  4324  0009A0  0100               	movlb	0	; () banked
  4325  0009A2  25DF               	addwf	(??_read_rx+5)& (0+255),w,b
  4326  0009A4  6EE1               	movwf	fsr1l,c
  4327  0009A6  0101               	movlb	1	; () banked
  4328  0009A8  0E00               	movlw	0
  4329  0009AA  0100               	movlb	0	; () banked
  4330  0009AC  21E0               	addwfc	(??_read_rx+6)& (0+255),w,b
  4331  0009AE  6EE2               	movwf	fsr1h,c
  4332  0009B0  50DE               	movf	postinc2,w,c
  4333  0009B2  18E6               	xorwf	postinc1,w,c
  4334  0009B4  B4D8               	btfsc	status,2,c
  4335  0009B6  D036               	goto	l10231
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;can.c: 454: {;can.c: 455: inpar[sdo_subindex - 1][i] = rx[ro][3 + i];
  4339  0009B8  5183               	movf	_ro& (0+255),w,b	;volatile
  4340  0009BA  0D0A               	mullw	10
  4341  0009BC  0EB7               	movlw	low _rx
  4342  0009BE  6FDA               	movwf	??_read_rx& (0+255),b
  4343  0009C0  0E02               	movlw	high _rx
  4344  0009C2  6FDB               	movwf	(??_read_rx+1)& (0+255),b
  4345  0009C4  0E03               	movlw	3
  4346  0009C6  27DA               	addwf	??_read_rx& (0+255),f,b
  4347  0009C8  0E00               	movlw	0
  4348  0009CA  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4349  0009CC  50F3               	movf	243,w,c
  4350  0009CE  27DA               	addwf	??_read_rx& (0+255),f,b
  4351  0009D0  50F4               	movf	244,w,c
  4352  0009D2  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4353  0009D4  0101               	movlb	1	; () banked
  4354  0009D6  518A               	movf	read_rx@i& (0+255),w,b
  4355  0009D8  0100               	movlb	0	; () banked
  4356  0009DA  25DA               	addwf	??_read_rx& (0+255),w,b
  4357  0009DC  6ED9               	movwf	fsr2l,c
  4358  0009DE  0101               	movlb	1	; () banked
  4359  0009E0  0E00               	movlw	0
  4360  0009E2  0100               	movlb	0	; () banked
  4361  0009E4  21DB               	addwfc	(??_read_rx+1)& (0+255),w,b
  4362  0009E6  6EDA               	movwf	fsr2h,c
  4363  0009E8  518F               	movf	_sdo_subindex& (0+255),w,b	;volatile
  4364  0009EA  0D07               	mullw	7
  4365  0009EC  0EF9               	movlw	249
  4366  0009EE  6FDC               	movwf	(??_read_rx+2)& (0+255),b
  4367  0009F0  0EFF               	movlw	255
  4368  0009F2  6FDD               	movwf	(??_read_rx+3)& (0+255),b
  4369  0009F4  0E40               	movlw	low _inpar
  4370  0009F6  6FDE               	movwf	(??_read_rx+4)& (0+255),b
  4371  0009F8  0E01               	movlw	high _inpar
  4372  0009FA  6FDF               	movwf	(??_read_rx+5)& (0+255),b
  4373  0009FC  51DC               	movf	(??_read_rx+2)& (0+255),w,b
  4374  0009FE  27DE               	addwf	(??_read_rx+4)& (0+255),f,b
  4375  000A00  51DD               	movf	(??_read_rx+3)& (0+255),w,b
  4376  000A02  23DF               	addwfc	(??_read_rx+5)& (0+255),f,b
  4377  000A04  50F3               	movf	243,w,c
  4378  000A06  27DE               	addwf	(??_read_rx+4)& (0+255),f,b
  4379  000A08  50F4               	movf	244,w,c
  4380  000A0A  23DF               	addwfc	(??_read_rx+5)& (0+255),f,b
  4381  000A0C  0101               	movlb	1	; () banked
  4382  000A0E  518A               	movf	read_rx@i& (0+255),w,b
  4383  000A10  0100               	movlb	0	; () banked
  4384  000A12  25DE               	addwf	(??_read_rx+4)& (0+255),w,b
  4385  000A14  6EE1               	movwf	fsr1l,c
  4386  000A16  0101               	movlb	1	; () banked
  4387  000A18  0E00               	movlw	0
  4388  000A1A  0100               	movlb	0	; () banked
  4389  000A1C  21DF               	addwfc	(??_read_rx+5)& (0+255),w,b
  4390  000A1E  6EE2               	movwf	fsr1h,c
  4391  000A20  CFDF FFE7          	movff	indf2,indf1
  4392  000A24                     l10231:
  4393                           
  4394                           ; BSR set to: 0
  4395  000A24  0101               	movlb	1	; () banked
  4396  000A26  2B8A               	incf	read_rx@i& (0+255),f,b
  4397                           
  4398                           ; BSR set to: 1
  4399  000A28  0E04               	movlw	4
  4400  000A2A  658A               	cpfsgt	read_rx@i& (0+255),b
  4401  000A2C  D78C               	goto	l10227
  4402  000A2E  D0AC               	goto	l10255
  4403  000A30                     l10235:
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;can.c: 461: for (i = 0; i < 5; i++)
  4407  000A30  0E00               	movlw	0
  4408  000A32  0101               	movlb	1	; () banked
  4409  000A34  6F8A               	movwf	read_rx@i& (0+255),b
  4410  000A36                     l10241:
  4411                           
  4412                           ; BSR set to: 1
  4413                           ;can.c: 462: {;can.c: 463: if (outpar[sdo_subindex - 1][i] != rx[ro][3 + i])
  4414  000A36  0100               	movlb	0	; () banked
  4415  000A38  5183               	movf	_ro& (0+255),w,b	;volatile
  4416  000A3A  0D0A               	mullw	10
  4417  000A3C  0EB7               	movlw	low _rx
  4418  000A3E  6FDA               	movwf	??_read_rx& (0+255),b
  4419  000A40  0E02               	movlw	high _rx
  4420  000A42  6FDB               	movwf	(??_read_rx+1)& (0+255),b
  4421  000A44  0E03               	movlw	3
  4422  000A46  27DA               	addwf	??_read_rx& (0+255),f,b
  4423  000A48  0E00               	movlw	0
  4424  000A4A  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4425  000A4C  50F3               	movf	243,w,c
  4426  000A4E  27DA               	addwf	??_read_rx& (0+255),f,b
  4427  000A50  50F4               	movf	244,w,c
  4428  000A52  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4429  000A54  0101               	movlb	1	; () banked
  4430  000A56  518A               	movf	read_rx@i& (0+255),w,b
  4431  000A58  0100               	movlb	0	; () banked
  4432  000A5A  25DA               	addwf	??_read_rx& (0+255),w,b
  4433  000A5C  6ED9               	movwf	fsr2l,c
  4434  000A5E  0101               	movlb	1	; () banked
  4435  000A60  0E00               	movlw	0
  4436  000A62  0100               	movlb	0	; () banked
  4437  000A64  21DB               	addwfc	(??_read_rx+1)& (0+255),w,b
  4438  000A66  6EDA               	movwf	fsr2h,c
  4439  000A68  518F               	movf	_sdo_subindex& (0+255),w,b	;volatile
  4440  000A6A  6FDD               	movwf	(??_read_rx+3)& (0+255),b
  4441  000A6C  6BDE               	clrf	(??_read_rx+4)& (0+255),b
  4442  000A6E  90D8               	bcf	status,0,c
  4443  000A70  37DD               	rlcf	(??_read_rx+3)& (0+255),f,b
  4444  000A72  37DE               	rlcf	(??_read_rx+4)& (0+255),f,b
  4445  000A74  90D8               	bcf	status,0,c
  4446  000A76  37DD               	rlcf	(??_read_rx+3)& (0+255),f,b
  4447  000A78  37DE               	rlcf	(??_read_rx+4)& (0+255),f,b
  4448  000A7A  90D8               	bcf	status,0,c
  4449  000A7C  37DD               	rlcf	(??_read_rx+3)& (0+255),f,b
  4450  000A7E  37DE               	rlcf	(??_read_rx+4)& (0+255),f,b
  4451  000A80  0EF8               	movlw	248
  4452  000A82  6FDF               	movwf	(??_read_rx+5)& (0+255),b
  4453  000A84  0EFF               	movlw	255
  4454  000A86  6FE0               	movwf	(??_read_rx+6)& (0+255),b
  4455  000A88  0E00               	movlw	low _outpar
  4456  000A8A  6FE1               	movwf	(??_read_rx+7)& (0+255),b
  4457  000A8C  0E01               	movlw	high _outpar
  4458  000A8E  6FE2               	movwf	(??_read_rx+8)& (0+255),b
  4459  000A90  51DF               	movf	(??_read_rx+5)& (0+255),w,b
  4460  000A92  27E1               	addwf	(??_read_rx+7)& (0+255),f,b
  4461  000A94  51E0               	movf	(??_read_rx+6)& (0+255),w,b
  4462  000A96  23E2               	addwfc	(??_read_rx+8)& (0+255),f,b
  4463  000A98  51DD               	movf	(??_read_rx+3)& (0+255),w,b
  4464  000A9A  27E1               	addwf	(??_read_rx+7)& (0+255),f,b
  4465  000A9C  51DE               	movf	(??_read_rx+4)& (0+255),w,b
  4466  000A9E  23E2               	addwfc	(??_read_rx+8)& (0+255),f,b
  4467  000AA0  0101               	movlb	1	; () banked
  4468  000AA2  518A               	movf	read_rx@i& (0+255),w,b
  4469  000AA4  0100               	movlb	0	; () banked
  4470  000AA6  25E1               	addwf	(??_read_rx+7)& (0+255),w,b
  4471  000AA8  6EE1               	movwf	fsr1l,c
  4472  000AAA  0101               	movlb	1	; () banked
  4473  000AAC  0E00               	movlw	0
  4474  000AAE  0100               	movlb	0	; () banked
  4475  000AB0  21E2               	addwfc	(??_read_rx+8)& (0+255),w,b
  4476  000AB2  6EE2               	movwf	fsr1h,c
  4477  000AB4  50DE               	movf	postinc2,w,c
  4478  000AB6  18E6               	xorwf	postinc1,w,c
  4479  000AB8  B4D8               	btfsc	status,2,c
  4480  000ABA  D040               	goto	l10245
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;can.c: 464: {;can.c: 465: outpar[sdo_subindex - 1][i] = rx[ro][3 + i];
  4484  000ABC  5183               	movf	_ro& (0+255),w,b	;volatile
  4485  000ABE  0D0A               	mullw	10
  4486  000AC0  0EB7               	movlw	low _rx
  4487  000AC2  6FDA               	movwf	??_read_rx& (0+255),b
  4488  000AC4  0E02               	movlw	high _rx
  4489  000AC6  6FDB               	movwf	(??_read_rx+1)& (0+255),b
  4490  000AC8  0E03               	movlw	3
  4491  000ACA  27DA               	addwf	??_read_rx& (0+255),f,b
  4492  000ACC  0E00               	movlw	0
  4493  000ACE  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4494  000AD0  50F3               	movf	243,w,c
  4495  000AD2  27DA               	addwf	??_read_rx& (0+255),f,b
  4496  000AD4  50F4               	movf	244,w,c
  4497  000AD6  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  4498  000AD8  0101               	movlb	1	; () banked
  4499  000ADA  518A               	movf	read_rx@i& (0+255),w,b
  4500  000ADC  0100               	movlb	0	; () banked
  4501  000ADE  25DA               	addwf	??_read_rx& (0+255),w,b
  4502  000AE0  6ED9               	movwf	fsr2l,c
  4503  000AE2  0101               	movlb	1	; () banked
  4504  000AE4  0E00               	movlw	0
  4505  000AE6  0100               	movlb	0	; () banked
  4506  000AE8  21DB               	addwfc	(??_read_rx+1)& (0+255),w,b
  4507  000AEA  6EDA               	movwf	fsr2h,c
  4508  000AEC  518F               	movf	_sdo_subindex& (0+255),w,b	;volatile
  4509  000AEE  6FDC               	movwf	(??_read_rx+2)& (0+255),b
  4510  000AF0  6BDD               	clrf	(??_read_rx+3)& (0+255),b
  4511  000AF2  90D8               	bcf	status,0,c
  4512  000AF4  37DC               	rlcf	(??_read_rx+2)& (0+255),f,b
  4513  000AF6  37DD               	rlcf	(??_read_rx+3)& (0+255),f,b
  4514  000AF8  90D8               	bcf	status,0,c
  4515  000AFA  37DC               	rlcf	(??_read_rx+2)& (0+255),f,b
  4516  000AFC  37DD               	rlcf	(??_read_rx+3)& (0+255),f,b
  4517  000AFE  90D8               	bcf	status,0,c
  4518  000B00  37DC               	rlcf	(??_read_rx+2)& (0+255),f,b
  4519  000B02  37DD               	rlcf	(??_read_rx+3)& (0+255),f,b
  4520  000B04  0EF8               	movlw	248
  4521  000B06  6FDE               	movwf	(??_read_rx+4)& (0+255),b
  4522  000B08  0EFF               	movlw	255
  4523  000B0A  6FDF               	movwf	(??_read_rx+5)& (0+255),b
  4524  000B0C  0E00               	movlw	low _outpar
  4525  000B0E  6FE0               	movwf	(??_read_rx+6)& (0+255),b
  4526  000B10  0E01               	movlw	high _outpar
  4527  000B12  6FE1               	movwf	(??_read_rx+7)& (0+255),b
  4528  000B14  51DE               	movf	(??_read_rx+4)& (0+255),w,b
  4529  000B16  27E0               	addwf	(??_read_rx+6)& (0+255),f,b
  4530  000B18  51DF               	movf	(??_read_rx+5)& (0+255),w,b
  4531  000B1A  23E1               	addwfc	(??_read_rx+7)& (0+255),f,b
  4532  000B1C  51DC               	movf	(??_read_rx+2)& (0+255),w,b
  4533  000B1E  27E0               	addwf	(??_read_rx+6)& (0+255),f,b
  4534  000B20  51DD               	movf	(??_read_rx+3)& (0+255),w,b
  4535  000B22  23E1               	addwfc	(??_read_rx+7)& (0+255),f,b
  4536  000B24  0101               	movlb	1	; () banked
  4537  000B26  518A               	movf	read_rx@i& (0+255),w,b
  4538  000B28  0100               	movlb	0	; () banked
  4539  000B2A  25E0               	addwf	(??_read_rx+6)& (0+255),w,b
  4540  000B2C  6EE1               	movwf	fsr1l,c
  4541  000B2E  0101               	movlb	1	; () banked
  4542  000B30  0E00               	movlw	0
  4543  000B32  0100               	movlb	0	; () banked
  4544  000B34  21E1               	addwfc	(??_read_rx+7)& (0+255),w,b
  4545  000B36  6EE2               	movwf	fsr1h,c
  4546  000B38  CFDF FFE7          	movff	indf2,indf1
  4547  000B3C                     l10245:
  4548                           
  4549                           ; BSR set to: 0
  4550  000B3C  0101               	movlb	1	; () banked
  4551  000B3E  2B8A               	incf	read_rx@i& (0+255),f,b
  4552                           
  4553                           ; BSR set to: 1
  4554  000B40  0E04               	movlw	4
  4555  000B42  658A               	cpfsgt	read_rx@i& (0+255),b
  4556  000B44  D778               	goto	l10241
  4557                           
  4558                           ; BSR set to: 1
  4559                           ;can.c: 466: };can.c: 467: };can.c: 468: set_io_config ();
  4560  000B46  ECEF  F01E         	call	_set_io_config	;wreg free
  4561                           
  4562                           ;can.c: 469: break;
  4563  000B4A  D01E               	goto	l10255
  4564  000B4C                     l10253:
  4565                           
  4566                           ; BSR set to: 1
  4567  000B4C  C07C  F0DA         	movff	_sdo_index,??_read_rx	;volatile
  4568  000B50  C07D  F0DB         	movff	_sdo_index+1,??_read_rx+1	;volatile
  4569                           
  4570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  4571                           ; Switch size 1, requested type "simple"
  4572                           ; Number of cases is 3, Range of values is 96 to 98
  4573                           ; switch strategies available:
  4574                           ; Name         Instructions Cycles
  4575                           ; simple_byte           10     6 (average)
  4576                           ;	Chosen strategy is simple_byte
  4577  000B54  0100               	movlb	0	; () banked
  4578  000B56  51DB               	movf	(??_read_rx+1)& (0+255),w,b
  4579  000B58  0A60               	xorlw	96	; case 96
  4580  000B5A  B4D8               	btfsc	status,2,c
  4581  000B5C  D007               	goto	l11591
  4582  000B5E  0A01               	xorlw	1	; case 97
  4583  000B60  B4D8               	btfsc	status,2,c
  4584  000B62  D009               	goto	l11593
  4585  000B64  0A03               	xorlw	3	; case 98
  4586  000B66  B4D8               	btfsc	status,2,c
  4587  000B68  D00B               	goto	l11595
  4588  000B6A  D00E               	goto	l10255
  4589  000B6C                     l11591:
  4590                           
  4591                           ; BSR set to: 0
  4592                           ; Switch size 1, requested type "simple"
  4593                           ; Number of cases is 1, Range of values is 17 to 17
  4594                           ; switch strategies available:
  4595                           ; Name         Instructions Cycles
  4596                           ; simple_byte            4     3 (average)
  4597                           ;	Chosen strategy is simple_byte
  4598  000B6C  51DA               	movf	??_read_rx& (0+255),w,b
  4599  000B6E  0A11               	xorlw	17	; case 17
  4600  000B70  B4D8               	btfsc	status,2,c
  4601  000B72  D6B9               	goto	l10207
  4602  000B74  D009               	goto	l10255
  4603  000B76                     l11593:
  4604                           
  4605                           ; BSR set to: 0
  4606                           ; Switch size 1, requested type "simple"
  4607                           ; Number of cases is 1, Range of values is 0 to 0
  4608                           ; switch strategies available:
  4609                           ; Name         Instructions Cycles
  4610                           ; simple_byte            4     3 (average)
  4611                           ;	Chosen strategy is simple_byte
  4612  000B76  51DA               	movf	??_read_rx& (0+255),w,b
  4613  000B78  0A00               	xorlw	0	; case 0
  4614  000B7A  B4D8               	btfsc	status,2,c
  4615  000B7C  D6E1               	goto	l10221
  4616  000B7E  D004               	goto	l10255
  4617  000B80                     l11595:
  4618                           
  4619                           ; BSR set to: 0
  4620                           ; Switch size 1, requested type "simple"
  4621                           ; Number of cases is 1, Range of values is 0 to 0
  4622                           ; switch strategies available:
  4623                           ; Name         Instructions Cycles
  4624                           ; simple_byte            4     3 (average)
  4625                           ;	Chosen strategy is simple_byte
  4626  000B80  51DA               	movf	??_read_rx& (0+255),w,b
  4627  000B82  0A00               	xorlw	0	; case 0
  4628  000B84  B4D8               	btfsc	status,2,c
  4629  000B86  D754               	goto	l10235
  4630  000B88                     l10255:
  4631                           
  4632                           ;can.c: 471: sdo_segment (0x20, 0, 0);
  4633  000B88  0E00               	movlw	0
  4634  000B8A  0100               	movlb	0	; () banked
  4635  000B8C  6FCC               	movwf	sdo_segment@size& (0+255),b
  4636  000B8E  0E00               	movlw	0
  4637  000B90  6FCD               	movwf	sdo_segment@value& (0+255),b
  4638  000B92  0E00               	movlw	0
  4639  000B94  6FCE               	movwf	(sdo_segment@value+1)& (0+255),b
  4640  000B96  0E20               	movlw	32
  4641  000B98  EC1E  F01E         	call	_sdo_segment
  4642  000B9C  D1BB               	goto	l10371
  4643  000B9E                     l10259:
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;can.c: 474: sdo_subindex = 0;
  4647  000B9E  0E00               	movlw	0
  4648  000BA0  6F8F               	movwf	_sdo_subindex& (0+255),b	;volatile
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;can.c: 475: sdo_timer = 0;
  4652  000BA2  0E00               	movlw	0
  4653  000BA4                     L3:
  4654  000BA4  6F8E               	movwf	_sdo_timer& (0+255),b
  4655                           
  4656                           ;can.c: 476: break;
  4657  000BA6  D35F               	goto	l10491
  4658  000BA8                     l10263:
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;can.c: 479: index = *(WORD *)&rx[ro][3];
  4662  000BA8  5183               	movf	_ro& (0+255),w,b	;volatile
  4663  000BAA  0D0A               	mullw	10
  4664  000BAC  0EBA               	movlw	low (_rx+3)
  4665  000BAE  24F3               	addwf	243,w,c
  4666  000BB0  6ED9               	movwf	fsr2l,c
  4667  000BB2  0E02               	movlw	high (_rx+3)
  4668  000BB4  20F4               	addwfc	prodh,w,c
  4669  000BB6  6EDA               	movwf	fsr2h,c
  4670  000BB8  CFDE F187          	movff	postinc2,read_rx@index
  4671  000BBC  CFDD F188          	movff	postdec2,read_rx@index+1
  4672                           
  4673                           ;can.c: 480: subindex = rx[ro][5];
  4674  000BC0  5183               	movf	_ro& (0+255),w,b	;volatile
  4675  000BC2  0D0A               	mullw	10
  4676  000BC4  0EBC               	movlw	low (_rx+5)
  4677  000BC6  24F3               	addwf	243,w,c
  4678  000BC8  6ED9               	movwf	fsr2l,c
  4679  000BCA  0E02               	movlw	high (_rx+5)
  4680  000BCC  20F4               	addwfc	prodh,w,c
  4681  000BCE  6EDA               	movwf	fsr2h,c
  4682  000BD0  50DF               	movf	indf2,w,c
  4683  000BD2  0101               	movlb	1	; () banked
  4684  000BD4  6F89               	movwf	read_rx@subindex& (0+255),b
  4685                           
  4686                           ; BSR set to: 1
  4687                           ;can.c: 481: value = search_dict (index, subindex, type, &pos);
  4688  000BD6  C187  F0C6         	movff	read_rx@index,search_dict@index
  4689  000BDA  C188  F0C7         	movff	read_rx@index+1,search_dict@index+1
  4690  000BDE  C189  F0C8         	movff	read_rx@subindex,search_dict@subindex
  4691  000BE2  C186  F0C9         	movff	read_rx@type,search_dict@type
  4692  000BE6  0EB7               	movlw	low read_rx@pos
  4693  000BE8  0100               	movlb	0	; () banked
  4694  000BEA  6FCA               	movwf	search_dict@pos& (0+255),b
  4695  000BEC  EC17  F018         	call	_search_dict	;wreg free
  4696  000BF0  C0C6  F182         	movff	?_search_dict,read_rx@value
  4697  000BF4  C0C7  F183         	movff	?_search_dict+1,read_rx@value+1
  4698  000BF8  C0C8  F184         	movff	?_search_dict+2,read_rx@value+2
  4699  000BFC  C0C9  F185         	movff	?_search_dict+3,read_rx@value+3
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;can.c: 482: if (value)
  4703  000C00  0101               	movlb	1	; () banked
  4704  000C02  5182               	movf	read_rx@value& (0+255),w,b
  4705  000C04  1183               	iorwf	(read_rx@value+1)& (0+255),w,b
  4706  000C06  1184               	iorwf	(read_rx@value+2)& (0+255),w,b
  4707  000C08  1185               	iorwf	(read_rx@value+3)& (0+255),w,b
  4708  000C0A  A4D8               	btfss	status,2,c
  4709  000C0C  D5BC               	goto	u12910
  4710                           
  4711                           ; BSR set to: 1
  4712                           ;can.c: 484: else;can.c: 485: {;can.c: 486: size = dict[pos].size;
  4713  000C0E  0100               	movlb	0	; () banked
  4714  000C10  51B7               	movf	read_rx@pos& (0+255),w,b
  4715  000C12  0D07               	mullw	7
  4716  000C14  0E04               	movlw	4
  4717  000C16  26F3               	addwf	243,f,c
  4718  000C18  0E00               	movlw	0
  4719  000C1A  22F4               	addwfc	244,f,c
  4720  000C1C  0EAC               	movlw	low _dict
  4721  000C1E  24F3               	addwf	243,w,c
  4722  000C20  6EF6               	movwf	tblptrl,c
  4723  000C22  0E7E               	movlw	high _dict
  4724  000C24  20F4               	addwfc	244,w,c
  4725  000C26  6EF7               	movwf	tblptrh,c
  4726  000C28                     	if	0	;There are less than 3 active tblptr bytes
  4727  000C28                     	endif
  4728  000C28  0008               	tblrd		*
  4729  000C2A  CFF5 F180          	movff	tablat,read_rx@size
  4730                           
  4731                           ;can.c: 487: sub = dict[pos].sub;
  4732  000C2E  51B7               	movf	read_rx@pos& (0+255),w,b
  4733  000C30  0D07               	mullw	7
  4734  000C32  0E02               	movlw	2
  4735  000C34  26F3               	addwf	243,f,c
  4736  000C36  0E00               	movlw	0
  4737  000C38  22F4               	addwfc	244,f,c
  4738  000C3A  0EAC               	movlw	low _dict
  4739  000C3C  24F3               	addwf	243,w,c
  4740  000C3E  6EF6               	movwf	tblptrl,c
  4741  000C40  0E7E               	movlw	high _dict
  4742  000C42  20F4               	addwfc	244,w,c
  4743  000C44  6EF7               	movwf	tblptrh,c
  4744  000C46                     	if	0	;There are less than 3 active tblptr bytes
  4745  000C46                     	endif
  4746  000C46  0008               	tblrd		*
  4747  000C48  CFF5 F181          	movff	tablat,read_rx@sub
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;can.c: 488: if (size > 4)
  4751  000C4C  0E04               	movlw	4
  4752  000C4E  0101               	movlb	1	; () banked
  4753  000C50  6580               	cpfsgt	read_rx@size& (0+255),b
  4754  000C52  D026               	goto	l10289
  4755                           
  4756                           ; BSR set to: 1
  4757                           ;can.c: 489: {;can.c: 490: if ((!subindex) && sub)
  4758  000C54  5189               	movf	read_rx@subindex& (0+255),w,b
  4759  000C56  A4D8               	btfss	status,2,c
  4760  000C58  D013               	goto	l10281
  4761                           
  4762                           ; BSR set to: 1
  4763  000C5A  5181               	movf	read_rx@sub& (0+255),w,b
  4764  000C5C  B4D8               	btfsc	status,2,c
  4765  000C5E  D010               	goto	l10281
  4766                           
  4767                           ; BSR set to: 1
  4768                           ;can.c: 491: sdo_response (0x40 | 0x02, index, subindex, sub);
  4769  000C60  C187  F0CC         	movff	read_rx@index,sdo_response@index
  4770  000C64  C188  F0CD         	movff	read_rx@index+1,sdo_response@index+1
  4771  000C68  C189  F0CE         	movff	read_rx@subindex,sdo_response@subindex
  4772  000C6C  5181               	movf	read_rx@sub& (0+255),w,b
  4773  000C6E  0100               	movlb	0	; () banked
  4774  000C70  6FCF               	movwf	sdo_response@value& (0+255),b
  4775  000C72  6BD0               	clrf	(sdo_response@value+1)& (0+255),b
  4776  000C74  6BD1               	clrf	(sdo_response@value+2)& (0+255),b
  4777  000C76  6BD2               	clrf	(sdo_response@value+3)& (0+255),b
  4778  000C78  0E42               	movlw	66
  4779  000C7A  EC46  F01D         	call	_sdo_response
  4780  000C7E  D2F3               	goto	l10491
  4781  000C80                     l10281:
  4782                           
  4783                           ; BSR set to: 1
  4784                           ;can.c: 492: else;can.c: 493: {;can.c: 494: sdo_response (0x40, index, subindex, size);
  4785  000C80  C187  F0CC         	movff	read_rx@index,sdo_response@index
  4786  000C84  C188  F0CD         	movff	read_rx@index+1,sdo_response@index+1
  4787  000C88  C189  F0CE         	movff	read_rx@subindex,sdo_response@subindex
  4788  000C8C  5180               	movf	read_rx@size& (0+255),w,b
  4789  000C8E  0100               	movlb	0	; () banked
  4790  000C90  6FCF               	movwf	sdo_response@value& (0+255),b
  4791  000C92  6BD0               	clrf	(sdo_response@value+1)& (0+255),b
  4792  000C94  6BD1               	clrf	(sdo_response@value+2)& (0+255),b
  4793  000C96  6BD2               	clrf	(sdo_response@value+3)& (0+255),b
  4794  000C98  0E40               	movlw	64
  4795  000C9A  EC46  F01D         	call	_sdo_response
  4796  000C9E  D5EE               	goto	l10193
  4797  000CA0                     l10289:
  4798                           
  4799                           ; BSR set to: 1
  4800                           ;can.c: 500: else;can.c: 501: {;can.c: 502: if ((!subindex) && sub)
  4801  000CA0  5189               	movf	read_rx@subindex& (0+255),w,b
  4802  000CA2  A4D8               	btfss	status,2,c
  4803  000CA4  D00B               	goto	l10295
  4804                           
  4805                           ; BSR set to: 1
  4806  000CA6  5181               	movf	read_rx@sub& (0+255),w,b
  4807  000CA8  B4D8               	btfsc	status,2,c
  4808  000CAA  D008               	goto	l10295
  4809                           
  4810                           ; BSR set to: 1
  4811                           ;can.c: 503: {;can.c: 504: size = 1;
  4812  000CAC  0E01               	movlw	1
  4813  000CAE  6F80               	movwf	read_rx@size& (0+255),b
  4814                           
  4815                           ;can.c: 505: value = sub;
  4816  000CB0  5181               	movf	read_rx@sub& (0+255),w,b
  4817  000CB2  6F82               	movwf	read_rx@value& (0+255),b
  4818  000CB4  6B83               	clrf	(read_rx@value+1)& (0+255),b
  4819  000CB6  6B84               	clrf	(read_rx@value+2)& (0+255),b
  4820  000CB8  6B85               	clrf	(read_rx@value+3)& (0+255),b
  4821                           
  4822                           ;can.c: 506: }
  4823  000CBA  D00E               	goto	l10297
  4824  000CBC                     l10295:
  4825                           
  4826                           ; BSR set to: 1
  4827                           ;can.c: 507: else;can.c: 508: value = read_dict (pos, subindex);
  4828  000CBC  C189  F0C6         	movff	read_rx@subindex,read_dict@subindex
  4829  000CC0  0100               	movlb	0	; () banked
  4830  000CC2  51B7               	movf	read_rx@pos& (0+255),w,b
  4831  000CC4  EC41  F015         	call	_read_dict
  4832  000CC8  C0C6  F182         	movff	?_read_dict,read_rx@value
  4833  000CCC  C0C7  F183         	movff	?_read_dict+1,read_rx@value+1
  4834  000CD0  C0C8  F184         	movff	?_read_dict+2,read_rx@value+2
  4835  000CD4  C0C9  F185         	movff	?_read_dict+3,read_rx@value+3
  4836  000CD8                     l10297:
  4837                           
  4838                           ;can.c: 509: sdo_response (0x40 | 0x02, index, subindex, value);
  4839  000CD8  C187  F0CC         	movff	read_rx@index,sdo_response@index
  4840  000CDC  C188  F0CD         	movff	read_rx@index+1,sdo_response@index+1
  4841  000CE0  C189  F0CE         	movff	read_rx@subindex,sdo_response@subindex
  4842  000CE4  C182  F0CF         	movff	read_rx@value,sdo_response@value
  4843  000CE8  C183  F0D0         	movff	read_rx@value+1,sdo_response@value+1
  4844  000CEC  C184  F0D1         	movff	read_rx@value+2,sdo_response@value+2
  4845  000CF0  C185  F0D2         	movff	read_rx@value+3,sdo_response@value+3
  4846  000CF4  0E42               	movlw	66
  4847  000CF6  EC46  F01D         	call	_sdo_response
  4848  000CFA  D2B5               	goto	l10491
  4849  000CFC                     l10299:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;can.c: 515: if (!sdo_index)
  4853  000CFC  517C               	movf	_sdo_index& (0+255),w,b	;volatile
  4854  000CFE  117D               	iorwf	(_sdo_index+1)& (0+255),w,b	;volatile
  4855  000D00  A4D8               	btfss	status,2,c
  4856  000D02  D00B               	goto	l1019
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;can.c: 516: abort_sdo (0x06010000);
  4860  000D04  0E00               	movlw	0
  4861  000D06  6FCC               	movwf	abort_sdo@errorcode& (0+255),b
  4862  000D08  0E00               	movlw	0
  4863  000D0A  6FCD               	movwf	(abort_sdo@errorcode+1)& (0+255),b
  4864  000D0C  0E01               	movlw	1
  4865  000D0E  6FCE               	movwf	(abort_sdo@errorcode+2)& (0+255),b
  4866  000D10  0E06               	movlw	6
  4867  000D12  6FCF               	movwf	(abort_sdo@errorcode+3)& (0+255),b
  4868  000D14  ECB3  F01D         	call	_abort_sdo	;wreg free
  4869  000D18  D0FD               	goto	l10371
  4870  000D1A                     l1019:
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;can.c: 517: else if (type & 0x10)
  4874  000D1A  0101               	movlb	1	; () banked
  4875  000D1C  A986               	btfss	read_rx@type& (0+255),4,b
  4876  000D1E  D0CB               	goto	l10369
  4877                           
  4878                           ; BSR set to: 1
  4879                           ;can.c: 518: abort_sdo (0x05030000);
  4880  000D20  0E00               	movlw	0
  4881  000D22  0100               	movlb	0	; () banked
  4882  000D24  6FCC               	movwf	abort_sdo@errorcode& (0+255),b
  4883  000D26  0E00               	movlw	0
  4884  000D28  6FCD               	movwf	(abort_sdo@errorcode+1)& (0+255),b
  4885  000D2A  0E03               	movlw	3
  4886  000D2C  6FCE               	movwf	(abort_sdo@errorcode+2)& (0+255),b
  4887  000D2E  0E05               	movlw	5
  4888  000D30  6FCF               	movwf	(abort_sdo@errorcode+3)& (0+255),b
  4889  000D32  ECB3  F01D         	call	_abort_sdo	;wreg free
  4890  000D36  D0EE               	goto	l10371
  4891  000D38                     l10305:
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;can.c: 524: for (i = 0; i < 6; i++)
  4895  000D38  0E00               	movlw	0
  4896  000D3A  0101               	movlb	1	; () banked
  4897  000D3C  6F8A               	movwf	read_rx@i& (0+255),b
  4898  000D3E                     l10311:
  4899                           
  4900                           ; BSR set to: 1
  4901                           ;can.c: 525: {;can.c: 526: if(hardware_version == 0)
  4902  000D3E  0100               	movlb	0	; () banked
  4903  000D40  519A               	movf	_hardware_version& (0+255),w,b
  4904  000D42  A4D8               	btfss	status,2,c
  4905  000D44  D007               	goto	l10315
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;can.c: 527: buffer[i] = device_name_G741[i];
  4909  000D46  0EF2               	movlw	low _device_name_G741
  4910  000D48  0101               	movlb	1	; () banked
  4911  000D4A  258A               	addwf	read_rx@i& (0+255),w,b
  4912  000D4C  6EF6               	movwf	tblptrl,c
  4913  000D4E  6AF7               	clrf	tblptrh,c
  4914  000D50  0E7F               	movlw	high _device_name_G741
  4915  000D52  D006               	goto	L4
  4916  000D54                     l10315:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;can.c: 528: else;can.c: 529: buffer[i] = device_name_G742[i];
  4920  000D54  0ED5               	movlw	low _device_name_G742
  4921  000D56  0101               	movlb	1	; () banked
  4922  000D58  258A               	addwf	read_rx@i& (0+255),w,b
  4923  000D5A  6EF6               	movwf	tblptrl,c
  4924  000D5C  6AF7               	clrf	tblptrh,c
  4925  000D5E  0E7F               	movlw	high _device_name_G742
  4926  000D60                     L4:
  4927  000D60  22F7               	addwfc	tblptrh,f,c
  4928  000D62                     	if	0	;There are less than 3 active tblptr bytes
  4929  000D62                     	endif
  4930  000D62  0E78               	movlw	low read_rx@buffer
  4931  000D64  258A               	addwf	read_rx@i& (0+255),w,b
  4932  000D66  6ED9               	movwf	fsr2l,c
  4933  000D68  6ADA               	clrf	fsr2h,c
  4934  000D6A  0E01               	movlw	high read_rx@buffer
  4935  000D6C  22DA               	addwfc	fsr2h,f,c
  4936  000D6E  0008               	tblrd		*
  4937  000D70  CFF5 FFDF          	movff	tablat,indf2
  4938                           
  4939                           ; BSR set to: 1
  4940  000D74  2B8A               	incf	read_rx@i& (0+255),f,b
  4941                           
  4942                           ; BSR set to: 1
  4943  000D76  0E05               	movlw	5
  4944  000D78  658A               	cpfsgt	read_rx@i& (0+255),b
  4945  000D7A  D7E1               	goto	l10311
  4946                           
  4947                           ; BSR set to: 1
  4948                           ;can.c: 530: };can.c: 531: sdo_segment (0x00 | 0x01, 6, buffer);
  4949  000D7C  0E06               	movlw	6
  4950  000D7E  0100               	movlb	0	; () banked
  4951  000D80  6FCC               	movwf	sdo_segment@size& (0+255),b
  4952  000D82  0E78               	movlw	low read_rx@buffer
  4953  000D84  6FCD               	movwf	sdo_segment@value& (0+255),b
  4954  000D86  0E01               	movlw	high read_rx@buffer
  4955  000D88  6FCE               	movwf	(sdo_segment@value+1)& (0+255),b
  4956  000D8A  0E01               	movlw	1
  4957  000D8C  EC1E  F01E         	call	_sdo_segment
  4958                           
  4959                           ;can.c: 532: break;
  4960  000D90  D0C1               	goto	l10371
  4961  000D92                     l10323:
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;can.c: 535: for (i = 0; i < 6; i++)
  4965  000D92  0E00               	movlw	0
  4966  000D94  0101               	movlb	1	; () banked
  4967  000D96  6F8A               	movwf	read_rx@i& (0+255),b
  4968  000D98                     l10329:
  4969                           
  4970                           ; BSR set to: 1
  4971                           ;can.c: 536: {;can.c: 537: if(hardware_version == 0)
  4972  000D98  0100               	movlb	0	; () banked
  4973  000D9A  519A               	movf	_hardware_version& (0+255),w,b
  4974  000D9C  A4D8               	btfss	status,2,c
  4975  000D9E  D007               	goto	l10333
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;can.c: 538: buffer[i] = hardware_uea_G741[i];
  4979  000DA0  0EEC               	movlw	low _hardware_uea_G741
  4980  000DA2  0101               	movlb	1	; () banked
  4981  000DA4  258A               	addwf	read_rx@i& (0+255),w,b
  4982  000DA6  6EF6               	movwf	tblptrl,c
  4983  000DA8  6AF7               	clrf	tblptrh,c
  4984  000DAA  0E7F               	movlw	high _hardware_uea_G741
  4985  000DAC  D006               	goto	L5
  4986  000DAE                     l10333:
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;can.c: 539: else;can.c: 540: buffer[i] = hardware_uea_G742[i];
  4990  000DAE  0ECF               	movlw	low _hardware_uea_G742
  4991  000DB0  0101               	movlb	1	; () banked
  4992  000DB2  258A               	addwf	read_rx@i& (0+255),w,b
  4993  000DB4  6EF6               	movwf	tblptrl,c
  4994  000DB6  6AF7               	clrf	tblptrh,c
  4995  000DB8  0E7F               	movlw	high _hardware_uea_G742
  4996  000DBA                     L5:
  4997  000DBA  22F7               	addwfc	tblptrh,f,c
  4998  000DBC                     	if	0	;There are less than 3 active tblptr bytes
  4999  000DBC                     	endif
  5000  000DBC  0E78               	movlw	low read_rx@buffer
  5001  000DBE  258A               	addwf	read_rx@i& (0+255),w,b
  5002  000DC0  6ED9               	movwf	fsr2l,c
  5003  000DC2  6ADA               	clrf	fsr2h,c
  5004  000DC4  0E01               	movlw	high read_rx@buffer
  5005  000DC6  22DA               	addwfc	fsr2h,f,c
  5006  000DC8  0008               	tblrd		*
  5007  000DCA  CFF5 FFDF          	movff	tablat,indf2
  5008                           
  5009                           ; BSR set to: 1
  5010  000DCE  2B8A               	incf	read_rx@i& (0+255),f,b
  5011                           
  5012                           ; BSR set to: 1
  5013  000DD0  0E05               	movlw	5
  5014  000DD2  658A               	cpfsgt	read_rx@i& (0+255),b
  5015  000DD4  D7E1               	goto	l10329
  5016                           
  5017                           ; BSR set to: 1
  5018                           ;can.c: 541: };can.c: 542: sdo_segment (0x00 | 0x01, 5, buffer);
  5019  000DD6  0E05               	movlw	5
  5020  000DD8  0100               	movlb	0	; () banked
  5021  000DDA  6FCC               	movwf	sdo_segment@size& (0+255),b
  5022  000DDC  0E78               	movlw	low read_rx@buffer
  5023  000DDE  6FCD               	movwf	sdo_segment@value& (0+255),b
  5024  000DE0  0E01               	movlw	high read_rx@buffer
  5025  000DE2  6FCE               	movwf	(sdo_segment@value+1)& (0+255),b
  5026  000DE4  0E01               	movlw	1
  5027  000DE6  EC1E  F01E         	call	_sdo_segment
  5028                           
  5029                           ;can.c: 543: break;
  5030  000DEA  D094               	goto	l10371
  5031  000DEC                     l10341:
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;can.c: 546: for (i = 0; i < 6; i++)
  5035  000DEC  0E00               	movlw	0
  5036  000DEE  0101               	movlb	1	; () banked
  5037  000DF0  6F8A               	movwf	read_rx@i& (0+255),b
  5038  000DF2                     l10347:
  5039                           
  5040                           ; BSR set to: 1
  5041                           ;can.c: 547: {;can.c: 548: if(hardware_version == 0)
  5042  000DF2  0100               	movlb	0	; () banked
  5043  000DF4  519A               	movf	_hardware_version& (0+255),w,b
  5044  000DF6  A4D8               	btfss	status,2,c
  5045  000DF8  D007               	goto	l10351
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;can.c: 549: buffer[i] = version_uea_G741[i];
  5049  000DFA  0EF8               	movlw	low _version_uea_G741
  5050  000DFC  0101               	movlb	1	; () banked
  5051  000DFE  258A               	addwf	read_rx@i& (0+255),w,b
  5052  000E00  6EF6               	movwf	tblptrl,c
  5053  000E02  6AF7               	clrf	tblptrh,c
  5054  000E04  0E7F               	movlw	high _version_uea_G741
  5055  000E06  D006               	goto	L6
  5056  000E08                     l10351:
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;can.c: 550: else;can.c: 551: buffer[i] = version_uea_G742[i];
  5060  000E08  0EDB               	movlw	low _version_uea_G742
  5061  000E0A  0101               	movlb	1	; () banked
  5062  000E0C  258A               	addwf	read_rx@i& (0+255),w,b
  5063  000E0E  6EF6               	movwf	tblptrl,c
  5064  000E10  6AF7               	clrf	tblptrh,c
  5065  000E12  0E7F               	movlw	high _version_uea_G742
  5066  000E14                     L6:
  5067  000E14  22F7               	addwfc	tblptrh,f,c
  5068  000E16                     	if	0	;There are less than 3 active tblptr bytes
  5069  000E16                     	endif
  5070  000E16  0E78               	movlw	low read_rx@buffer
  5071  000E18  258A               	addwf	read_rx@i& (0+255),w,b
  5072  000E1A  6ED9               	movwf	fsr2l,c
  5073  000E1C  6ADA               	clrf	fsr2h,c
  5074  000E1E  0E01               	movlw	high read_rx@buffer
  5075  000E20  22DA               	addwfc	fsr2h,f,c
  5076  000E22  0008               	tblrd		*
  5077  000E24  CFF5 FFDF          	movff	tablat,indf2
  5078                           
  5079                           ; BSR set to: 1
  5080  000E28  2B8A               	incf	read_rx@i& (0+255),f,b
  5081                           
  5082                           ; BSR set to: 1
  5083  000E2A  0E05               	movlw	5
  5084  000E2C  658A               	cpfsgt	read_rx@i& (0+255),b
  5085  000E2E  D7E1               	goto	l10347
  5086                           
  5087                           ; BSR set to: 1
  5088                           ;can.c: 552: };can.c: 553: sdo_segment (0x00 | 0x01, 5, buffer);
  5089  000E30  0E05               	movlw	5
  5090  000E32  0100               	movlb	0	; () banked
  5091  000E34  6FCC               	movwf	sdo_segment@size& (0+255),b
  5092  000E36  0E78               	movlw	low read_rx@buffer
  5093  000E38  6FCD               	movwf	sdo_segment@value& (0+255),b
  5094  000E3A  0E01               	movlw	high read_rx@buffer
  5095  000E3C  6FCE               	movwf	(sdo_segment@value+1)& (0+255),b
  5096  000E3E  0E01               	movlw	1
  5097  000E40  EC1E  F01E         	call	_sdo_segment
  5098                           
  5099                           ;can.c: 554: break;
  5100  000E44  D067               	goto	l10371
  5101  000E46                     l10359:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;can.c: 557: sdo_segment (0x00 | 0x01, 7, virt_in);
  5105  000E46  0E07               	movlw	7
  5106  000E48  6FCC               	movwf	sdo_segment@size& (0+255),b
  5107  000E4A  0EA6               	movlw	low _virt_in
  5108  000E4C  6FCD               	movwf	sdo_segment@value& (0+255),b
  5109  000E4E  6BCE               	clrf	(sdo_segment@value+1)& (0+255),b
  5110  000E50  0E01               	movlw	1
  5111  000E52  EC1E  F01E         	call	_sdo_segment
  5112                           
  5113                           ;can.c: 558: break;
  5114  000E56  D05E               	goto	l10371
  5115  000E58                     l10361:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;can.c: 561: sdo_segment (0x00 | 0x01, 7, virt_out);
  5119  000E58  0E07               	movlw	7
  5120  000E5A  6FCC               	movwf	sdo_segment@size& (0+255),b
  5121  000E5C  0E9F               	movlw	low _virt_out
  5122  000E5E  6FCD               	movwf	sdo_segment@value& (0+255),b
  5123  000E60  6BCE               	clrf	(sdo_segment@value+1)& (0+255),b
  5124  000E62  0E01               	movlw	1
  5125  000E64  EC1E  F01E         	call	_sdo_segment
  5126                           
  5127                           ;can.c: 562: break;
  5128  000E68  D055               	goto	l10371
  5129  000E6A                     l10363:
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;can.c: 565: sdo_segment (0x00 | 0x01, 7, inpar[sdo_subindex - 1]);
  5133  000E6A  0E07               	movlw	7
  5134  000E6C  6FCC               	movwf	sdo_segment@size& (0+255),b
  5135  000E6E  518F               	movf	_sdo_subindex& (0+255),w,b	;volatile
  5136  000E70  0D07               	mullw	7
  5137  000E72  0E39               	movlw	low (_inpar+65529)
  5138  000E74  24F3               	addwf	243,w,c
  5139  000E76  6FCD               	movwf	sdo_segment@value& (0+255),b
  5140  000E78  0E01               	movlw	high (_inpar+65529)
  5141  000E7A  20F4               	addwfc	prodh,w,c
  5142  000E7C  6FCE               	movwf	(sdo_segment@value+1)& (0+255),b
  5143  000E7E  0E01               	movlw	1
  5144  000E80  EC1E  F01E         	call	_sdo_segment
  5145                           
  5146                           ;can.c: 566: break;
  5147  000E84  D047               	goto	l10371
  5148  000E86                     l10365:
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;can.c: 569: sdo_segment (0x00 | 0x01, 7, outpar[sdo_subindex - 1]);
  5152  000E86  0E07               	movlw	7
  5153  000E88  6FCC               	movwf	sdo_segment@size& (0+255),b
  5154  000E8A  518F               	movf	_sdo_subindex& (0+255),w,b	;volatile
  5155  000E8C  6FDA               	movwf	??_read_rx& (0+255),b
  5156  000E8E  6BDB               	clrf	(??_read_rx+1)& (0+255),b
  5157  000E90  90D8               	bcf	status,0,c
  5158  000E92  37DA               	rlcf	??_read_rx& (0+255),f,b
  5159  000E94  37DB               	rlcf	(??_read_rx+1)& (0+255),f,b
  5160  000E96  90D8               	bcf	status,0,c
  5161  000E98  37DA               	rlcf	??_read_rx& (0+255),f,b
  5162  000E9A  37DB               	rlcf	(??_read_rx+1)& (0+255),f,b
  5163  000E9C  90D8               	bcf	status,0,c
  5164  000E9E  37DA               	rlcf	??_read_rx& (0+255),f,b
  5165  000EA0  37DB               	rlcf	(??_read_rx+1)& (0+255),f,b
  5166  000EA2  0EF8               	movlw	low (_outpar+65528)
  5167  000EA4  25DA               	addwf	??_read_rx& (0+255),w,b
  5168  000EA6  6FCD               	movwf	sdo_segment@value& (0+255),b
  5169  000EA8  0E00               	movlw	high (_outpar+65528)
  5170  000EAA  21DB               	addwfc	(??_read_rx+1)& (0+255),w,b
  5171  000EAC  6FCE               	movwf	(sdo_segment@value+1)& (0+255),b
  5172  000EAE  0E01               	movlw	1
  5173  000EB0  EC1E  F01E         	call	_sdo_segment
  5174                           
  5175                           ;can.c: 570: break;
  5176  000EB4  D02F               	goto	l10371
  5177  000EB6                     l10369:
  5178                           
  5179                           ; BSR set to: 1
  5180  000EB6  C07C  F0DA         	movff	_sdo_index,??_read_rx	;volatile
  5181  000EBA  C07D  F0DB         	movff	_sdo_index+1,??_read_rx+1	;volatile
  5182                           
  5183                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  5184                           ; Switch size 1, requested type "simple"
  5185                           ; Number of cases is 4, Range of values is 16 to 98
  5186                           ; switch strategies available:
  5187                           ; Name         Instructions Cycles
  5188                           ; simple_byte           13     7 (average)
  5189                           ;	Chosen strategy is simple_byte
  5190  000EBE  0100               	movlb	0	; () banked
  5191  000EC0  51DB               	movf	(??_read_rx+1)& (0+255),w,b
  5192  000EC2  0A10               	xorlw	16	; case 16
  5193  000EC4  B4D8               	btfsc	status,2,c
  5194  000EC6  D00A               	goto	l11597
  5195  000EC8  0A70               	xorlw	112	; case 96
  5196  000ECA  B4D8               	btfsc	status,2,c
  5197  000ECC  D012               	goto	l11599
  5198  000ECE  0A01               	xorlw	1	; case 97
  5199  000ED0  B4D8               	btfsc	status,2,c
  5200  000ED2  D017               	goto	l11601
  5201  000ED4  0A03               	xorlw	3	; case 98
  5202  000ED6  B4D8               	btfsc	status,2,c
  5203  000ED8  D019               	goto	l11603
  5204  000EDA  D01C               	goto	l10371
  5205  000EDC                     l11597:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ; Switch size 1, requested type "simple"
  5209                           ; Number of cases is 3, Range of values is 8 to 10
  5210                           ; switch strategies available:
  5211                           ; Name         Instructions Cycles
  5212                           ; simple_byte           10     6 (average)
  5213                           ;	Chosen strategy is simple_byte
  5214  000EDC  51DA               	movf	??_read_rx& (0+255),w,b
  5215  000EDE  0A08               	xorlw	8	; case 8
  5216  000EE0  B4D8               	btfsc	status,2,c
  5217  000EE2  D72A               	goto	l10305
  5218  000EE4  0A01               	xorlw	1	; case 9
  5219  000EE6  B4D8               	btfsc	status,2,c
  5220  000EE8  D754               	goto	l10323
  5221  000EEA  0A03               	xorlw	3	; case 10
  5222  000EEC  B4D8               	btfsc	status,2,c
  5223  000EEE  D77E               	goto	l10341
  5224  000EF0  D011               	goto	l10371
  5225  000EF2                     l11599:
  5226                           
  5227                           ; BSR set to: 0
  5228                           ; Switch size 1, requested type "simple"
  5229                           ; Number of cases is 2, Range of values is 16 to 17
  5230                           ; switch strategies available:
  5231                           ; Name         Instructions Cycles
  5232                           ; simple_byte            7     4 (average)
  5233                           ;	Chosen strategy is simple_byte
  5234  000EF2  51DA               	movf	??_read_rx& (0+255),w,b
  5235  000EF4  0A10               	xorlw	16	; case 16
  5236  000EF6  B4D8               	btfsc	status,2,c
  5237  000EF8  D7A6               	goto	l10359
  5238  000EFA  0A01               	xorlw	1	; case 17
  5239  000EFC  B4D8               	btfsc	status,2,c
  5240  000EFE  D7AC               	goto	l10361
  5241  000F00  D009               	goto	l10371
  5242  000F02                     l11601:
  5243                           
  5244                           ; BSR set to: 0
  5245                           ; Switch size 1, requested type "simple"
  5246                           ; Number of cases is 1, Range of values is 0 to 0
  5247                           ; switch strategies available:
  5248                           ; Name         Instructions Cycles
  5249                           ; simple_byte            4     3 (average)
  5250                           ;	Chosen strategy is simple_byte
  5251  000F02  51DA               	movf	??_read_rx& (0+255),w,b
  5252  000F04  0A00               	xorlw	0	; case 0
  5253  000F06  B4D8               	btfsc	status,2,c
  5254  000F08  D7B0               	goto	l10363
  5255  000F0A  D004               	goto	l10371
  5256  000F0C                     l11603:
  5257                           
  5258                           ; BSR set to: 0
  5259                           ; Switch size 1, requested type "simple"
  5260                           ; Number of cases is 1, Range of values is 0 to 0
  5261                           ; switch strategies available:
  5262                           ; Name         Instructions Cycles
  5263                           ; simple_byte            4     3 (average)
  5264                           ;	Chosen strategy is simple_byte
  5265  000F0C  51DA               	movf	??_read_rx& (0+255),w,b
  5266  000F0E  0A00               	xorlw	0	; case 0
  5267  000F10  B4D8               	btfsc	status,2,c
  5268  000F12  D7B9               	goto	l10365
  5269  000F14                     l10371:
  5270                           
  5271                           ;can.c: 572: };can.c: 573: sdo_index = 0;
  5272  000F14  0E00               	movlw	0
  5273  000F16  0100               	movlb	0	; () banked
  5274  000F18  6F7D               	movwf	(_sdo_index+1)& (0+255),b	;volatile
  5275  000F1A  0E00               	movlw	0
  5276  000F1C  6F7C               	movwf	_sdo_index& (0+255),b	;volatile
  5277  000F1E  D63F               	goto	l10259
  5278  000F20                     l10375:
  5279                           
  5280                           ; BSR set to: 0
  5281  000F20  0E01               	movlw	1
  5282  000F22  6FCC               	movwf	abort_sdo@errorcode& (0+255),b
  5283  000F24  0E00               	movlw	0
  5284  000F26  6FCD               	movwf	(abort_sdo@errorcode+1)& (0+255),b
  5285  000F28  0E04               	movlw	4
  5286  000F2A  6FCE               	movwf	(abort_sdo@errorcode+2)& (0+255),b
  5287  000F2C  0E05               	movlw	5
  5288  000F2E  6FCF               	movwf	(abort_sdo@errorcode+3)& (0+255),b
  5289  000F30  ECB3  F01D         	call	_abort_sdo	;wreg free
  5290                           
  5291                           ;can.c: 585: }
  5292  000F34  D198               	goto	l10491
  5293  000F36                     l10377:
  5294                           
  5295                           ; BSR set to: 1
  5296  000F36  5186               	movf	read_rx@type& (0+255),w,b
  5297  000F38  0BE0               	andlw	224
  5298  000F3A  0100               	movlb	0	; () banked
  5299  000F3C  6FDA               	movwf	??_read_rx& (0+255),b
  5300  000F3E  6BDB               	clrf	(??_read_rx+1)& (0+255),b
  5301                           
  5302                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5303                           ; Switch size 1, requested type "simple"
  5304                           ; Number of cases is 1, Range of values is 0 to 0
  5305                           ; switch strategies available:
  5306                           ; Name         Instructions Cycles
  5307                           ; simple_byte            4     3 (average)
  5308                           ;	Chosen strategy is simple_byte
  5309  000F40  51DB               	movf	(??_read_rx+1)& (0+255),w,b
  5310  000F42  0A00               	xorlw	0	; case 0
  5311  000F44  A4D8               	btfss	status,2,c
  5312  000F46  D7EC               	goto	l10375
  5313                           
  5314                           ; BSR set to: 0
  5315                           ; Switch size 1, requested type "simple"
  5316                           ; Number of cases is 5, Range of values is 0 to 128
  5317                           ; switch strategies available:
  5318                           ; Name         Instructions Cycles
  5319                           ; simple_byte           16     9 (average)
  5320                           ;	Chosen strategy is simple_byte
  5321  000F48  51DA               	movf	??_read_rx& (0+255),w,b
  5322  000F4A  0A00               	xorlw	0	; case 0
  5323  000F4C  B4D8               	btfsc	status,2,c
  5324  000F4E  D49F               	goto	l10199
  5325  000F50  0A20               	xorlw	32	; case 32
  5326  000F52  B4D8               	btfsc	status,2,c
  5327  000F54  EF90  F003         	goto	l10157
  5328  000F58  0A60               	xorlw	96	; case 64
  5329  000F5A  B4D8               	btfsc	status,2,c
  5330  000F5C  D625               	goto	l10263
  5331  000F5E  0A20               	xorlw	32	; case 96
  5332  000F60  B4D8               	btfsc	status,2,c
  5333  000F62  D6CC               	goto	l10299
  5334  000F64  0AE0               	xorlw	224	; case 128
  5335  000F66  B4D8               	btfsc	status,2,c
  5336  000F68  D7D5               	goto	l10371
  5337  000F6A  D7DA               	goto	l10375
  5338  000F6C                     l10379:
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;can.c: 589: i = rx[ro][3];
  5342  000F6C  5183               	movf	_ro& (0+255),w,b	;volatile
  5343  000F6E  0D0A               	mullw	10
  5344  000F70  0EBA               	movlw	low (_rx+3)
  5345  000F72  24F3               	addwf	243,w,c
  5346  000F74  6ED9               	movwf	fsr2l,c
  5347  000F76  0E02               	movlw	high (_rx+3)
  5348  000F78  20F4               	addwfc	prodh,w,c
  5349  000F7A  6EDA               	movwf	fsr2h,c
  5350  000F7C  50DF               	movf	indf2,w,c
  5351  000F7E  0101               	movlb	1	; () banked
  5352  000F80  6F8A               	movwf	read_rx@i& (0+255),b
  5353                           
  5354                           ; BSR set to: 1
  5355                           ;can.c: 590: if ((!i) || (i == node_id))
  5356  000F82  518A               	movf	read_rx@i& (0+255),w,b
  5357  000F84  B4D8               	btfsc	status,2,c
  5358  000F86  D03B               	goto	l10405
  5359                           
  5360                           ; BSR set to: 1
  5361  000F88  0100               	movlb	0	; () banked
  5362  000F8A  519D               	movf	_node_id& (0+255),w,b
  5363  000F8C  0101               	movlb	1	; () banked
  5364  000F8E  198A               	xorwf	read_rx@i& (0+255),w,b
  5365  000F90  B4D8               	btfsc	status,2,c
  5366  000F92  D035               	goto	l10405
  5367  000F94  D168               	goto	l10491
  5368  000F96                     l10385:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;can.c: 595: nmtstate = 0x05;
  5372  000F96  0E05               	movlw	5
  5373  000F98  6F90               	movwf	_nmtstate& (0+255),b
  5374                           
  5375                           ;can.c: 596: break;
  5376  000F9A  D165               	goto	l10491
  5377  000F9C                     l10387:
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;can.c: 599: merker = 0;
  5381  000F9C  0E00               	movlw	0
  5382  000F9E  6F91               	movwf	_merker& (0+255),b
  5383                           
  5384                           ;can.c: 600: CANCON = 0x80;
  5385  000FA0  0E80               	movlw	128
  5386  000FA2  6E6F               	movwf	111,c	;volatile
  5387  000FA4  00FF               	reset		;# 
  5388                           
  5389                           ;can.c: 602: break;
  5390  000FA6  D15F               	goto	l10491
  5391  000FA8                     l10389:
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;can.c: 605: nmtstate = 0xF0;
  5395  000FA8  0EF0               	movlw	240
  5396  000FAA  6F90               	movwf	_nmtstate& (0+255),b
  5397                           
  5398                           ;can.c: 606: display_timer = 6;
  5399  000FAC  0E06               	movlw	6
  5400  000FAE  6F97               	movwf	_display_timer& (0+255),b
  5401                           
  5402                           ;can.c: 607: break;
  5403  000FB0  D15A               	goto	l10491
  5404  000FB2                     l10391:
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;can.c: 610: if(hardware_version == 0)
  5408  000FB2  519A               	movf	_hardware_version& (0+255),w,b
  5409  000FB4  A4D8               	btfss	status,2,c
  5410  000FB6  D00C               	goto	l10395
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;can.c: 611: {;can.c: 612: display[1] = version_uea_G741[1] - '0';
  5414  000FB8  0EF9               	movlw	low (_version_uea_G741+1)
  5415  000FBA  6EF6               	movwf	tblptrl,c
  5416  000FBC  0E7F               	movlw	high (_version_uea_G741+1)
  5417  000FBE  6EF7               	movwf	tblptrh,c
  5418  000FC0                     	if	0	;tblptru may be non-zero
  5419  000FC0                     	endif
  5420  000FC0                     	if	0	;tblptru may be non-zero
  5421  000FC0                     	endif
  5422  000FC0  0008               	tblrd		*
  5423  000FC2  50F5               	movf	tablat,w,c
  5424  000FC4  0FD0               	addlw	208
  5425  000FC6  6F69               	movwf	(_display+1)& (0+255),b	;volatile
  5426                           
  5427                           ;can.c: 613: display[2] = version_uea_G741[3] - '0';
  5428  000FC8  0EFB               	movlw	low (_version_uea_G741+3)
  5429  000FCA  6EF6               	movwf	tblptrl,c
  5430  000FCC  0E7F               	movlw	high (_version_uea_G741+3)
  5431  000FCE  D00B               	goto	L7
  5432  000FD0                     l10395:
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;can.c: 615: else;can.c: 616: {;can.c: 617: display[1] = version_uea_G742[1] - '0';
  5436  000FD0  0EDC               	movlw	low (_version_uea_G742+1)
  5437  000FD2  6EF6               	movwf	tblptrl,c
  5438  000FD4  0E7F               	movlw	high (_version_uea_G742+1)
  5439  000FD6  6EF7               	movwf	tblptrh,c
  5440  000FD8                     	if	0	;tblptru may be non-zero
  5441  000FD8                     	endif
  5442  000FD8                     	if	0	;tblptru may be non-zero
  5443  000FD8                     	endif
  5444  000FD8  0008               	tblrd		*
  5445  000FDA  50F5               	movf	tablat,w,c
  5446  000FDC  0FD0               	addlw	208
  5447  000FDE  6F69               	movwf	(_display+1)& (0+255),b	;volatile
  5448                           
  5449                           ;can.c: 618: display[2] = version_uea_G742[3] - '0';
  5450  000FE0  0EDE               	movlw	low (_version_uea_G742+3)
  5451  000FE2  6EF6               	movwf	tblptrl,c
  5452  000FE4  0E7F               	movlw	high (_version_uea_G742+3)
  5453  000FE6                     L7:
  5454  000FE6  6EF7               	movwf	tblptrh,c
  5455  000FE8                     	if	0	;tblptru may be non-zero
  5456  000FE8                     	endif
  5457  000FE8                     	if	0	;tblptru may be non-zero
  5458  000FE8                     	endif
  5459  000FE8  0008               	tblrd		*
  5460  000FEA  50F5               	movf	tablat,w,c
  5461  000FEC  0FD0               	addlw	208
  5462  000FEE  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;can.c: 619: };can.c: 620: display[0] = 85;
  5466  000FF0  0E55               	movlw	85
  5467  000FF2  6F68               	movwf	_display& (0+255),b	;volatile
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;can.c: 621: scroll = 0;
  5471  000FF4  0E00               	movlw	0
  5472  000FF6  6E25               	movwf	_scroll^0,c
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;can.c: 622: heartbeat = 4;
  5476  000FF8  0E04               	movlw	4
  5477  000FFA  6F8C               	movwf	_heartbeat& (0+255),b
  5478                           
  5479                           ;can.c: 623: break;
  5480  000FFC  D134               	goto	l10491
  5481  000FFE                     l10405:
  5482                           
  5483                           ; BSR set to: 1
  5484  000FFE  0100               	movlb	0	; () banked
  5485  001000  5183               	movf	_ro& (0+255),w,b	;volatile
  5486  001002  0D0A               	mullw	10
  5487  001004  0EB9               	movlw	low (_rx+2)
  5488  001006  24F3               	addwf	243,w,c
  5489  001008  6ED9               	movwf	fsr2l,c
  5490  00100A  0E02               	movlw	high (_rx+2)
  5491  00100C  20F4               	addwfc	prodh,w,c
  5492  00100E  6EDA               	movwf	fsr2h,c
  5493  001010  50DF               	movf	indf2,w,c
  5494                           
  5495                           ; Switch size 1, requested type "simple"
  5496                           ; Number of cases is 7, Range of values is 1 to 242
  5497                           ; switch strategies available:
  5498                           ; Name         Instructions Cycles
  5499                           ; simple_byte           22    12 (average)
  5500                           ;	Chosen strategy is simple_byte
  5501  001012  0A01               	xorlw	1	; case 1
  5502  001014  B4D8               	btfsc	status,2,c
  5503  001016  D7BF               	goto	l10385
  5504  001018  0A03               	xorlw	3	; case 2
  5505  00101A  B4D8               	btfsc	status,2,c
  5506  00101C  D124               	goto	l10491
  5507  00101E  0A82               	xorlw	130	; case 128
  5508  001020  B4D8               	btfsc	status,2,c
  5509  001022  D121               	goto	l10491
  5510  001024  0A01               	xorlw	1	; case 129
  5511  001026  B4D8               	btfsc	status,2,c
  5512  001028  D7B9               	goto	l10387
  5513  00102A  0A03               	xorlw	3	; case 130
  5514  00102C  B4D8               	btfsc	status,2,c
  5515  00102E  D11B               	goto	l10491
  5516  001030  0A72               	xorlw	114	; case 240
  5517  001032  B4D8               	btfsc	status,2,c
  5518  001034  D7B9               	goto	l10389
  5519  001036  0A02               	xorlw	2	; case 242
  5520  001038  B4D8               	btfsc	status,2,c
  5521  00103A  D7BB               	goto	l10391
  5522  00103C  D114               	goto	l10491
  5523  00103E                     l10407:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;can.c: 634: if (0x65 == rx[ro][1])
  5527  00103E  5183               	movf	_ro& (0+255),w,b	;volatile
  5528  001040  0D0A               	mullw	10
  5529  001042  0EB8               	movlw	low (_rx+1)
  5530  001044  24F3               	addwf	243,w,c
  5531  001046  6ED9               	movwf	fsr2l,c
  5532  001048  0E02               	movlw	high (_rx+1)
  5533  00104A  20F4               	addwfc	prodh,w,c
  5534  00104C  6EDA               	movwf	fsr2h,c
  5535  00104E  0E65               	movlw	101
  5536  001050  18DE               	xorwf	postinc2,w,c
  5537  001052  A4D8               	btfss	status,2,c
  5538  001054  D108               	goto	l10491
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;can.c: 635: {;can.c: 636: type = rx[ro][2];
  5542  001056  5183               	movf	_ro& (0+255),w,b	;volatile
  5543  001058  0D0A               	mullw	10
  5544  00105A  0EB9               	movlw	low (_rx+2)
  5545  00105C  24F3               	addwf	243,w,c
  5546  00105E  6ED9               	movwf	fsr2l,c
  5547  001060  0E02               	movlw	high (_rx+2)
  5548  001062  20F4               	addwfc	prodh,w,c
  5549  001064  6EDA               	movwf	fsr2h,c
  5550  001066  50DF               	movf	indf2,w,c
  5551  001068  0101               	movlb	1	; () banked
  5552  00106A  6F86               	movwf	read_rx@type& (0+255),b
  5553                           
  5554                           ;can.c: 637: switch (type)
  5555  00106C  D084               	goto	l10457
  5556  00106E                     l10411:
  5557                           
  5558                           ; BSR set to: 1
  5559                           ;can.c: 640: setid_mode = 2;
  5560  00106E  0E02               	movlw	2
  5561  001070  0100               	movlb	0	; () banked
  5562  001072  6F9B               	movwf	_setid_mode& (0+255),b
  5563                           
  5564                           ;can.c: 641: setid_mode_old = 0;
  5565  001074  0E00               	movlw	0
  5566  001076  6F9C               	movwf	_setid_mode_old& (0+255),b
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;can.c: 642: node_id = rx[ro][3];
  5570  001078  5183               	movf	_ro& (0+255),w,b	;volatile
  5571  00107A  0D0A               	mullw	10
  5572  00107C  0EBA               	movlw	low (_rx+3)
  5573  00107E  24F3               	addwf	243,w,c
  5574  001080  6ED9               	movwf	fsr2l,c
  5575  001082  0E02               	movlw	high (_rx+3)
  5576  001084  20F4               	addwfc	prodh,w,c
  5577  001086  6EDA               	movwf	fsr2h,c
  5578  001088  50DF               	movf	indf2,w,c
  5579  00108A  6F9D               	movwf	_node_id& (0+255),b
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;can.c: 643: id_buff[0] = rx[ro][6];
  5583  00108C  5183               	movf	_ro& (0+255),w,b	;volatile
  5584  00108E  0D0A               	mullw	10
  5585  001090  0EBD               	movlw	low (_rx+6)
  5586  001092  24F3               	addwf	243,w,c
  5587  001094  6ED9               	movwf	fsr2l,c
  5588  001096  0E02               	movlw	high (_rx+6)
  5589  001098  20F4               	addwfc	prodh,w,c
  5590  00109A  6EDA               	movwf	fsr2h,c
  5591  00109C  50DF               	movf	indf2,w,c
  5592  00109E  6F6C               	movwf	_id_buff& (0+255),b
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;can.c: 644: id_buff[1] = rx[ro][4];
  5596  0010A0  5183               	movf	_ro& (0+255),w,b	;volatile
  5597  0010A2  0D0A               	mullw	10
  5598  0010A4  0EBB               	movlw	low (_rx+4)
  5599  0010A6  24F3               	addwf	243,w,c
  5600  0010A8  6ED9               	movwf	fsr2l,c
  5601  0010AA  0E02               	movlw	high (_rx+4)
  5602  0010AC  20F4               	addwfc	prodh,w,c
  5603  0010AE  6EDA               	movwf	fsr2h,c
  5604  0010B0  50DF               	movf	indf2,w,c
  5605  0010B2  6F6D               	movwf	(_id_buff+1)& (0+255),b
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;can.c: 645: id_buff[2] = rx[ro][5];
  5609  0010B4  5183               	movf	_ro& (0+255),w,b	;volatile
  5610  0010B6  0D0A               	mullw	10
  5611  0010B8  0EBC               	movlw	low (_rx+5)
  5612  0010BA  24F3               	addwf	243,w,c
  5613  0010BC  6ED9               	movwf	fsr2l,c
  5614  0010BE  0E02               	movlw	high (_rx+5)
  5615  0010C0  20F4               	addwfc	prodh,w,c
  5616  0010C2  6EDA               	movwf	fsr2h,c
  5617  0010C4  50DF               	movf	indf2,w,c
  5618  0010C6  6F6E               	movwf	(_id_buff+2)& (0+255),b
  5619                           
  5620                           ;can.c: 646: if(hardware_version == 0)
  5621  0010C8  519A               	movf	_hardware_version& (0+255),w,b
  5622  0010CA  A4D8               	btfss	status,2,c
  5623  0010CC  D003               	goto	l10423
  5624  0010CE                     u13240:
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;can.c: 647: id_buff[0] = 85;
  5628  0010CE  0E55               	movlw	85
  5629  0010D0  6F6C               	movwf	_id_buff& (0+255),b
  5630  0010D2  D004               	goto	l10427
  5631  0010D4                     l10423:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;can.c: 648: else if (id_buff[0] <= 0x20)
  5635  0010D4  0E21               	movlw	33
  5636  0010D6  616C               	cpfslt	_id_buff& (0+255),b
  5637  0010D8  D001               	goto	l10427
  5638  0010DA  D7F9               	goto	u13240
  5639  0010DC                     l10427:
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;can.c: 650: if (id_buff[1] <= 0x20)
  5643  0010DC  0E21               	movlw	33
  5644  0010DE  616D               	cpfslt	(_id_buff+1)& (0+255),b
  5645  0010E0  D002               	goto	l10431
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;can.c: 651: id_buff[1] = 85 + '0';
  5649  0010E2  0E85               	movlw	133
  5650  0010E4  6F6D               	movwf	(_id_buff+1)& (0+255),b
  5651  0010E6                     l10431:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;can.c: 652: if (id_buff[2] <= 0x20)
  5655  0010E6  0E21               	movlw	33
  5656  0010E8  616E               	cpfslt	(_id_buff+2)& (0+255),b
  5657  0010EA  D0BD               	goto	l10491
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;can.c: 653: id_buff[2] = 85 + '0';
  5661  0010EC  0E85               	movlw	133
  5662  0010EE  D02E               	goto	L9
  5663  0010F0                     l10435:
  5664                           
  5665                           ; BSR set to: 1
  5666                           ;can.c: 657: setid_mode = 3;
  5667  0010F0  0E03               	movlw	3
  5668  0010F2  0100               	movlb	0	; () banked
  5669  0010F4  6F9B               	movwf	_setid_mode& (0+255),b
  5670                           
  5671                           ;can.c: 658: disp_id = 0;
  5672  0010F6  0E00               	movlw	0
  5673  0010F8  6F9E               	movwf	_disp_id& (0+255),b
  5674                           
  5675                           ;can.c: 659: id_buff[0] = 85;
  5676  0010FA  0E55               	movlw	85
  5677  0010FC  6F6C               	movwf	_id_buff& (0+255),b
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;can.c: 660: if (node_id >= 0x10 && (node_id < 0x10 + 110))
  5681  0010FE  0E0F               	movlw	15
  5682  001100  659D               	cpfsgt	_node_id& (0+255),b
  5683  001102  D021               	goto	l10443
  5684                           
  5685                           ; BSR set to: 0
  5686  001104  0E7E               	movlw	126
  5687  001106  619D               	cpfslt	_node_id& (0+255),b
  5688  001108  D01E               	goto	l10443
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;can.c: 661: {;can.c: 662: id_buff[1] = ((node_id - 0x10 + 1) / 10) + '0';
  5692  00110A  0EF1               	movlw	241
  5693  00110C  259D               	addwf	_node_id& (0+255),w,b
  5694  00110E  6FC6               	movwf	___awdiv@dividend& (0+255),b
  5695  001110  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
  5696  001112  0EFF               	movlw	255
  5697  001114  23C7               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  5698  001116  0E00               	movlw	0
  5699  001118  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
  5700  00111A  0E0A               	movlw	10
  5701  00111C  6FC8               	movwf	___awdiv@divisor& (0+255),b
  5702  00111E  ECE5  F01F         	call	___awdiv	;wreg free
  5703  001122  51C6               	movf	?___awdiv& (0+255),w,b
  5704  001124  0F30               	addlw	48
  5705  001126  6F6D               	movwf	(_id_buff+1)& (0+255),b
  5706                           
  5707                           ;can.c: 663: id_buff[2] = ((node_id - 0x10 + 1) % 10) + '0';
  5708  001128  0EF1               	movlw	241
  5709  00112A  259D               	addwf	_node_id& (0+255),w,b
  5710  00112C  6FCE               	movwf	___awmod@dividend& (0+255),b
  5711  00112E  6BCF               	clrf	(___awmod@dividend+1)& (0+255),b
  5712  001130  0EFF               	movlw	255
  5713  001132  23CF               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5714  001134  0E00               	movlw	0
  5715  001136  6FD1               	movwf	(___awmod@divisor+1)& (0+255),b
  5716  001138  0E0A               	movlw	10
  5717  00113A  6FD0               	movwf	___awmod@divisor& (0+255),b
  5718  00113C  EC62  F020         	call	___awmod	;wreg free
  5719  001140  51CE               	movf	?___awmod& (0+255),w,b
  5720  001142  0F30               	addlw	48
  5721  001144  D003               	goto	L9
  5722  001146                     l10443:
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;can.c: 665: else;can.c: 666: {;can.c: 667: id_buff[1] = 37 + '0';
  5726  001146  0E55               	movlw	85
  5727  001148  6F6D               	movwf	(_id_buff+1)& (0+255),b
  5728                           
  5729                           ;can.c: 668: id_buff[2] = 37 + '0';
  5730  00114A  0E55               	movlw	85
  5731  00114C                     L9:
  5732  00114C  6F6E               	movwf	(_id_buff+2)& (0+255),b
  5733  00114E  D08B               	goto	l10491
  5734  001150                     l10445:
  5735                           
  5736                           ; BSR set to: 1
  5737                           ;can.c: 673: setid_mode = 4;
  5738  001150  0E04               	movlw	4
  5739  001152  0100               	movlb	0	; () banked
  5740  001154  D00C               	goto	L10
  5741  001156                     l10447:
  5742                           
  5743                           ; BSR set to: 1
  5744                           ;can.c: 678: merker = 0xA5;
  5745  001156  0EA5               	movlw	165
  5746  001158  0100               	movlb	0	; () banked
  5747  00115A  6F91               	movwf	_merker& (0+255),b
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;can.c: 679: if(setid_mode == 2)
  5751  00115C  0E02               	movlw	2
  5752  00115E  199B               	xorwf	_setid_mode& (0+255),w,b
  5753  001160  A4D8               	btfss	status,2,c
  5754  001162  D004               	goto	l1077
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;can.c: 680: {;can.c: 681: nmtstate = 0x7F;
  5758  001164  0E7F               	movlw	127
  5759  001166  6F90               	movwf	_nmtstate& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;can.c: 682: node_id = preset_node_id;
  5763  001168  C094  F09D         	movff	_preset_node_id,_node_id
  5764  00116C                     l1077:
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;can.c: 683: };can.c: 684: setid_mode = 0;
  5768  00116C  0E00               	movlw	0
  5769  00116E                     L10:
  5770  00116E  6F9B               	movwf	_setid_mode& (0+255),b
  5771                           
  5772                           ;can.c: 685: setid_mode_old = 0;
  5773  001170  0E00               	movlw	0
  5774  001172  6F9C               	movwf	_setid_mode_old& (0+255),b
  5775                           
  5776                           ;can.c: 686: break;
  5777  001174  D078               	goto	l10491
  5778  001176                     l10457:
  5779                           
  5780                           ; BSR set to: 1
  5781  001176  5186               	movf	read_rx@type& (0+255),w,b
  5782                           
  5783                           ; Switch size 1, requested type "simple"
  5784                           ; Number of cases is 4, Range of values is 17 to 20
  5785                           ; switch strategies available:
  5786                           ; Name         Instructions Cycles
  5787                           ; simple_byte           13     7 (average)
  5788                           ;	Chosen strategy is simple_byte
  5789  001178  0A11               	xorlw	17	; case 17
  5790  00117A  B4D8               	btfsc	status,2,c
  5791  00117C  D778               	goto	l10411
  5792  00117E  0A03               	xorlw	3	; case 18
  5793  001180  B4D8               	btfsc	status,2,c
  5794  001182  D7B6               	goto	l10435
  5795  001184  0A01               	xorlw	1	; case 19
  5796  001186  B4D8               	btfsc	status,2,c
  5797  001188  D7E6               	goto	l10447
  5798  00118A  0A07               	xorlw	7	; case 20
  5799  00118C  B4D8               	btfsc	status,2,c
  5800  00118E  D7E0               	goto	l10445
  5801  001190  D06A               	goto	l10491
  5802  001192                     l10459:
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;can.c: 693: sub = rx [ro][1];
  5806  001192  5183               	movf	_ro& (0+255),w,b	;volatile
  5807  001194  0D0A               	mullw	10
  5808  001196  0EB8               	movlw	low (_rx+1)
  5809  001198  24F3               	addwf	243,w,c
  5810  00119A  6ED9               	movwf	fsr2l,c
  5811  00119C  0E02               	movlw	high (_rx+1)
  5812  00119E  20F4               	addwfc	prodh,w,c
  5813  0011A0  6EDA               	movwf	fsr2h,c
  5814  0011A2  50DF               	movf	indf2,w,c
  5815  0011A4  0101               	movlb	1	; () banked
  5816  0011A6  6F81               	movwf	read_rx@sub& (0+255),b
  5817                           
  5818                           ;can.c: 694: type = rx [ro][2];
  5819  0011A8  0100               	movlb	0	; () banked
  5820  0011AA  5183               	movf	_ro& (0+255),w,b	;volatile
  5821  0011AC  0D0A               	mullw	10
  5822  0011AE  0EB9               	movlw	low (_rx+2)
  5823  0011B0  24F3               	addwf	243,w,c
  5824  0011B2  6ED9               	movwf	fsr2l,c
  5825  0011B4  0E02               	movlw	high (_rx+2)
  5826  0011B6  20F4               	addwfc	prodh,w,c
  5827  0011B8  6EDA               	movwf	fsr2h,c
  5828  0011BA  50DF               	movf	indf2,w,c
  5829  0011BC  0101               	movlb	1	; () banked
  5830  0011BE  6F86               	movwf	read_rx@type& (0+255),b
  5831                           
  5832                           ; BSR set to: 1
  5833                           ;can.c: 695: if((sub == 0x0B) && (type == 0))
  5834  0011C0  0E0B               	movlw	11
  5835  0011C2  1981               	xorwf	read_rx@sub& (0+255),w,b
  5836  0011C4  A4D8               	btfss	status,2,c
  5837  0011C6  D04F               	goto	l10491
  5838                           
  5839                           ; BSR set to: 1
  5840  0011C8  5186               	movf	read_rx@type& (0+255),w,b
  5841  0011CA  A4D8               	btfss	status,2,c
  5842  0011CC  D04C               	goto	l10491
  5843                           
  5844                           ; BSR set to: 1
  5845                           ;can.c: 696: {;can.c: 697: for(i = 0; i < 8; i++)
  5846  0011CE  0E00               	movlw	0
  5847  0011D0  6F8A               	movwf	read_rx@i& (0+255),b
  5848  0011D2                     l10471:
  5849                           
  5850                           ; BSR set to: 1
  5851                           ;can.c: 698: recei_monitor[i] = rx [ro][2 + i];
  5852  0011D2  0100               	movlb	0	; () banked
  5853  0011D4  5183               	movf	_ro& (0+255),w,b	;volatile
  5854  0011D6  0D0A               	mullw	10
  5855  0011D8  0EB7               	movlw	low _rx
  5856  0011DA  6FDA               	movwf	??_read_rx& (0+255),b
  5857  0011DC  0E02               	movlw	high _rx
  5858  0011DE  6FDB               	movwf	(??_read_rx+1)& (0+255),b
  5859  0011E0  0E02               	movlw	2
  5860  0011E2  27DA               	addwf	??_read_rx& (0+255),f,b
  5861  0011E4  0E00               	movlw	0
  5862  0011E6  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  5863  0011E8  50F3               	movf	243,w,c
  5864  0011EA  27DA               	addwf	??_read_rx& (0+255),f,b
  5865  0011EC  50F4               	movf	244,w,c
  5866  0011EE  23DB               	addwfc	(??_read_rx+1)& (0+255),f,b
  5867  0011F0  0101               	movlb	1	; () banked
  5868  0011F2  518A               	movf	read_rx@i& (0+255),w,b
  5869  0011F4  0100               	movlb	0	; () banked
  5870  0011F6  25DA               	addwf	??_read_rx& (0+255),w,b
  5871  0011F8  6ED9               	movwf	fsr2l,c
  5872  0011FA  0101               	movlb	1	; () banked
  5873  0011FC  0E00               	movlw	0
  5874  0011FE  0100               	movlb	0	; () banked
  5875  001200  21DB               	addwfc	(??_read_rx+1)& (0+255),w,b
  5876  001202  6EDA               	movwf	fsr2h,c
  5877  001204  0101               	movlb	1	; () banked
  5878  001206  518A               	movf	read_rx@i& (0+255),w,b
  5879  001208  0F60               	addlw	low _recei_monitor
  5880  00120A  6EE1               	movwf	fsr1l,c
  5881  00120C  6AE2               	clrf	fsr1h,c
  5882  00120E  CFDF FFE7          	movff	indf2,indf1
  5883                           
  5884                           ; BSR set to: 1
  5885  001212  2B8A               	incf	read_rx@i& (0+255),f,b
  5886                           
  5887                           ; BSR set to: 1
  5888  001214  0E07               	movlw	7
  5889  001216  658A               	cpfsgt	read_rx@i& (0+255),b
  5890  001218  D7DC               	goto	l10471
  5891                           
  5892                           ; BSR set to: 1
  5893                           ;can.c: 699: if(recei_monitor[7] & 0x80)
  5894  00121A  0100               	movlb	0	; () banked
  5895  00121C  AF67               	btfss	(_recei_monitor+7)& (0+255),7,b
  5896  00121E  D002               	goto	l10479
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;can.c: 700: display[3] |= 0x02;
  5900  001220  836B               	bsf	(_display+3)& (0+255),1,b	;volatile
  5901  001222  D001               	goto	l10481
  5902  001224                     l10479:
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;can.c: 701: else;can.c: 702: display[3] &= ~0x02;
  5906  001224  936B               	bcf	(_display+3)& (0+255),1,b	;volatile
  5907  001226                     l10481:
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;can.c: 703: if(recei_monitor[7] & 0x01)
  5911  001226  A167               	btfss	(_recei_monitor+7)& (0+255),0,b
  5912  001228  D002               	goto	l10485
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;can.c: 704: display[3] |= 0x01;
  5916  00122A  816B               	bsf	(_display+3)& (0+255),0,b	;volatile
  5917  00122C  D01C               	goto	l10491
  5918  00122E                     l10485:
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;can.c: 705: else;can.c: 706: display[3] &= ~0x01;
  5922  00122E  916B               	bcf	(_display+3)& (0+255),0,b	;volatile
  5923  001230  D01A               	goto	l10491
  5924  001232                     l10489:
  5925                           
  5926                           ; BSR set to: 0
  5927  001232  5183               	movf	_ro& (0+255),w,b	;volatile
  5928  001234  0D0A               	mullw	10
  5929  001236  0EB7               	movlw	low _rx
  5930  001238  24F3               	addwf	243,w,c
  5931  00123A  6ED9               	movwf	fsr2l,c
  5932  00123C  0E02               	movlw	high _rx
  5933  00123E  20F4               	addwfc	prodh,w,c
  5934  001240  6EDA               	movwf	fsr2h,c
  5935  001242  50DF               	movf	indf2,w,c
  5936                           
  5937                           ; Switch size 1, requested type "simple"
  5938                           ; Number of cases is 5, Range of values is 0 to 240
  5939                           ; switch strategies available:
  5940                           ; Name         Instructions Cycles
  5941                           ; simple_byte           16     9 (average)
  5942                           ;	Chosen strategy is simple_byte
  5943  001244  0A00               	xorlw	0	; case 0
  5944  001246  B4D8               	btfsc	status,2,c
  5945  001248  D691               	goto	l10379
  5946  00124A  0A80               	xorlw	128	; case 128
  5947  00124C  B4D8               	btfsc	status,2,c
  5948  00124E  EF32  F003         	goto	l10135
  5949  001252  0A20               	xorlw	32	; case 160
  5950  001254  B4D8               	btfsc	status,2,c
  5951  001256  D79D               	goto	l10459
  5952  001258  0A60               	xorlw	96	; case 192
  5953  00125A  B4D8               	btfsc	status,2,c
  5954  00125C  EF83  F003         	goto	l10155
  5955  001260  0A30               	xorlw	48	; case 240
  5956  001262  B4D8               	btfsc	status,2,c
  5957  001264  D6EC               	goto	l10407
  5958  001266                     l10491:
  5959                           
  5960                           ;can.c: 711: if (ro == (30-1))
  5961  001266  0E1D               	movlw	29
  5962  001268  0100               	movlb	0	; () banked
  5963  00126A  1983               	xorwf	_ro& (0+255),w,b	;volatile
  5964  00126C  A4D8               	btfss	status,2,c
  5965  00126E  D003               	goto	l10495
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;can.c: 712: ro = 0;
  5969  001270  0E00               	movlw	0
  5970  001272  6F83               	movwf	_ro& (0+255),b	;volatile
  5971  001274  D001               	goto	l1087
  5972  001276                     l10495:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;can.c: 713: else;can.c: 714: ro++;
  5976  001276  2B83               	incf	_ro& (0+255),f,b	;volatile
  5977  001278                     l1087:
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;can.c: 715: rc--;
  5981  001278  0792               	decf	_rc& (0+255),f,b	;volatile
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;can.c: 716: INTCONbits.GIEH = 0;
  5985  00127A  9EF2               	bcf	242,7,c	;volatile
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;can.c: 717: i = ri;
  5989  00127C  C00C  F18A         	movff	_ri,read_rx@i	;volatile
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;can.c: 718: size = rc;
  5993  001280  C092  F180         	movff	_rc,read_rx@size	;volatile
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;can.c: 719: INTCONbits.GIEH = 1;
  5997  001284  8EF2               	bsf	242,7,c	;volatile
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;can.c: 720: if (i < ro)
  6001  001286  5183               	movf	_ro& (0+255),w,b	;volatile
  6002  001288  0101               	movlb	1	; () banked
  6003  00128A  5D8A               	subwf	read_rx@i& (0+255),w,b
  6004  00128C  B0D8               	btfsc	status,0,c
  6005  00128E  D002               	goto	l10509
  6006                           
  6007                           ; BSR set to: 1
  6008                           ;can.c: 721: i += 30;
  6009  001290  0E1E               	movlw	30
  6010  001292  278A               	addwf	read_rx@i& (0+255),f,b
  6011  001294                     l10509:
  6012                           
  6013                           ; BSR set to: 1
  6014                           ;can.c: 722: if ((i - ro) != (size % 30))
  6015  001294  0E1E               	movlw	30
  6016  001296  0100               	movlb	0	; () banked
  6017  001298  6FC6               	movwf	___lbmod@divisor& (0+255),b
  6018  00129A  0101               	movlb	1	; () banked
  6019  00129C  5180               	movf	read_rx@size& (0+255),w,b
  6020  00129E  ECAB  F021         	call	___lbmod
  6021  0012A2  6FDA               	movwf	??_read_rx& (0+255),b
  6022  0012A4  6BDB               	clrf	(??_read_rx+1)& (0+255),b
  6023  0012A6  5183               	movf	_ro& (0+255),w,b	;volatile
  6024  0012A8  C18A  F0DC         	movff	read_rx@i,??_read_rx+2
  6025  0012AC  6BDD               	clrf	(??_read_rx+3)& (0+255),b
  6026  0012AE  5FDC               	subwf	(??_read_rx+2)& (0+255),f,b
  6027  0012B0  0E00               	movlw	0
  6028  0012B2  5BDD               	subwfb	(??_read_rx+3)& (0+255),f,b
  6029  0012B4  51DA               	movf	??_read_rx& (0+255),w,b
  6030  0012B6  19DC               	xorwf	(??_read_rx+2)& (0+255),w,b
  6031  0012B8  E104               	bnz	u13380
  6032  0012BA  51DB               	movf	(??_read_rx+1)& (0+255),w,b
  6033  0012BC  19DD               	xorwf	(??_read_rx+3)& (0+255),w,b
  6034  0012BE  B4D8               	btfsc	status,2,c
  6035  0012C0  0012               	return	
  6036  0012C2                     u13380:
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;can.c: 723: {;can.c: 724: merker = 0x5A;
  6040  0012C2  0E5A               	movlw	90
  6041  0012C4  6F91               	movwf	_merker& (0+255),b
  6042  0012C6  00FF               	reset		;# 
  6043  0012C8  0012               	return		;funcret
  6044  0012CA                     __end_of_read_rx:
  6045                           	callstack 0
  6046                           
  6047 ;; *************** function _write_dict *****************
  6048 ;; Defined at:
  6049 ;;		line 81 in file "../../src/dict.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  pos             1    wreg     unsigned char 
  6052 ;;  subindex        1   10[BANK0 ] unsigned char 
  6053 ;;  value           4   11[BANK0 ] unsigned long 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  pos             1   25[BANK0 ] unsigned char 
  6056 ;;  i               1   24[BANK0 ] unsigned char 
  6057 ;;  size            1   23[BANK0 ] unsigned char 
  6058 ;;  j               1   22[BANK0 ] unsigned char 
  6059 ;;  address         1   21[BANK0 ] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      unsigned char 
  6062 ;; Registers used:
  6063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6064 ;; Tracked objects:
  6065 ;;		On entry : 3F/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6069 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6070 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6071 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6072 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6073 ;;Total ram usage:       16 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    3
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_read_rx
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text5
  6084  0026D2                     __ptext5:
  6085                           	callstack 0
  6086  0026D2                     _write_dict:
  6087                           	callstack 26
  6088                           
  6089                           ;incstack = 0
  6090                           ;write_dict@pos stored from wreg
  6091  0026D2  6FD5               	movwf	write_dict@pos& (0+255),b
  6092                           
  6093                           ;dict.c: 82: BYTE i;;dict.c: 83: BYTE j;;dict.c: 84: BYTE address;;dict.c: 85: BYTE size
      +                          ;;dict.c: 87: size = dict[pos].size;
  6094  0026D4  0100               	movlb	0	; () banked
  6095  0026D6  51D5               	movf	write_dict@pos& (0+255),w,b
  6096  0026D8  0D07               	mullw	7
  6097  0026DA  0E04               	movlw	4
  6098  0026DC  26F3               	addwf	243,f,c
  6099  0026DE  0E00               	movlw	0
  6100  0026E0  22F4               	addwfc	244,f,c
  6101  0026E2  0EAC               	movlw	low _dict
  6102  0026E4  24F3               	addwf	243,w,c
  6103  0026E6  6EF6               	movwf	tblptrl,c
  6104  0026E8  0E7E               	movlw	high _dict
  6105  0026EA  20F4               	addwfc	244,w,c
  6106  0026EC  6EF7               	movwf	tblptrh,c
  6107  0026EE                     	if	0	;There are less than 3 active tblptr bytes
  6108  0026EE                     	endif
  6109  0026EE  0008               	tblrd		*
  6110  0026F0  CFF5 F0D3          	movff	tablat,write_dict@size
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;dict.c: 89: if (subindex)
  6114  0026F4  51C6               	movf	write_dict@subindex& (0+255),w,b
  6115  0026F6  B4D8               	btfsc	status,2,c
  6116  0026F8  D005               	goto	l9441
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;dict.c: 90: address = (subindex - 1) * size;
  6120  0026FA  05C6               	decf	write_dict@subindex& (0+255),w,b
  6121  0026FC  03D3               	mulwf	write_dict@size& (0+255),b
  6122  0026FE  CFF3 F0D1          	movff	prodl,write_dict@address
  6123  002702  D199               	goto	l9489
  6124  002704                     l9441:
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;dict.c: 91: else;dict.c: 92: address = 0;
  6128  002704  0E00               	movlw	0
  6129  002706  6FD1               	movwf	write_dict@address& (0+255),b
  6130  002708  D196               	goto	l9489
  6131  00270A                     l9443:
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;dict.c: 96: case (0x6260):;dict.c: 97: i = *((BYTE *)dict[pos].pointer);
  6135  00270A  51D5               	movf	write_dict@pos& (0+255),w,b
  6136  00270C  0D07               	mullw	7
  6137  00270E  0E05               	movlw	5
  6138  002710  26F3               	addwf	243,f,c
  6139  002712  0E00               	movlw	0
  6140  002714  22F4               	addwfc	244,f,c
  6141  002716  0EAC               	movlw	low _dict
  6142  002718  24F3               	addwf	243,w,c
  6143  00271A  6EF6               	movwf	tblptrl,c
  6144  00271C  0E7E               	movlw	high _dict
  6145  00271E  20F4               	addwfc	244,w,c
  6146  002720  6EF7               	movwf	tblptrh,c
  6147  002722                     	if	0	;There are less than 3 active tblptr bytes
  6148  002722                     	endif
  6149  002722  0009               	tblrd		*+
  6150  002724  CFF5 F0CB          	movff	tablat,??_write_dict
  6151  002728  0009               	tblrd		*+
  6152  00272A  CFF5 F0CC          	movff	tablat,??_write_dict+1
  6153  00272E  C0CB  FFF6         	movff	??_write_dict,tblptrl
  6154  002732  C0CC  FFF7         	movff	??_write_dict+1,tblptrh
  6155  002736  6AF8               	clrf	tblptru,c
  6156  002738  0E0E               	movlw	(high __ramtop+-1)
  6157  00273A  64F7               	cpfsgt	tblptrh,c
  6158  00273C  D003               	bra	u11697
  6159  00273E  0008               	tblrd		*
  6160  002740  50F5               	movf	tablat,w,c
  6161  002742  D005               	bra	u11690
  6162  002744                     u11697:
  6163  002744  CFF6 FFE1          	movff	tblptrl,fsr1l
  6164  002748  CFF7 FFE2          	movff	tblptrh,fsr1h
  6165  00274C  50E7               	movf	indf1,w,c
  6166  00274E                     u11690:
  6167  00274E  0100               	movlb	0	; () banked
  6168  002750  6FD4               	movwf	write_dict@i& (0+255),b
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;dict.c: 98: j = (value >> 15) & 1;
  6172  002752  C0C7  F0CB         	movff	write_dict@value,??_write_dict
  6173  002756  C0C8  F0CC         	movff	write_dict@value+1,??_write_dict+1
  6174  00275A  C0C9  F0CD         	movff	write_dict@value+2,??_write_dict+2
  6175  00275E  C0CA  F0CE         	movff	write_dict@value+3,??_write_dict+3
  6176  002762  0E10               	movlw	16
  6177  002764  D005               	goto	u11700
  6178  002766                     u11705:
  6179  002766  90D8               	bcf	status,0,c
  6180  002768  33CE               	rrcf	(??_write_dict+3)& (0+255),f,b
  6181  00276A  33CD               	rrcf	(??_write_dict+2)& (0+255),f,b
  6182  00276C  33CC               	rrcf	(??_write_dict+1)& (0+255),f,b
  6183  00276E  33CB               	rrcf	??_write_dict& (0+255),f,b
  6184  002770                     u11700:
  6185  002770  2EE8               	decfsz	wreg,f,c
  6186  002772  D7F9               	goto	u11705
  6187  002774  51CB               	movf	??_write_dict& (0+255),w,b
  6188  002776  0B01               	andlw	1
  6189  002778  6FD2               	movwf	write_dict@j& (0+255),b
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;dict.c: 99: if (((i >> (subindex - 1)) & 1) != j)
  6193  00277A  C0C6  F0CB         	movff	write_dict@subindex,??_write_dict
  6194  00277E  0EFF               	movlw	-1
  6195  002780  27CB               	addwf	??_write_dict& (0+255),f,b
  6196  002782  C0D4  F0CC         	movff	write_dict@i,??_write_dict+1
  6197  002786  2BCB               	incf	??_write_dict& (0+255),f,b
  6198  002788  D002               	goto	u11714
  6199  00278A                     u11715:
  6200  00278A  90D8               	bcf	status,0,c
  6201  00278C  33CC               	rrcf	(??_write_dict+1)& (0+255),f,b
  6202  00278E                     u11714:
  6203  00278E  2FCB               	decfsz	??_write_dict& (0+255),f,b
  6204  002790  D7FC               	goto	u11715
  6205  002792  0100               	movlb	0	; () banked
  6206  002794  51CC               	movf	(??_write_dict+1)& (0+255),w,b
  6207  002796  0B01               	andlw	1
  6208  002798  19D2               	xorwf	write_dict@j& (0+255),w,b
  6209  00279A  B4D8               	btfsc	status,2,c
  6210  00279C  D023               	goto	l9455
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;dict.c: 100: {;dict.c: 101: if (j)
  6214  00279E  51D2               	movf	write_dict@j& (0+255),w,b
  6215  0027A0  B4D8               	btfsc	status,2,c
  6216  0027A2  D010               	goto	l9453
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;dict.c: 102: (i |= (1 << subindex - 1));
  6220  0027A4  C0C6  F0CB         	movff	write_dict@subindex,??_write_dict
  6221  0027A8  0EFF               	movlw	-1
  6222  0027AA  27CB               	addwf	??_write_dict& (0+255),f,b
  6223  0027AC  0E01               	movlw	1
  6224  0027AE  6FCC               	movwf	(??_write_dict+1)& (0+255),b
  6225  0027B0  2BCB               	incf	??_write_dict& (0+255),f,b
  6226  0027B2  D002               	goto	u11744
  6227  0027B4                     u11745:
  6228  0027B4  90D8               	bcf	status,0,c
  6229  0027B6  37CC               	rlcf	(??_write_dict+1)& (0+255),f,b
  6230  0027B8                     u11744:
  6231  0027B8  2FCB               	decfsz	??_write_dict& (0+255),f,b
  6232  0027BA  D7FC               	goto	u11745
  6233  0027BC  0100               	movlb	0	; () banked
  6234  0027BE  51CC               	movf	(??_write_dict+1)& (0+255),w,b
  6235  0027C0  13D4               	iorwf	write_dict@i& (0+255),f,b
  6236  0027C2  D010               	goto	l9455
  6237  0027C4                     l9453:
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;dict.c: 103: else;dict.c: 104: (i &= ~(1 << subindex - 1));
  6241  0027C4  C0C6  F0CB         	movff	write_dict@subindex,??_write_dict
  6242  0027C8  0EFF               	movlw	-1
  6243  0027CA  27CB               	addwf	??_write_dict& (0+255),f,b
  6244  0027CC  0E01               	movlw	1
  6245  0027CE  6FCC               	movwf	(??_write_dict+1)& (0+255),b
  6246  0027D0  2BCB               	incf	??_write_dict& (0+255),f,b
  6247  0027D2  D002               	goto	u11754
  6248  0027D4                     u11755:
  6249  0027D4  90D8               	bcf	status,0,c
  6250  0027D6  37CC               	rlcf	(??_write_dict+1)& (0+255),f,b
  6251  0027D8                     u11754:
  6252  0027D8  2FCB               	decfsz	??_write_dict& (0+255),f,b
  6253  0027DA  D7FC               	goto	u11755
  6254  0027DC  0100               	movlb	0	; () banked
  6255  0027DE  51CC               	movf	(??_write_dict+1)& (0+255),w,b
  6256  0027E0  0AFF               	xorlw	255
  6257  0027E2  17D4               	andwf	write_dict@i& (0+255),f,b
  6258  0027E4                     l9455:
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;dict.c: 105: };dict.c: 106: *((BYTE *)dict[pos].pointer) = i;
  6262  0027E4  51D5               	movf	write_dict@pos& (0+255),w,b
  6263  0027E6  0D07               	mullw	7
  6264  0027E8  0E05               	movlw	5
  6265  0027EA  26F3               	addwf	243,f,c
  6266  0027EC  0E00               	movlw	0
  6267  0027EE  22F4               	addwfc	244,f,c
  6268  0027F0  0EAC               	movlw	low _dict
  6269  0027F2  24F3               	addwf	243,w,c
  6270  0027F4  6EF6               	movwf	tblptrl,c
  6271  0027F6  0E7E               	movlw	high _dict
  6272  0027F8  20F4               	addwfc	244,w,c
  6273  0027FA  6EF7               	movwf	tblptrh,c
  6274  0027FC                     	if	0	;There are less than 3 active tblptr bytes
  6275  0027FC                     	endif
  6276  0027FC  0009               	tblrd		*+
  6277  0027FE  CFF5 F0CB          	movff	tablat,??_write_dict
  6278  002802  0009               	tblrd		*+
  6279  002804  CFF5 F0CC          	movff	tablat,??_write_dict+1
  6280  002808  C0CB  FFF6         	movff	??_write_dict,tblptrl
  6281  00280C  C0CC  FFF7         	movff	??_write_dict+1,tblptrh
  6282  002810  6AF8               	clrf	tblptru,c
  6283  002812  0E0E               	movlw	(high __ramtop+-1)
  6284  002814  64F7               	cpfsgt	tblptrh,c
  6285  002816  D004               	bra	u11767
  6286  002818  C0D4  FFF5         	movff	write_dict@i,tablat
  6287  00281C  000C               	tblwt		*
  6288  00281E  D006               	bra	u11760
  6289  002820                     u11767:
  6290  002820  CFF6 FFE1          	movff	tblptrl,fsr1l
  6291  002824  CFF7 FFE2          	movff	tblptrh,fsr1h
  6292  002828  C0D4  FFE7         	movff	write_dict@i,indf1
  6293  00282C                     u11760:
  6294                           
  6295                           ;dict.c: 107: return (0);
  6296  00282C  0E00               	movlw	0
  6297  00282E  0012               	return	
  6298  002830                     l9461:
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;dict.c: 110: if (dict[pos].pointer)
  6302  002830  51D5               	movf	write_dict@pos& (0+255),w,b
  6303  002832  0D07               	mullw	7
  6304  002834  0E05               	movlw	5
  6305  002836  26F3               	addwf	243,f,c
  6306  002838  0E00               	movlw	0
  6307  00283A  22F4               	addwfc	244,f,c
  6308  00283C  0EAC               	movlw	low _dict
  6309  00283E  24F3               	addwf	243,w,c
  6310  002840  6EF6               	movwf	tblptrl,c
  6311  002842  0E7E               	movlw	high _dict
  6312  002844  20F4               	addwfc	244,w,c
  6313  002846  6EF7               	movwf	tblptrh,c
  6314  002848                     	if	0	;There are less than 3 active tblptr bytes
  6315  002848                     	endif
  6316  002848  0009               	tblrd		*+
  6317  00284A  50F5               	movf	tablat,w,c
  6318  00284C  0009               	tblrd		*+
  6319  00284E  10F5               	iorwf	tablat,w,c
  6320  002850  B4D8               	btfsc	status,2,c
  6321  002852  D7EC               	goto	u11760
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;dict.c: 111: {;dict.c: 112: *((BYTE *)dict[pos].pointer + (subindex - 1) * 7) = (BYTE)v
      +                          alue;
  6325  002854  0EF9               	movlw	249
  6326  002856  6FCB               	movwf	??_write_dict& (0+255),b
  6327  002858  0EFF               	movlw	255
  6328  00285A  6FCC               	movwf	(??_write_dict+1)& (0+255),b
  6329  00285C  51D5               	movf	write_dict@pos& (0+255),w,b
  6330  00285E  0D07               	mullw	7
  6331  002860  0E05               	movlw	5
  6332  002862  26F3               	addwf	243,f,c
  6333  002864  0E00               	movlw	0
  6334  002866  22F4               	addwfc	244,f,c
  6335  002868  0EAC               	movlw	low _dict
  6336  00286A  24F3               	addwf	243,w,c
  6337  00286C  6EF6               	movwf	tblptrl,c
  6338  00286E  0E7E               	movlw	high _dict
  6339  002870  20F4               	addwfc	244,w,c
  6340  002872  6EF7               	movwf	tblptrh,c
  6341  002874                     	if	0	;There are less than 3 active tblptr bytes
  6342  002874                     	endif
  6343  002874  0009               	tblrd		*+
  6344  002876  CFF5 F0CD          	movff	tablat,??_write_dict+2
  6345  00287A  0009               	tblrd		*+
  6346  00287C  CFF5 F0CE          	movff	tablat,??_write_dict+3
  6347  002880  51C6               	movf	write_dict@subindex& (0+255),w,b
  6348  002882  0D07               	mullw	7
  6349  002884  50F3               	movf	243,w,c
  6350  002886  27CD               	addwf	(??_write_dict+2)& (0+255),f,b
  6351  002888  50F4               	movf	244,w,c
  6352  00288A  23CE               	addwfc	(??_write_dict+3)& (0+255),f,b
  6353  00288C  51CB               	movf	??_write_dict& (0+255),w,b
  6354  00288E  27CD               	addwf	(??_write_dict+2)& (0+255),f,b
  6355  002890  51CC               	movf	(??_write_dict+1)& (0+255),w,b
  6356  002892  23CE               	addwfc	(??_write_dict+3)& (0+255),f,b
  6357  002894  C0CD  FFF6         	movff	??_write_dict+2,tblptrl
  6358  002898  C0CE  FFF7         	movff	??_write_dict+3,tblptrh
  6359  00289C  6AF8               	clrf	tblptru,c
  6360  00289E  0E0E               	movlw	(high __ramtop+-1)
  6361  0028A0  64F7               	cpfsgt	tblptrh,c
  6362  0028A2  D004               	bra	u11787
  6363  0028A4  C0C7  FFF5         	movff	write_dict@value,tablat
  6364  0028A8  000C               	tblwt		*
  6365  0028AA  D001               	bra	u11780
  6366  0028AC                     u11787:
  6367  0028AC  D049               	goto	u11807
  6368  0028AE                     u11780:
  6369  0028AE  D7BE               	goto	u11760
  6370  0028B0                     l9465:
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;dict.c: 117: if (dict[pos].pointer)
  6374  0028B0  51D5               	movf	write_dict@pos& (0+255),w,b
  6375  0028B2  0D07               	mullw	7
  6376  0028B4  0E05               	movlw	5
  6377  0028B6  26F3               	addwf	243,f,c
  6378  0028B8  0E00               	movlw	0
  6379  0028BA  22F4               	addwfc	244,f,c
  6380  0028BC  0EAC               	movlw	low _dict
  6381  0028BE  24F3               	addwf	243,w,c
  6382  0028C0  6EF6               	movwf	tblptrl,c
  6383  0028C2  0E7E               	movlw	high _dict
  6384  0028C4  20F4               	addwfc	244,w,c
  6385  0028C6  6EF7               	movwf	tblptrh,c
  6386  0028C8                     	if	0	;There are less than 3 active tblptr bytes
  6387  0028C8                     	endif
  6388  0028C8  0009               	tblrd		*+
  6389  0028CA  50F5               	movf	tablat,w,c
  6390  0028CC  0009               	tblrd		*+
  6391  0028CE  10F5               	iorwf	tablat,w,c
  6392  0028D0  B4D8               	btfsc	status,2,c
  6393  0028D2  D7AC               	goto	u11760
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;dict.c: 118: {;dict.c: 119: *((BYTE *)dict[pos].pointer + (subindex - 1) * (7 + 1)) = (
      +                          BYTE)value;
  6397  0028D4  0EF8               	movlw	248
  6398  0028D6  6FCB               	movwf	??_write_dict& (0+255),b
  6399  0028D8  0EFF               	movlw	255
  6400  0028DA  6FCC               	movwf	(??_write_dict+1)& (0+255),b
  6401  0028DC  51C6               	movf	write_dict@subindex& (0+255),w,b
  6402  0028DE  6FCD               	movwf	(??_write_dict+2)& (0+255),b
  6403  0028E0  6BCE               	clrf	(??_write_dict+3)& (0+255),b
  6404  0028E2  90D8               	bcf	status,0,c
  6405  0028E4  37CD               	rlcf	(??_write_dict+2)& (0+255),f,b
  6406  0028E6  37CE               	rlcf	(??_write_dict+3)& (0+255),f,b
  6407  0028E8  90D8               	bcf	status,0,c
  6408  0028EA  37CD               	rlcf	(??_write_dict+2)& (0+255),f,b
  6409  0028EC  37CE               	rlcf	(??_write_dict+3)& (0+255),f,b
  6410  0028EE  90D8               	bcf	status,0,c
  6411  0028F0  37CD               	rlcf	(??_write_dict+2)& (0+255),f,b
  6412  0028F2  37CE               	rlcf	(??_write_dict+3)& (0+255),f,b
  6413  0028F4  51D5               	movf	write_dict@pos& (0+255),w,b
  6414  0028F6  0D07               	mullw	7
  6415  0028F8  0E05               	movlw	5
  6416  0028FA  26F3               	addwf	243,f,c
  6417  0028FC  0E00               	movlw	0
  6418  0028FE  22F4               	addwfc	244,f,c
  6419  002900  0EAC               	movlw	low _dict
  6420  002902  24F3               	addwf	243,w,c
  6421  002904  6EF6               	movwf	tblptrl,c
  6422  002906  0E7E               	movlw	high _dict
  6423  002908  20F4               	addwfc	244,w,c
  6424  00290A  6EF7               	movwf	tblptrh,c
  6425  00290C                     	if	0	;There are less than 3 active tblptr bytes
  6426  00290C                     	endif
  6427  00290C  0009               	tblrd		*+
  6428  00290E  CFF5 F0CF          	movff	tablat,??_write_dict+4
  6429  002912  0009               	tblrd		*+
  6430  002914  CFF5 F0D0          	movff	tablat,??_write_dict+5
  6431  002918  51CD               	movf	(??_write_dict+2)& (0+255),w,b
  6432  00291A  27CF               	addwf	(??_write_dict+4)& (0+255),f,b
  6433  00291C  51CE               	movf	(??_write_dict+3)& (0+255),w,b
  6434  00291E  23D0               	addwfc	(??_write_dict+5)& (0+255),f,b
  6435  002920  51CB               	movf	??_write_dict& (0+255),w,b
  6436  002922  27CF               	addwf	(??_write_dict+4)& (0+255),f,b
  6437  002924  51CC               	movf	(??_write_dict+1)& (0+255),w,b
  6438  002926  23D0               	addwfc	(??_write_dict+5)& (0+255),f,b
  6439  002928  C0CF  FFF6         	movff	??_write_dict+4,tblptrl
  6440  00292C  C0D0  FFF7         	movff	??_write_dict+5,tblptrh
  6441  002930  6AF8               	clrf	tblptru,c
  6442  002932  0E0E               	movlw	(high __ramtop+-1)
  6443  002934  64F7               	cpfsgt	tblptrh,c
  6444  002936  D004               	bra	u11807
  6445  002938  C0C7  FFF5         	movff	write_dict@value,tablat
  6446  00293C  000C               	tblwt		*
  6447  00293E  D006               	bra	u11800
  6448  002940                     u11807:
  6449  002940  CFF6 FFE1          	movff	tblptrl,fsr1l
  6450  002944  CFF7 FFE2          	movff	tblptrh,fsr1h
  6451  002948  C0C7  FFE7         	movff	write_dict@value,indf1
  6452  00294C                     u11800:
  6453  00294C  D76F               	goto	u11760
  6454  00294E                     l9469:
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;dict.c: 124: if (dict[pos].pointer)
  6458  00294E  51D5               	movf	write_dict@pos& (0+255),w,b
  6459  002950  0D07               	mullw	7
  6460  002952  0E05               	movlw	5
  6461  002954  26F3               	addwf	243,f,c
  6462  002956  0E00               	movlw	0
  6463  002958  22F4               	addwfc	244,f,c
  6464  00295A  0EAC               	movlw	low _dict
  6465  00295C  24F3               	addwf	243,w,c
  6466  00295E  6EF6               	movwf	tblptrl,c
  6467  002960  0E7E               	movlw	high _dict
  6468  002962  20F4               	addwfc	244,w,c
  6469  002964  6EF7               	movwf	tblptrh,c
  6470  002966                     	if	0	;There are less than 3 active tblptr bytes
  6471  002966                     	endif
  6472  002966  0009               	tblrd		*+
  6473  002968  50F5               	movf	tablat,w,c
  6474  00296A  0009               	tblrd		*+
  6475  00296C  10F5               	iorwf	tablat,w,c
  6476  00296E  B4D8               	btfsc	status,2,c
  6477  002970  D03B               	goto	u11830
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;dict.c: 125: {;dict.c: 126: for (i = 0; i < size; i++)
  6481  002972  0E00               	movlw	0
  6482  002974  6FD4               	movwf	write_dict@i& (0+255),b
  6483  002976  D034               	goto	l9477
  6484  002978                     l9473:
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;dict.c: 127: *((BYTE *)dict[pos].pointer + address + i) = *((BYTE *)&value+i);
  6488  002978  51D5               	movf	write_dict@pos& (0+255),w,b
  6489  00297A  0D07               	mullw	7
  6490  00297C  0E05               	movlw	5
  6491  00297E  26F3               	addwf	243,f,c
  6492  002980  0E00               	movlw	0
  6493  002982  22F4               	addwfc	244,f,c
  6494  002984  0EAC               	movlw	low _dict
  6495  002986  24F3               	addwf	243,w,c
  6496  002988  6EF6               	movwf	tblptrl,c
  6497  00298A  0E7E               	movlw	high _dict
  6498  00298C  20F4               	addwfc	244,w,c
  6499  00298E  6EF7               	movwf	tblptrh,c
  6500  002990                     	if	0	;There are less than 3 active tblptr bytes
  6501  002990                     	endif
  6502  002990  0009               	tblrd		*+
  6503  002992  CFF5 F0CB          	movff	tablat,??_write_dict
  6504  002996  0009               	tblrd		*+
  6505  002998  CFF5 F0CC          	movff	tablat,??_write_dict+1
  6506  00299C  51D1               	movf	write_dict@address& (0+255),w,b
  6507  00299E  27CB               	addwf	??_write_dict& (0+255),f,b
  6508  0029A0  0E00               	movlw	0
  6509  0029A2  23CC               	addwfc	(??_write_dict+1)& (0+255),f,b
  6510  0029A4  51D4               	movf	write_dict@i& (0+255),w,b
  6511  0029A6  27CB               	addwf	??_write_dict& (0+255),f,b
  6512  0029A8  0E00               	movlw	0
  6513  0029AA  23CC               	addwfc	(??_write_dict+1)& (0+255),f,b
  6514  0029AC  C0CB  FFF6         	movff	??_write_dict,tblptrl
  6515  0029B0  C0CC  FFF7         	movff	??_write_dict+1,tblptrh
  6516  0029B4  6AF8               	clrf	tblptru,c
  6517  0029B6  51D4               	movf	write_dict@i& (0+255),w,b
  6518  0029B8  0FC7               	addlw	low write_dict@value
  6519  0029BA  6ED9               	movwf	fsr2l,c
  6520  0029BC  6ADA               	clrf	fsr2h,c
  6521  0029BE  50DF               	movf	indf2,w,c
  6522  0029C0  6FCD               	movwf	(??_write_dict+2)& (0+255),b
  6523  0029C2  0E0E               	movlw	(high __ramtop+-1)
  6524  0029C4  64F7               	cpfsgt	tblptrh,c
  6525  0029C6  D004               	bra	u11827
  6526  0029C8  C0CD  FFF5         	movff	??_write_dict+2,tablat
  6527  0029CC  000C               	tblwt		*
  6528  0029CE  D006               	bra	u11820
  6529  0029D0                     u11827:
  6530  0029D0  CFF6 FFE1          	movff	tblptrl,fsr1l
  6531  0029D4  CFF7 FFE2          	movff	tblptrh,fsr1h
  6532  0029D8  C0CD  FFE7         	movff	??_write_dict+2,indf1
  6533  0029DC                     u11820:
  6534  0029DC  0100               	movlb	0	; () banked
  6535  0029DE  2BD4               	incf	write_dict@i& (0+255),f,b
  6536  0029E0                     l9477:
  6537                           
  6538                           ; BSR set to: 0
  6539  0029E0  51D3               	movf	write_dict@size& (0+255),w,b
  6540  0029E2  5DD4               	subwf	write_dict@i& (0+255),w,b
  6541  0029E4  A0D8               	btfss	status,0,c
  6542  0029E6  D7C8               	goto	l9473
  6543  0029E8                     u11830:
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;dict.c: 128: };dict.c: 129: if(dict[pos].object == 0x250D)
  6547  0029E8  51D5               	movf	write_dict@pos& (0+255),w,b
  6548  0029EA  0D07               	mullw	7
  6549  0029EC  0EAC               	movlw	low _dict
  6550  0029EE  24F3               	addwf	243,w,c
  6551  0029F0  6EF6               	movwf	tblptrl,c
  6552  0029F2  0E7E               	movlw	high _dict
  6553  0029F4  20F4               	addwfc	244,w,c
  6554  0029F6  6EF7               	movwf	tblptrh,c
  6555  0029F8                     	if	0	;There are less than 3 active tblptr bytes
  6556  0029F8                     	endif
  6557  0029F8  0009               	tblrd		*+
  6558  0029FA  0E0D               	movlw	13
  6559  0029FC  18F5               	xorwf	tablat,w,c
  6560  0029FE  E104               	bnz	u11841
  6561  002A00  0009               	tblrd		*+
  6562  002A02  0E25               	movlw	37
  6563  002A04  18F5               	xorwf	tablat,w,c
  6564  002A06  A4D8               	btfss	status,2,c
  6565  002A08                     u11841:
  6566  002A08  D711               	goto	u11760
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;dict.c: 130: {;dict.c: 131: backlight_func = (backlight_mode >> 4) & 0x03;
  6570  002A0A  3826               	swapf	_backlight_mode^0,w,c
  6571  002A0C  0B0F               	andlw	15
  6572  002A0E  0B03               	andlw	3
  6573  002A10  6E11               	movwf	_backlight_func^0,c
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;dict.c: 132: backlight_off_time = ((WORD)backlight_mode & 0x0F) * 120;
  6577  002A12  C026  F0CB         	movff	_backlight_mode,??_write_dict
  6578  002A16  0E0F               	movlw	15
  6579  002A18  17CB               	andwf	??_write_dict& (0+255),f,b
  6580  002A1A  51CB               	movf	??_write_dict& (0+255),w,b
  6581  002A1C  0D78               	mullw	120
  6582  002A1E  CFF3 F078          	movff	prodl,_backlight_off_time
  6583  002A22  CFF4 F079          	movff	prodh,_backlight_off_time+1
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;dict.c: 133: light_para_ok = 1;
  6587  002A26  0E01               	movlw	1
  6588  002A28  6E10               	movwf	_light_para_ok^0,c
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;dict.c: 134: display_STN_mode = (backlight_mode >> 6) & 0x03;
  6592  002A2A  4426               	rlncf	_backlight_mode^0,w,c
  6593  002A2C  46E8               	rlncf	wreg,f,c
  6594  002A2E  0B03               	andlw	3
  6595  002A30  0B03               	andlw	3
  6596  002A32  6E0F               	movwf	_display_STN_mode^0,c
  6597  002A34  D6FB               	goto	u11760
  6598  002A36                     l9489:
  6599                           
  6600                           ; BSR set to: 0
  6601  002A36  51D5               	movf	write_dict@pos& (0+255),w,b
  6602  002A38  0D07               	mullw	7
  6603  002A3A  0EAC               	movlw	low _dict
  6604  002A3C  24F3               	addwf	243,w,c
  6605  002A3E  6EF6               	movwf	tblptrl,c
  6606  002A40  0E7E               	movlw	high _dict
  6607  002A42  20F4               	addwfc	244,w,c
  6608  002A44  6EF7               	movwf	tblptrh,c
  6609  002A46                     	if	0	;There are less than 3 active tblptr bytes
  6610  002A46                     	endif
  6611  002A46  0009               	tblrd		*+
  6612  002A48  CFF5 F0CB          	movff	tablat,??_write_dict
  6613  002A4C  0009               	tblrd		*+
  6614  002A4E  CFF5 F0CC          	movff	tablat,??_write_dict+1
  6615                           
  6616                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6617                           ; Switch size 1, requested type "simple"
  6618                           ; Number of cases is 2, Range of values is 97 to 98
  6619                           ; switch strategies available:
  6620                           ; Name         Instructions Cycles
  6621                           ; simple_byte            7     4 (average)
  6622                           ;	Chosen strategy is simple_byte
  6623  002A52  51CC               	movf	(??_write_dict+1)& (0+255),w,b
  6624  002A54  0A61               	xorlw	97	; case 97
  6625  002A56  B4D8               	btfsc	status,2,c
  6626  002A58  D004               	goto	l11607
  6627  002A5A  0A03               	xorlw	3	; case 98
  6628  002A5C  B4D8               	btfsc	status,2,c
  6629  002A5E  D009               	goto	l11609
  6630  002A60  D776               	goto	l9469
  6631  002A62                     l11607:
  6632                           
  6633                           ; BSR set to: 0
  6634                           ; Switch size 1, requested type "simple"
  6635                           ; Number of cases is 2, Range of values is 96 to 128
  6636                           ; switch strategies available:
  6637                           ; Name         Instructions Cycles
  6638                           ; simple_byte            7     4 (average)
  6639                           ;	Chosen strategy is simple_byte
  6640  002A62  51CB               	movf	??_write_dict& (0+255),w,b
  6641  002A64  0A60               	xorlw	96	; case 96
  6642  002A66  B4D8               	btfsc	status,2,c
  6643  002A68  D650               	goto	l9443
  6644  002A6A  0AE0               	xorlw	224	; case 128
  6645  002A6C  B4D8               	btfsc	status,2,c
  6646  002A6E  D6E0               	goto	l9461
  6647  002A70  D76E               	goto	l9469
  6648  002A72                     l11609:
  6649                           
  6650                           ; BSR set to: 0
  6651                           ; Switch size 1, requested type "simple"
  6652                           ; Number of cases is 2, Range of values is 96 to 128
  6653                           ; switch strategies available:
  6654                           ; Name         Instructions Cycles
  6655                           ; simple_byte            7     4 (average)
  6656                           ;	Chosen strategy is simple_byte
  6657  002A72  51CB               	movf	??_write_dict& (0+255),w,b
  6658  002A74  0A60               	xorlw	96	; case 96
  6659  002A76  B4D8               	btfsc	status,2,c
  6660  002A78  D648               	goto	l9443
  6661  002A7A  0AE0               	xorlw	224	; case 128
  6662  002A7C  B4D8               	btfsc	status,2,c
  6663  002A7E  D718               	goto	l9465
  6664  002A80  D766               	goto	l9469
  6665  002A82                     __end_of_write_dict:
  6666                           	callstack 0
  6667                           
  6668 ;; *************** function _set_output *****************
  6669 ;; Defined at:
  6670 ;;		line 751 in file "../../src/can.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;  virt            1   11[BANK0 ] PTR unsigned char 
  6673 ;;		 -> virt_out(7), 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  buf             3   17[BANK0 ] unsigned char [3]
  6676 ;;  index           2   15[BANK0 ] unsigned int 
  6677 ;;  i               1   22[BANK0 ] unsigned char 
  6678 ;;  iotype          1   21[BANK0 ] unsigned char 
  6679 ;;  sub             1   20[BANK0 ] unsigned char 
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  1    wreg      void 
  6682 ;; Registers used:
  6683 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 3F/0
  6686 ;;		On exit  : 3F/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6689 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6690 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6691 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6692 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6693 ;;Total ram usage:       12 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:    4
  6696 ;; This function calls:
  6697 ;;		_check_for_call
  6698 ;; This function is called by:
  6699 ;;		_read_rx
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text6
  6704  0012CA                     __ptext6:
  6705                           	callstack 0
  6706  0012CA                     _set_output:
  6707                           	callstack 25
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;can.c: 752: BYTE i;;can.c: 753: BYTE iotype;;can.c: 754: BYTE buf[3] = {0, 0, 0};
  6711                           
  6712                           ;incstack = 0
  6713  0012CA  0E00               	movlw	0
  6714  0012CC  6FCD               	movwf	set_output@buf& (0+255),b
  6715  0012CE  0E00               	movlw	0
  6716  0012D0  6FCE               	movwf	(set_output@buf+1)& (0+255),b
  6717  0012D2  0E00               	movlw	0
  6718  0012D4  6FCF               	movwf	(set_output@buf+2)& (0+255),b
  6719                           
  6720                           ;can.c: 756: WORD index = 0;
  6721  0012D6  0E00               	movlw	0
  6722  0012D8  6FCC               	movwf	(set_output@index+1)& (0+255),b
  6723  0012DA  0E00               	movlw	0
  6724  0012DC  6FCB               	movwf	set_output@index& (0+255),b
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;can.c: 758: iotype = virt[0];
  6728  0012DE  51C7               	movf	set_output@virt& (0+255),w,b
  6729  0012E0  6ED9               	movwf	fsr2l,c
  6730  0012E2  6ADA               	clrf	fsr2h,c
  6731  0012E4  50DF               	movf	indf2,w,c
  6732  0012E6  6FD1               	movwf	set_output@iotype& (0+255),b
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;can.c: 759: if (check_for_call (iotype))
  6736  0012E8  51D1               	movf	set_output@iotype& (0+255),w,b
  6737  0012EA  EC93  F021         	call	_check_for_call
  6738  0012EE  0900               	iorlw	0
  6739  0012F0  B4D8               	btfsc	status,2,c
  6740  0012F2  D125               	goto	l8989
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;can.c: 760: {;can.c: 761: if (iotype == 0x02)
  6744  0012F4  0E02               	movlw	2
  6745  0012F6  19D1               	xorwf	set_output@iotype& (0+255),w,b
  6746  0012F8  A4D8               	btfss	status,2,c
  6747  0012FA  D005               	goto	l8929
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;can.c: 762: i = virt[3];
  6751  0012FC  51C7               	movf	set_output@virt& (0+255),w,b
  6752  0012FE  6ED9               	movwf	fsr2l,c
  6753  001300  6ADA               	clrf	fsr2h,c
  6754  001302  0E03               	movlw	3
  6755  001304  D004               	goto	L11
  6756  001306                     l8929:
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;can.c: 763: else;can.c: 764: i = virt[1];
  6760  001306  51C7               	movf	set_output@virt& (0+255),w,b
  6761  001308  6ED9               	movwf	fsr2l,c
  6762  00130A  6ADA               	clrf	fsr2h,c
  6763  00130C  0E01               	movlw	1
  6764  00130E                     L11:
  6765  00130E  26D9               	addwf	fsr2l,f,c
  6766  001310  50DF               	movf	indf2,w,c
  6767  001312  6FD2               	movwf	set_output@i& (0+255),b
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;can.c: 765: if (i == 0xFF)
  6771  001314  29D2               	incf	set_output@i& (0+255),w,b
  6772  001316  A4D8               	btfss	status,2,c
  6773  001318  D053               	goto	l8953
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;can.c: 766: {;can.c: 767: for (i = 0; i < 8; i++)
  6777  00131A  0E00               	movlw	0
  6778  00131C  6FD2               	movwf	set_output@i& (0+255),b
  6779  00131E                     l8939:
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;can.c: 768: {;can.c: 769: if ((outpar[i][0] == iotype) && (outpar[i][6] == 1))
  6783  00131E  51D2               	movf	set_output@i& (0+255),w,b
  6784  001320  0D08               	mullw	8
  6785  001322  0E00               	movlw	low _outpar
  6786  001324  24F3               	addwf	243,w,c
  6787  001326  6ED9               	movwf	fsr2l,c
  6788  001328  0E01               	movlw	high _outpar
  6789  00132A  20F4               	addwfc	prodh,w,c
  6790  00132C  6EDA               	movwf	fsr2h,c
  6791  00132E  51D1               	movf	set_output@iotype& (0+255),w,b
  6792  001330  18DE               	xorwf	postinc2,w,c
  6793  001332  A4D8               	btfss	status,2,c
  6794  001334  D040               	goto	l8949
  6795                           
  6796                           ; BSR set to: 0
  6797  001336  51D2               	movf	set_output@i& (0+255),w,b
  6798  001338  0D08               	mullw	8
  6799  00133A  0E06               	movlw	low (_outpar+6)
  6800  00133C  24F3               	addwf	243,w,c
  6801  00133E  6ED9               	movwf	fsr2l,c
  6802  001340  0E01               	movlw	high (_outpar+6)
  6803  001342  20F4               	addwfc	prodh,w,c
  6804  001344  6EDA               	movwf	fsr2h,c
  6805  001346  04DE               	decf	postinc2,w,c
  6806  001348  A4D8               	btfss	status,2,c
  6807  00134A  D035               	goto	l8949
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;can.c: 770: {;can.c: 771: outpar[i][7] &= ~virt[2];
  6811  00134C  51C7               	movf	set_output@virt& (0+255),w,b
  6812  00134E  6ED9               	movwf	fsr2l,c
  6813  001350  6ADA               	clrf	fsr2h,c
  6814  001352  0E02               	movlw	2
  6815  001354  26D9               	addwf	fsr2l,f,c
  6816  001356  50DF               	movf	indf2,w,c
  6817  001358  0AFF               	xorlw	255
  6818  00135A  6FC8               	movwf	??_set_output& (0+255),b
  6819  00135C  51D2               	movf	set_output@i& (0+255),w,b
  6820  00135E  0D08               	mullw	8
  6821  001360  0E07               	movlw	low (_outpar+7)
  6822  001362  24F3               	addwf	243,w,c
  6823  001364  6ED9               	movwf	fsr2l,c
  6824  001366  0E01               	movlw	high (_outpar+7)
  6825  001368  20F4               	addwfc	prodh,w,c
  6826  00136A  6EDA               	movwf	fsr2h,c
  6827  00136C  51C8               	movf	??_set_output& (0+255),w,b
  6828  00136E  16DF               	andwf	indf2,f,c
  6829                           
  6830                           ;can.c: 772: if (!outpar[i][7])
  6831  001370  51D2               	movf	set_output@i& (0+255),w,b
  6832  001372  0D08               	mullw	8
  6833  001374  0E07               	movlw	low (_outpar+7)
  6834  001376  24F3               	addwf	243,w,c
  6835  001378  6ED9               	movwf	fsr2l,c
  6836  00137A  0E01               	movlw	high (_outpar+7)
  6837  00137C  20F4               	addwfc	prodh,w,c
  6838  00137E  6EDA               	movwf	fsr2h,c
  6839  001380  50DF               	movf	indf2,w,c
  6840  001382  A4D8               	btfss	status,2,c
  6841  001384  D018               	goto	l8949
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;can.c: 773: {;can.c: 774: (out &= ~(1 << i));
  6845  001386  C0D2  F0C8         	movff	set_output@i,??_set_output
  6846  00138A  0E01               	movlw	1
  6847  00138C  6FC9               	movwf	(??_set_output+1)& (0+255),b
  6848  00138E  2BC8               	incf	??_set_output& (0+255),f,b
  6849  001390  D002               	goto	u10474
  6850  001392                     u10475:
  6851  001392  90D8               	bcf	status,0,c
  6852  001394  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  6853  001396                     u10474:
  6854  001396  2FC8               	decfsz	??_set_output& (0+255),f,b
  6855  001398  D7FC               	goto	u10475
  6856  00139A  0100               	movlb	0	; () banked
  6857  00139C  51C9               	movf	(??_set_output+1)& (0+255),w,b
  6858  00139E  0AFF               	xorlw	255
  6859  0013A0  162B               	andwf	_out^0,f,c	;volatile
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;can.c: 775: outpar[i][5] = 0;
  6863  0013A2  51D2               	movf	set_output@i& (0+255),w,b
  6864  0013A4  0D08               	mullw	8
  6865  0013A6  0E05               	movlw	low (_outpar+5)
  6866  0013A8  24F3               	addwf	243,w,c
  6867  0013AA  6ED9               	movwf	fsr2l,c
  6868  0013AC  0E01               	movlw	high (_outpar+5)
  6869  0013AE  20F4               	addwfc	prodh,w,c
  6870  0013B0  6EDA               	movwf	fsr2h,c
  6871  0013B2  0E00               	movlw	0
  6872  0013B4  6EDF               	movwf	indf2,c
  6873  0013B6                     l8949:
  6874                           
  6875                           ; BSR set to: 0
  6876  0013B6  2BD2               	incf	set_output@i& (0+255),f,b
  6877                           
  6878                           ; BSR set to: 0
  6879  0013B8  0E07               	movlw	7
  6880  0013BA  65D2               	cpfsgt	set_output@i& (0+255),b
  6881  0013BC  D7B0               	goto	l8939
  6882  0013BE  0012               	return	
  6883  0013C0                     l8953:
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;can.c: 780: else;can.c: 781: {;can.c: 782: for (i = 0; i < 8; i++)
  6887  0013C0  0E00               	movlw	0
  6888  0013C2  6FD2               	movwf	set_output@i& (0+255),b
  6889  0013C4                     l8959:
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;can.c: 783: {;can.c: 784: if (virt[0] == outpar[i][0])
  6893  0013C4  51D2               	movf	set_output@i& (0+255),w,b
  6894  0013C6  0D08               	mullw	8
  6895  0013C8  0E00               	movlw	low _outpar
  6896  0013CA  24F3               	addwf	243,w,c
  6897  0013CC  6ED9               	movwf	fsr2l,c
  6898  0013CE  0E01               	movlw	high _outpar
  6899  0013D0  20F4               	addwfc	prodh,w,c
  6900  0013D2  6EDA               	movwf	fsr2h,c
  6901  0013D4  51C7               	movf	set_output@virt& (0+255),w,b
  6902  0013D6  6EE1               	movwf	fsr1l,c
  6903  0013D8  6AE2               	clrf	fsr1h,c
  6904  0013DA  50DE               	movf	postinc2,w,c
  6905  0013DC  18E6               	xorwf	postinc1,w,c
  6906  0013DE  A4D8               	btfss	status,2,c
  6907  0013E0  D0A9               	goto	l8985
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;can.c: 785: if (virt[1] == outpar[i][1])
  6911  0013E2  51D2               	movf	set_output@i& (0+255),w,b
  6912  0013E4  0D08               	mullw	8
  6913  0013E6  0E01               	movlw	low (_outpar+1)
  6914  0013E8  24F3               	addwf	243,w,c
  6915  0013EA  6ED9               	movwf	fsr2l,c
  6916  0013EC  0E01               	movlw	high (_outpar+1)
  6917  0013EE  20F4               	addwfc	prodh,w,c
  6918  0013F0  6EDA               	movwf	fsr2h,c
  6919  0013F2  51C7               	movf	set_output@virt& (0+255),w,b
  6920  0013F4  6EE1               	movwf	fsr1l,c
  6921  0013F6  6AE2               	clrf	fsr1h,c
  6922  0013F8  0E01               	movlw	1
  6923  0013FA  26E1               	addwf	fsr1l,f,c
  6924  0013FC  50DE               	movf	postinc2,w,c
  6925  0013FE  18E6               	xorwf	postinc1,w,c
  6926  001400  A4D8               	btfss	status,2,c
  6927  001402  D098               	goto	l8985
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;can.c: 786: if (virt[3] == outpar[i][3])
  6931  001404  51D2               	movf	set_output@i& (0+255),w,b
  6932  001406  0D08               	mullw	8
  6933  001408  0E03               	movlw	low (_outpar+3)
  6934  00140A  24F3               	addwf	243,w,c
  6935  00140C  6ED9               	movwf	fsr2l,c
  6936  00140E  0E01               	movlw	high (_outpar+3)
  6937  001410  20F4               	addwfc	prodh,w,c
  6938  001412  6EDA               	movwf	fsr2h,c
  6939  001414  51C7               	movf	set_output@virt& (0+255),w,b
  6940  001416  6EE1               	movwf	fsr1l,c
  6941  001418  6AE2               	clrf	fsr1h,c
  6942  00141A  0E03               	movlw	3
  6943  00141C  26E1               	addwf	fsr1l,f,c
  6944  00141E  50DE               	movf	postinc2,w,c
  6945  001420  18E6               	xorwf	postinc1,w,c
  6946  001422  A4D8               	btfss	status,2,c
  6947  001424  D087               	goto	l8985
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;can.c: 787: if (virt[2] & outpar[i][2])
  6951  001426  51D2               	movf	set_output@i& (0+255),w,b
  6952  001428  0D08               	mullw	8
  6953  00142A  0E02               	movlw	low (_outpar+2)
  6954  00142C  24F3               	addwf	243,w,c
  6955  00142E  6ED9               	movwf	fsr2l,c
  6956  001430  0E01               	movlw	high (_outpar+2)
  6957  001432  20F4               	addwfc	prodh,w,c
  6958  001434  6EDA               	movwf	fsr2h,c
  6959  001436  50DF               	movf	indf2,w,c
  6960  001438  6FC8               	movwf	??_set_output& (0+255),b
  6961  00143A  51C7               	movf	set_output@virt& (0+255),w,b
  6962  00143C  6ED9               	movwf	fsr2l,c
  6963  00143E  6ADA               	clrf	fsr2h,c
  6964  001440  0E02               	movlw	2
  6965  001442  26D9               	addwf	fsr2l,f,c
  6966  001444  50DF               	movf	indf2,w,c
  6967  001446  15C8               	andwf	??_set_output& (0+255),w,b
  6968  001448  0900               	iorlw	0
  6969  00144A  B4D8               	btfsc	status,2,c
  6970  00144C  D073               	goto	l8985
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;can.c: 788: if (!((~virt[4]) & (outpar[i][4] & 0x0F)))
  6974  00144E  51D2               	movf	set_output@i& (0+255),w,b
  6975  001450  0D08               	mullw	8
  6976  001452  0E04               	movlw	low (_outpar+4)
  6977  001454  24F3               	addwf	243,w,c
  6978  001456  6ED9               	movwf	fsr2l,c
  6979  001458  0E01               	movlw	high (_outpar+4)
  6980  00145A  20F4               	addwfc	prodh,w,c
  6981  00145C  6EDA               	movwf	fsr2h,c
  6982  00145E  50DF               	movf	indf2,w,c
  6983  001460  6FC8               	movwf	??_set_output& (0+255),b
  6984  001462  51C7               	movf	set_output@virt& (0+255),w,b
  6985  001464  6ED9               	movwf	fsr2l,c
  6986  001466  6ADA               	clrf	fsr2h,c
  6987  001468  0E04               	movlw	4
  6988  00146A  26D9               	addwf	fsr2l,f,c
  6989  00146C  50DF               	movf	indf2,w,c
  6990  00146E  0AFF               	xorlw	255
  6991  001470  15C8               	andwf	??_set_output& (0+255),w,b
  6992  001472  6FC9               	movwf	(??_set_output+1)& (0+255),b
  6993  001474  0E0F               	movlw	15
  6994  001476  17C9               	andwf	(??_set_output+1)& (0+255),f,b
  6995  001478  A4D8               	btfss	status,2,c
  6996  00147A  D05C               	goto	l8985
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;can.c: 789: if (outpar[i][6] == 1)
  7000  00147C  51D2               	movf	set_output@i& (0+255),w,b
  7001  00147E  0D08               	mullw	8
  7002  001480  0E06               	movlw	low (_outpar+6)
  7003  001482  24F3               	addwf	243,w,c
  7004  001484  6ED9               	movwf	fsr2l,c
  7005  001486  0E01               	movlw	high (_outpar+6)
  7006  001488  20F4               	addwfc	prodh,w,c
  7007  00148A  6EDA               	movwf	fsr2h,c
  7008  00148C  04DE               	decf	postinc2,w,c
  7009  00148E  A4D8               	btfss	status,2,c
  7010  001490  D051               	goto	l8985
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;can.c: 790: {;can.c: 791: if (virt[5] & 0x01)
  7014  001492  51C7               	movf	set_output@virt& (0+255),w,b
  7015  001494  6ED9               	movwf	fsr2l,c
  7016  001496  6ADA               	clrf	fsr2h,c
  7017  001498  0E05               	movlw	5
  7018  00149A  26D9               	addwf	fsr2l,f,c
  7019  00149C  A0DF               	btfss	indf2,0,c
  7020  00149E  D028               	goto	l8979
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;can.c: 792: {;can.c: 793: (out |= (1 << i));
  7024  0014A0  C0D2  F0C8         	movff	set_output@i,??_set_output
  7025  0014A4  0E01               	movlw	1
  7026  0014A6  6FC9               	movwf	(??_set_output+1)& (0+255),b
  7027  0014A8  2BC8               	incf	??_set_output& (0+255),f,b
  7028  0014AA  D002               	goto	u10564
  7029  0014AC                     u10565:
  7030  0014AC  90D8               	bcf	status,0,c
  7031  0014AE  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  7032  0014B0                     u10564:
  7033  0014B0  2FC8               	decfsz	??_set_output& (0+255),f,b
  7034  0014B2  D7FC               	goto	u10565
  7035  0014B4  0100               	movlb	0	; () banked
  7036  0014B6  51C9               	movf	(??_set_output+1)& (0+255),w,b
  7037  0014B8  122B               	iorwf	_out^0,f,c	;volatile
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;can.c: 794: outpar[i][7] |= virt[2];
  7041  0014BA  51C7               	movf	set_output@virt& (0+255),w,b
  7042  0014BC  6ED9               	movwf	fsr2l,c
  7043  0014BE  6ADA               	clrf	fsr2h,c
  7044  0014C0  0E02               	movlw	2
  7045  0014C2  26D9               	addwf	fsr2l,f,c
  7046  0014C4  50DF               	movf	indf2,w,c
  7047  0014C6  6FC8               	movwf	??_set_output& (0+255),b
  7048  0014C8  51D2               	movf	set_output@i& (0+255),w,b
  7049  0014CA  0D08               	mullw	8
  7050  0014CC  0E07               	movlw	low (_outpar+7)
  7051  0014CE  24F3               	addwf	243,w,c
  7052  0014D0  6ED9               	movwf	fsr2l,c
  7053  0014D2  0E01               	movlw	high (_outpar+7)
  7054  0014D4  20F4               	addwfc	prodh,w,c
  7055  0014D6  6EDA               	movwf	fsr2h,c
  7056  0014D8  51C8               	movf	??_set_output& (0+255),w,b
  7057  0014DA  12DF               	iorwf	indf2,f,c
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;can.c: 795: outpar[i][5] = 1;
  7061  0014DC  51D2               	movf	set_output@i& (0+255),w,b
  7062  0014DE  0D08               	mullw	8
  7063  0014E0  0E05               	movlw	low (_outpar+5)
  7064  0014E2  24F3               	addwf	243,w,c
  7065  0014E4  6ED9               	movwf	fsr2l,c
  7066  0014E6  0E01               	movlw	high (_outpar+5)
  7067  0014E8  20F4               	addwfc	prodh,w,c
  7068  0014EA  6EDA               	movwf	fsr2h,c
  7069  0014EC  0E01               	movlw	1
  7070  0014EE  D021               	goto	L12
  7071  0014F0                     l8979:
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;can.c: 797: else;can.c: 798: {;can.c: 799: outpar[i][7] = 0;
  7075  0014F0  51D2               	movf	set_output@i& (0+255),w,b
  7076  0014F2  0D08               	mullw	8
  7077  0014F4  0E07               	movlw	low (_outpar+7)
  7078  0014F6  24F3               	addwf	243,w,c
  7079  0014F8  6ED9               	movwf	fsr2l,c
  7080  0014FA  0E01               	movlw	high (_outpar+7)
  7081  0014FC  20F4               	addwfc	prodh,w,c
  7082  0014FE  6EDA               	movwf	fsr2h,c
  7083  001500  0E00               	movlw	0
  7084  001502  6EDF               	movwf	indf2,c
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;can.c: 800: (out &= ~(1 << i));
  7088  001504  C0D2  F0C8         	movff	set_output@i,??_set_output
  7089  001508  0E01               	movlw	1
  7090  00150A  6FC9               	movwf	(??_set_output+1)& (0+255),b
  7091  00150C  2BC8               	incf	??_set_output& (0+255),f,b
  7092  00150E  D002               	goto	u10574
  7093  001510                     u10575:
  7094  001510  90D8               	bcf	status,0,c
  7095  001512  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  7096  001514                     u10574:
  7097  001514  2FC8               	decfsz	??_set_output& (0+255),f,b
  7098  001516  D7FC               	goto	u10575
  7099  001518  0100               	movlb	0	; () banked
  7100  00151A  51C9               	movf	(??_set_output+1)& (0+255),w,b
  7101  00151C  0AFF               	xorlw	255
  7102  00151E  162B               	andwf	_out^0,f,c	;volatile
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;can.c: 801: outpar[i][5] = 0;
  7106  001520  51D2               	movf	set_output@i& (0+255),w,b
  7107  001522  0D08               	mullw	8
  7108  001524  0E05               	movlw	low (_outpar+5)
  7109  001526  24F3               	addwf	243,w,c
  7110  001528  6ED9               	movwf	fsr2l,c
  7111  00152A  0E01               	movlw	high (_outpar+5)
  7112  00152C  20F4               	addwfc	prodh,w,c
  7113  00152E  6EDA               	movwf	fsr2h,c
  7114  001530  0E00               	movlw	0
  7115  001532                     L12:
  7116  001532  6EDF               	movwf	indf2,c
  7117  001534                     l8985:
  7118                           
  7119                           ; BSR set to: 0
  7120  001534  2BD2               	incf	set_output@i& (0+255),f,b
  7121                           
  7122                           ; BSR set to: 0
  7123  001536  0E07               	movlw	7
  7124  001538  65D2               	cpfsgt	set_output@i& (0+255),b
  7125  00153A  D744               	goto	l8959
  7126  00153C  0012               	return	
  7127  00153E                     l8989:
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;can.c: 807: else if (iotype == 0x40)
  7131  00153E  0E40               	movlw	64
  7132  001540  19D1               	xorwf	set_output@iotype& (0+255),w,b
  7133  001542  A4D8               	btfss	status,2,c
  7134  001544  D075               	goto	l9057
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;can.c: 808: {;can.c: 809: if ((virt[2] == disp_lift) && (!setid_mode))
  7138  001546  51C7               	movf	set_output@virt& (0+255),w,b
  7139  001548  6ED9               	movwf	fsr2l,c
  7140  00154A  6ADA               	clrf	fsr2h,c
  7141  00154C  0E02               	movlw	2
  7142  00154E  26D9               	addwf	fsr2l,f,c
  7143  001550  502A               	movf	_disp_lift^0,w,c
  7144  001552  18DE               	xorwf	postinc2,w,c
  7145  001554  A4D8               	btfss	status,2,c
  7146  001556  0012               	return	
  7147                           
  7148                           ; BSR set to: 0
  7149  001558  519B               	movf	_setid_mode& (0+255),w,b
  7150  00155A  A4D8               	btfss	status,2,c
  7151  00155C  0012               	return	
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;can.c: 810: {;can.c: 811: PIE1bits.TMR1IE = 0;
  7155  00155E  909D               	bcf	157,0,c	;volatile
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;can.c: 812: buf[1] = virt[4];
  7159  001560  51C7               	movf	set_output@virt& (0+255),w,b
  7160  001562  6ED9               	movwf	fsr2l,c
  7161  001564  6ADA               	clrf	fsr2h,c
  7162  001566  0E04               	movlw	4
  7163  001568  26D9               	addwf	fsr2l,f,c
  7164  00156A  50DF               	movf	indf2,w,c
  7165  00156C  6FCE               	movwf	(set_output@buf+1)& (0+255),b
  7166                           
  7167                           ;can.c: 813: buf[2] = virt[5];
  7168  00156E  51C7               	movf	set_output@virt& (0+255),w,b
  7169  001570  6ED9               	movwf	fsr2l,c
  7170  001572  6ADA               	clrf	fsr2h,c
  7171  001574  0E05               	movlw	5
  7172  001576  26D9               	addwf	fsr2l,f,c
  7173  001578  50DF               	movf	indf2,w,c
  7174  00157A  6FCF               	movwf	(set_output@buf+2)& (0+255),b
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;can.c: 814: for(i = 0; i < 38 + 47 + 10; i++)
  7178  00157C  0E00               	movlw	0
  7179  00157E  6FD2               	movwf	set_output@i& (0+255),b
  7180  001580                     l9005:
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;can.c: 815: {;can.c: 816: if(buf[1] == tDisp_FloorAscii[i])
  7184  001580  0E69               	movlw	low _tDisp_FloorAscii
  7185  001582  25D2               	addwf	set_output@i& (0+255),w,b
  7186  001584  6EF6               	movwf	tblptrl,c
  7187  001586  6AF7               	clrf	tblptrh,c
  7188  001588  0E7F               	movlw	high _tDisp_FloorAscii
  7189  00158A  22F7               	addwfc	tblptrh,f,c
  7190  00158C                     	if	0	;There are less than 3 active tblptr bytes
  7191  00158C                     	endif
  7192  00158C  0008               	tblrd		*
  7193  00158E  50F5               	movf	tablat,w,c
  7194  001590  63CE               	cpfseq	(set_output@buf+1)& (0+255),b
  7195  001592  D003               	goto	l9011
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;can.c: 817: {;can.c: 818: display[1] = i;
  7199  001594  C0D2  F069         	movff	set_output@i,_display+1	;volatile
  7200                           
  7201                           ;can.c: 819: break;
  7202  001598  D019               	goto	u10660
  7203  00159A                     l9011:
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;can.c: 821: else if((buf[1] == 0) || (buf[1] == 0x20))
  7207  00159A  51CE               	movf	(set_output@buf+1)& (0+255),w,b
  7208  00159C  B4D8               	btfsc	status,2,c
  7209  00159E  D004               	goto	u10640
  7210                           
  7211                           ; BSR set to: 0
  7212  0015A0  0E20               	movlw	32
  7213  0015A2  19CE               	xorwf	(set_output@buf+1)& (0+255),w,b
  7214  0015A4  A4D8               	btfss	status,2,c
  7215  0015A6  D003               	goto	l9019
  7216  0015A8                     u10640:
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;can.c: 822: {;can.c: 823: display[1] = 85;
  7220  0015A8  0E55               	movlw	85
  7221  0015AA  6F69               	movwf	(_display+1)& (0+255),b	;volatile
  7222                           
  7223                           ;can.c: 824: break;
  7224  0015AC  D00F               	goto	u10660
  7225  0015AE                     l9019:
  7226                           
  7227                           ; BSR set to: 0
  7228                           ;can.c: 826: else if(tDisp_FloorAscii[i] == 0)
  7229  0015AE  0E69               	movlw	low _tDisp_FloorAscii
  7230  0015B0  25D2               	addwf	set_output@i& (0+255),w,b
  7231  0015B2  6EF6               	movwf	tblptrl,c
  7232  0015B4  6AF7               	clrf	tblptrh,c
  7233  0015B6  0E7F               	movlw	high _tDisp_FloorAscii
  7234  0015B8  22F7               	addwfc	tblptrh,f,c
  7235  0015BA                     	if	0	;There are less than 3 active tblptr bytes
  7236  0015BA                     	endif
  7237  0015BA  0008               	tblrd		*
  7238  0015BC  50F5               	movf	tablat,w,c
  7239  0015BE  0900               	iorlw	0
  7240  0015C0  B4D8               	btfsc	status,2,c
  7241  0015C2  D004               	goto	u10660
  7242                           
  7243                           ; BSR set to: 0
  7244  0015C4  2BD2               	incf	set_output@i& (0+255),f,b
  7245                           
  7246                           ; BSR set to: 0
  7247  0015C6  0E5E               	movlw	94
  7248  0015C8  65D2               	cpfsgt	set_output@i& (0+255),b
  7249  0015CA  D7DA               	goto	l9005
  7250  0015CC                     u10660:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;can.c: 829: };can.c: 830: };can.c: 831: for(i = 0; i < 38 + 47 + 10; i++)
  7254  0015CC  0E00               	movlw	0
  7255  0015CE  6FD2               	movwf	set_output@i& (0+255),b
  7256  0015D0                     l9033:
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;can.c: 832: {;can.c: 833: if(buf[2] == tDisp_FloorAscii[i])
  7260  0015D0  0E69               	movlw	low _tDisp_FloorAscii
  7261  0015D2  25D2               	addwf	set_output@i& (0+255),w,b
  7262  0015D4  6EF6               	movwf	tblptrl,c
  7263  0015D6  6AF7               	clrf	tblptrh,c
  7264  0015D8  0E7F               	movlw	high _tDisp_FloorAscii
  7265  0015DA  22F7               	addwfc	tblptrh,f,c
  7266  0015DC                     	if	0	;There are less than 3 active tblptr bytes
  7267  0015DC                     	endif
  7268  0015DC  0008               	tblrd		*
  7269  0015DE  50F5               	movf	tablat,w,c
  7270  0015E0  63CF               	cpfseq	(set_output@buf+2)& (0+255),b
  7271  0015E2  D003               	goto	l9039
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;can.c: 834: {;can.c: 835: display[2] = i;
  7275  0015E4  C0D2  F06A         	movff	set_output@i,_display+2	;volatile
  7276                           
  7277                           ;can.c: 836: break;
  7278  0015E8  D019               	goto	u10710
  7279  0015EA                     l9039:
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;can.c: 838: else if((tDisp_FloorAscii[i] == 0) || (buf[2] == 0) || (buf[2] == 0x20))
  7283  0015EA  0E69               	movlw	low _tDisp_FloorAscii
  7284  0015EC  25D2               	addwf	set_output@i& (0+255),w,b
  7285  0015EE  6EF6               	movwf	tblptrl,c
  7286  0015F0  6AF7               	clrf	tblptrh,c
  7287  0015F2  0E7F               	movlw	high _tDisp_FloorAscii
  7288  0015F4  22F7               	addwfc	tblptrh,f,c
  7289  0015F6                     	if	0	;There are less than 3 active tblptr bytes
  7290  0015F6                     	endif
  7291  0015F6  0008               	tblrd		*
  7292  0015F8  50F5               	movf	tablat,w,c
  7293  0015FA  0900               	iorlw	0
  7294  0015FC  B4D8               	btfsc	status,2,c
  7295  0015FE  D007               	goto	u10700
  7296                           
  7297                           ; BSR set to: 0
  7298  001600  51CF               	movf	(set_output@buf+2)& (0+255),w,b
  7299  001602  B4D8               	btfsc	status,2,c
  7300  001604  D004               	goto	u10700
  7301                           
  7302                           ; BSR set to: 0
  7303  001606  0E20               	movlw	32
  7304  001608  19CF               	xorwf	(set_output@buf+2)& (0+255),w,b
  7305  00160A  A4D8               	btfss	status,2,c
  7306  00160C  D003               	goto	l9047
  7307  00160E                     u10700:
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;can.c: 839: {;can.c: 840: display[2] = 85;
  7311  00160E  0E55               	movlw	85
  7312  001610  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
  7313                           
  7314                           ;can.c: 841: break;
  7315  001612  D004               	goto	u10710
  7316  001614                     l9047:
  7317                           
  7318                           ; BSR set to: 0
  7319  001614  2BD2               	incf	set_output@i& (0+255),f,b
  7320                           
  7321                           ; BSR set to: 0
  7322  001616  0E5E               	movlw	94
  7323  001618  65D2               	cpfsgt	set_output@i& (0+255),b
  7324  00161A  D7DA               	goto	l9033
  7325  00161C                     u10710:
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;can.c: 842: };can.c: 843: };can.c: 844: if (display [2] == 85)
  7329  00161C  0E55               	movlw	85
  7330  00161E  196A               	xorwf	(_display+2)& (0+255),w,b	;volatile
  7331  001620  A4D8               	btfss	status,2,c
  7332  001622  D004               	goto	l9055
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;can.c: 845: {;can.c: 846: display [1] = 37;
  7336  001624  0E25               	movlw	37
  7337  001626  6F69               	movwf	(_display+1)& (0+255),b	;volatile
  7338                           
  7339                           ;can.c: 847: display [2] = 37;
  7340  001628  0E25               	movlw	37
  7341  00162A  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
  7342  00162C                     l9055:
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;can.c: 848: };can.c: 849: PIE1bits.TMR1IE = 1;
  7346  00162C  809D               	bsf	157,0,c	;volatile
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;can.c: 850: };can.c: 851: }
  7350  00162E  0012               	return	
  7351  001630                     l9057:
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;can.c: 852: else if((iotype == 0x42) && (virt[2] == disp_lift) && (!setid_mode))
  7355  001630  0E42               	movlw	66
  7356  001632  19D1               	xorwf	set_output@iotype& (0+255),w,b
  7357  001634  A4D8               	btfss	status,2,c
  7358  001636  D041               	goto	l9085
  7359                           
  7360                           ; BSR set to: 0
  7361  001638  51C7               	movf	set_output@virt& (0+255),w,b
  7362  00163A  6ED9               	movwf	fsr2l,c
  7363  00163C  6ADA               	clrf	fsr2h,c
  7364  00163E  0E02               	movlw	2
  7365  001640  26D9               	addwf	fsr2l,f,c
  7366  001642  502A               	movf	_disp_lift^0,w,c
  7367  001644  18DE               	xorwf	postinc2,w,c
  7368  001646  A4D8               	btfss	status,2,c
  7369  001648  D038               	goto	l9085
  7370                           
  7371                           ; BSR set to: 0
  7372  00164A  519B               	movf	_setid_mode& (0+255),w,b
  7373  00164C  A4D8               	btfss	status,2,c
  7374  00164E  D035               	goto	l9085
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;can.c: 853: {;can.c: 854: PIE1bits.TMR1IE = 0;
  7378  001650  909D               	bcf	157,0,c	;volatile
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;can.c: 855: if (!virt [5] & 0x01)
  7382  001652  51C7               	movf	set_output@virt& (0+255),w,b
  7383  001654  6ED9               	movwf	fsr2l,c
  7384  001656  6ADA               	clrf	fsr2h,c
  7385  001658  0E05               	movlw	5
  7386  00165A  26D9               	addwf	fsr2l,f,c
  7387  00165C  50DF               	movf	indf2,w,c
  7388  00165E  A4D8               	btfss	status,2,c
  7389  001660  D003               	goto	u10760
  7390  001662  6BC8               	clrf	??_set_output& (0+255),b
  7391  001664  2BC8               	incf	??_set_output& (0+255),f,b
  7392  001666  D002               	goto	u10778
  7393  001668                     u10760:
  7394  001668  0100               	movlb	0	; () banked
  7395  00166A  6BC8               	clrf	??_set_output& (0+255),b
  7396  00166C                     u10778:
  7397  00166C  A1C8               	btfss	??_set_output& (0+255),0,b
  7398  00166E  D002               	goto	l9069
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;can.c: 856: display [0] = 0;
  7402  001670  0E00               	movlw	0
  7403  001672  D007               	goto	L13
  7404  001674                     l9069:
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;can.c: 857: else;can.c: 858: display [0] = (virt [1] & 0x03);
  7408  001674  51C7               	movf	set_output@virt& (0+255),w,b
  7409  001676  6ED9               	movwf	fsr2l,c
  7410  001678  6ADA               	clrf	fsr2h,c
  7411  00167A  0E01               	movlw	1
  7412  00167C  26D9               	addwf	fsr2l,f,c
  7413  00167E  50DF               	movf	indf2,w,c
  7414  001680  0B03               	andlw	3
  7415  001682                     L13:
  7416  001682  6F68               	movwf	_display& (0+255),b	;volatile
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;can.c: 859: if (display [0] > 2)
  7420  001684  0E02               	movlw	2
  7421  001686  6568               	cpfsgt	_display& (0+255),b	;volatile
  7422  001688  D002               	goto	l1155
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;can.c: 860: display [0] = 0;
  7426  00168A  0E00               	movlw	0
  7427  00168C  6F68               	movwf	_display& (0+255),b	;volatile
  7428  00168E                     l1155:
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;can.c: 861: if(display [0] == 0)
  7432  00168E  5168               	movf	_display& (0+255),w,b	;volatile
  7433  001690  A4D8               	btfss	status,2,c
  7434  001692  D002               	goto	l9077
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;can.c: 862: scroll = 0;
  7438  001694  0E00               	movlw	0
  7439  001696  D00A               	goto	L14
  7440  001698                     l9077:
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;can.c: 863: else;can.c: 864: scroll = (virt[1] >> 4) & 0x03;
  7444  001698  51C7               	movf	set_output@virt& (0+255),w,b
  7445  00169A  6ED9               	movwf	fsr2l,c
  7446  00169C  6ADA               	clrf	fsr2h,c
  7447  00169E  0E01               	movlw	1
  7448  0016A0  26D9               	addwf	fsr2l,f,c
  7449  0016A2  50DF               	movf	indf2,w,c
  7450  0016A4  6FC8               	movwf	??_set_output& (0+255),b
  7451  0016A6  39C8               	swapf	??_set_output& (0+255),w,b
  7452  0016A8  0B0F               	andlw	15
  7453  0016AA  0B03               	andlw	3
  7454  0016AC                     L14:
  7455  0016AC  6E25               	movwf	_scroll^0,c
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;can.c: 865: display[0] += 85;
  7459  0016AE  0E55               	movlw	85
  7460  0016B0  2768               	addwf	_display& (0+255),f,b	;volatile
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;can.c: 866: flashcontent = display[0];
  7464  0016B2  C068  F024         	movff	_display,_flashcontent	;volatile
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;can.c: 867: PIE1bits.TMR1IE = 1;
  7468  0016B6  809D               	bsf	157,0,c	;volatile
  7469                           
  7470                           ;can.c: 868: }
  7471  0016B8  0012               	return	
  7472  0016BA                     l9085:
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;can.c: 869: else if ((iotype == 0x41) || (iotype == 0x49))
  7476  0016BA  0E41               	movlw	65
  7477  0016BC  19D1               	xorwf	set_output@iotype& (0+255),w,b
  7478  0016BE  B4D8               	btfsc	status,2,c
  7479  0016C0  D004               	goto	u10820
  7480                           
  7481                           ; BSR set to: 0
  7482  0016C2  0E49               	movlw	73
  7483  0016C4  19D1               	xorwf	set_output@iotype& (0+255),w,b
  7484  0016C6  A4D8               	btfss	status,2,c
  7485  0016C8  D1BC               	goto	l9215
  7486  0016CA                     u10820:
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;can.c: 870: {;can.c: 871: sub = virt [1];
  7490  0016CA  51C7               	movf	set_output@virt& (0+255),w,b
  7491  0016CC  6ED9               	movwf	fsr2l,c
  7492  0016CE  6ADA               	clrf	fsr2h,c
  7493  0016D0  0E01               	movlw	1
  7494  0016D2  26D9               	addwf	fsr2l,f,c
  7495  0016D4  50DF               	movf	indf2,w,c
  7496  0016D6  6FD0               	movwf	set_output@sub& (0+255),b
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;can.c: 872: if(iotype == 0x41)
  7500  0016D8  0E41               	movlw	65
  7501  0016DA  19D1               	xorwf	set_output@iotype& (0+255),w,b
  7502  0016DC  A4D8               	btfss	status,2,c
  7503  0016DE  D0E4               	goto	l9155
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;can.c: 873: {;can.c: 874: for (i = 0; i < 8; i++)
  7507  0016E0  0E00               	movlw	0
  7508  0016E2  6FD2               	movwf	set_output@i& (0+255),b
  7509  0016E4                     l9099:
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;can.c: 875: {;can.c: 876: if ((virt[0] == outpar[i][0]) &&;can.c: 877: (virt[2] == outp
      +                          ar[i][2]) &&;can.c: 878: (outpar[i][6] == 1))
  7513  0016E4  51D2               	movf	set_output@i& (0+255),w,b
  7514  0016E6  0D08               	mullw	8
  7515  0016E8  0E00               	movlw	low _outpar
  7516  0016EA  24F3               	addwf	243,w,c
  7517  0016EC  6ED9               	movwf	fsr2l,c
  7518  0016EE  0E01               	movlw	high _outpar
  7519  0016F0  20F4               	addwfc	prodh,w,c
  7520  0016F2  6EDA               	movwf	fsr2h,c
  7521  0016F4  51C7               	movf	set_output@virt& (0+255),w,b
  7522  0016F6  6EE1               	movwf	fsr1l,c
  7523  0016F8  6AE2               	clrf	fsr1h,c
  7524  0016FA  50DE               	movf	postinc2,w,c
  7525  0016FC  18E6               	xorwf	postinc1,w,c
  7526  0016FE  A4D8               	btfss	status,2,c
  7527  001700  D0CE               	goto	l9151
  7528                           
  7529                           ; BSR set to: 0
  7530  001702  51D2               	movf	set_output@i& (0+255),w,b
  7531  001704  0D08               	mullw	8
  7532  001706  0E02               	movlw	low (_outpar+2)
  7533  001708  24F3               	addwf	243,w,c
  7534  00170A  6ED9               	movwf	fsr2l,c
  7535  00170C  0E01               	movlw	high (_outpar+2)
  7536  00170E  20F4               	addwfc	prodh,w,c
  7537  001710  6EDA               	movwf	fsr2h,c
  7538  001712  51C7               	movf	set_output@virt& (0+255),w,b
  7539  001714  6EE1               	movwf	fsr1l,c
  7540  001716  6AE2               	clrf	fsr1h,c
  7541  001718  0E02               	movlw	2
  7542  00171A  26E1               	addwf	fsr1l,f,c
  7543  00171C  50DE               	movf	postinc2,w,c
  7544  00171E  18E6               	xorwf	postinc1,w,c
  7545  001720  A4D8               	btfss	status,2,c
  7546  001722  D0BD               	goto	l9151
  7547                           
  7548                           ; BSR set to: 0
  7549  001724  51D2               	movf	set_output@i& (0+255),w,b
  7550  001726  0D08               	mullw	8
  7551  001728  0E06               	movlw	low (_outpar+6)
  7552  00172A  24F3               	addwf	243,w,c
  7553  00172C  6ED9               	movwf	fsr2l,c
  7554  00172E  0E01               	movlw	high (_outpar+6)
  7555  001730  20F4               	addwfc	prodh,w,c
  7556  001732  6EDA               	movwf	fsr2h,c
  7557  001734  04DE               	decf	postinc2,w,c
  7558  001736  A4D8               	btfss	status,2,c
  7559  001738  D0B2               	goto	l9151
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;can.c: 879: {;can.c: 880: if (((virt[1] & outpar[i][1] & 0x03) || (!outpar[i][1])) &&;c
      +                          an.c: 881: ((virt[3] == outpar[i][3]) || (virt[3] == 0xFF) || (!outpar[i][3])) &&;can.c:
      +                           882: ((virt[4] & outpar[i][4]) || (!outpar[i][4])))
  7563  00173A  51D2               	movf	set_output@i& (0+255),w,b
  7564  00173C  0D08               	mullw	8
  7565  00173E  0E01               	movlw	low (_outpar+1)
  7566  001740  24F3               	addwf	243,w,c
  7567  001742  6ED9               	movwf	fsr2l,c
  7568  001744  0E01               	movlw	high (_outpar+1)
  7569  001746  20F4               	addwfc	prodh,w,c
  7570  001748  6EDA               	movwf	fsr2h,c
  7571  00174A  50DF               	movf	indf2,w,c
  7572  00174C  6FC8               	movwf	??_set_output& (0+255),b
  7573  00174E  51C7               	movf	set_output@virt& (0+255),w,b
  7574  001750  6ED9               	movwf	fsr2l,c
  7575  001752  6ADA               	clrf	fsr2h,c
  7576  001754  0E01               	movlw	1
  7577  001756  26D9               	addwf	fsr2l,f,c
  7578  001758  50DF               	movf	indf2,w,c
  7579  00175A  15C8               	andwf	??_set_output& (0+255),w,b
  7580  00175C  6FC9               	movwf	(??_set_output+1)& (0+255),b
  7581  00175E  0E03               	movlw	3
  7582  001760  17C9               	andwf	(??_set_output+1)& (0+255),f,b
  7583  001762  A4D8               	btfss	status,2,c
  7584  001764  D00B               	goto	u10880
  7585                           
  7586                           ; BSR set to: 0
  7587  001766  51D2               	movf	set_output@i& (0+255),w,b
  7588  001768  0D08               	mullw	8
  7589  00176A  0E01               	movlw	low (_outpar+1)
  7590  00176C  24F3               	addwf	243,w,c
  7591  00176E  6ED9               	movwf	fsr2l,c
  7592  001770  0E01               	movlw	high (_outpar+1)
  7593  001772  20F4               	addwfc	prodh,w,c
  7594  001774  6EDA               	movwf	fsr2h,c
  7595  001776  50DF               	movf	indf2,w,c
  7596  001778  A4D8               	btfss	status,2,c
  7597  00177A  D064               	goto	l9127
  7598  00177C                     u10880:
  7599                           
  7600                           ; BSR set to: 0
  7601  00177C  51D2               	movf	set_output@i& (0+255),w,b
  7602  00177E  0D08               	mullw	8
  7603  001780  0E03               	movlw	low (_outpar+3)
  7604  001782  24F3               	addwf	243,w,c
  7605  001784  6ED9               	movwf	fsr2l,c
  7606  001786  0E01               	movlw	high (_outpar+3)
  7607  001788  20F4               	addwfc	prodh,w,c
  7608  00178A  6EDA               	movwf	fsr2h,c
  7609  00178C  51C7               	movf	set_output@virt& (0+255),w,b
  7610  00178E  6EE1               	movwf	fsr1l,c
  7611  001790  6AE2               	clrf	fsr1h,c
  7612  001792  0E03               	movlw	3
  7613  001794  26E1               	addwf	fsr1l,f,c
  7614  001796  50DE               	movf	postinc2,w,c
  7615  001798  18E6               	xorwf	postinc1,w,c
  7616  00179A  B4D8               	btfsc	status,2,c
  7617  00179C  D013               	goto	u10910
  7618                           
  7619                           ; BSR set to: 0
  7620  00179E  51C7               	movf	set_output@virt& (0+255),w,b
  7621  0017A0  6ED9               	movwf	fsr2l,c
  7622  0017A2  6ADA               	clrf	fsr2h,c
  7623  0017A4  0E03               	movlw	3
  7624  0017A6  26D9               	addwf	fsr2l,f,c
  7625  0017A8  28DE               	incf	postinc2,w,c
  7626  0017AA  B4D8               	btfsc	status,2,c
  7627  0017AC  D00B               	goto	u10910
  7628                           
  7629                           ; BSR set to: 0
  7630  0017AE  51D2               	movf	set_output@i& (0+255),w,b
  7631  0017B0  0D08               	mullw	8
  7632  0017B2  0E03               	movlw	low (_outpar+3)
  7633  0017B4  24F3               	addwf	243,w,c
  7634  0017B6  6ED9               	movwf	fsr2l,c
  7635  0017B8  0E01               	movlw	high (_outpar+3)
  7636  0017BA  20F4               	addwfc	prodh,w,c
  7637  0017BC  6EDA               	movwf	fsr2h,c
  7638  0017BE  50DF               	movf	indf2,w,c
  7639  0017C0  A4D8               	btfss	status,2,c
  7640  0017C2  D040               	goto	l9127
  7641  0017C4                     u10910:
  7642                           
  7643                           ; BSR set to: 0
  7644  0017C4  51D2               	movf	set_output@i& (0+255),w,b
  7645  0017C6  0D08               	mullw	8
  7646  0017C8  0E04               	movlw	low (_outpar+4)
  7647  0017CA  24F3               	addwf	243,w,c
  7648  0017CC  6ED9               	movwf	fsr2l,c
  7649  0017CE  0E01               	movlw	high (_outpar+4)
  7650  0017D0  20F4               	addwfc	prodh,w,c
  7651  0017D2  6EDA               	movwf	fsr2h,c
  7652  0017D4  50DF               	movf	indf2,w,c
  7653  0017D6  6FC8               	movwf	??_set_output& (0+255),b
  7654  0017D8  51C7               	movf	set_output@virt& (0+255),w,b
  7655  0017DA  6ED9               	movwf	fsr2l,c
  7656  0017DC  6ADA               	clrf	fsr2h,c
  7657  0017DE  0E04               	movlw	4
  7658  0017E0  26D9               	addwf	fsr2l,f,c
  7659  0017E2  50DF               	movf	indf2,w,c
  7660  0017E4  15C8               	andwf	??_set_output& (0+255),w,b
  7661  0017E6  0900               	iorlw	0
  7662  0017E8  A4D8               	btfss	status,2,c
  7663  0017EA  D00B               	goto	u10930
  7664                           
  7665                           ; BSR set to: 0
  7666  0017EC  51D2               	movf	set_output@i& (0+255),w,b
  7667  0017EE  0D08               	mullw	8
  7668  0017F0  0E04               	movlw	low (_outpar+4)
  7669  0017F2  24F3               	addwf	243,w,c
  7670  0017F4  6ED9               	movwf	fsr2l,c
  7671  0017F6  0E01               	movlw	high (_outpar+4)
  7672  0017F8  20F4               	addwfc	prodh,w,c
  7673  0017FA  6EDA               	movwf	fsr2h,c
  7674  0017FC  50DF               	movf	indf2,w,c
  7675  0017FE  A4D8               	btfss	status,2,c
  7676  001800  D021               	goto	l9127
  7677  001802                     u10930:
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;can.c: 883: {;can.c: 884: if (!direction_ind_mode)
  7681  001802  5027               	movf	_direction_ind_mode^0,w,c
  7682  001804  A4D8               	btfss	status,2,c
  7683  001806  D037               	goto	l9131
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;can.c: 885: {;can.c: 886: if (virt[5] & 0x01)
  7687  001808  51C7               	movf	set_output@virt& (0+255),w,b
  7688  00180A  6ED9               	movwf	fsr2l,c
  7689  00180C  6ADA               	clrf	fsr2h,c
  7690  00180E  0E05               	movlw	5
  7691  001810  26D9               	addwf	fsr2l,f,c
  7692  001812  A0DF               	btfss	indf2,0,c
  7693  001814  D017               	goto	l9127
  7694  001816                     u10950:
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;can.c: 887: {;can.c: 888: (out |= (1 << i));
  7698  001816  C0D2  F0C8         	movff	set_output@i,??_set_output
  7699  00181A  0E01               	movlw	1
  7700  00181C  6FC9               	movwf	(??_set_output+1)& (0+255),b
  7701  00181E  2BC8               	incf	??_set_output& (0+255),f,b
  7702  001820  D002               	goto	u10964
  7703  001822                     u10965:
  7704  001822  90D8               	bcf	status,0,c
  7705  001824  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  7706  001826                     u10964:
  7707  001826  2FC8               	decfsz	??_set_output& (0+255),f,b
  7708  001828  D7FC               	goto	u10965
  7709  00182A  0100               	movlb	0	; () banked
  7710  00182C  51C9               	movf	(??_set_output+1)& (0+255),w,b
  7711  00182E  122B               	iorwf	_out^0,f,c	;volatile
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;can.c: 889: outpar[i][5] = 1;
  7715  001830  51D2               	movf	set_output@i& (0+255),w,b
  7716  001832  0D08               	mullw	8
  7717  001834  0E05               	movlw	low (_outpar+5)
  7718  001836  24F3               	addwf	243,w,c
  7719  001838  6ED9               	movwf	fsr2l,c
  7720  00183A  0E01               	movlw	high (_outpar+5)
  7721  00183C  20F4               	addwfc	prodh,w,c
  7722  00183E  6EDA               	movwf	fsr2h,c
  7723  001840  0E01               	movlw	1
  7724  001842  D017               	goto	L15
  7725  001844                     l9127:
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;can.c: 891: else;can.c: 892: {;can.c: 893: (out &= ~(1 << i));
  7729  001844  C0D2  F0C8         	movff	set_output@i,??_set_output
  7730  001848  0E01               	movlw	1
  7731  00184A  6FC9               	movwf	(??_set_output+1)& (0+255),b
  7732  00184C  2BC8               	incf	??_set_output& (0+255),f,b
  7733  00184E  D002               	goto	u10974
  7734  001850                     u10975:
  7735  001850  90D8               	bcf	status,0,c
  7736  001852  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  7737  001854                     u10974:
  7738  001854  2FC8               	decfsz	??_set_output& (0+255),f,b
  7739  001856  D7FC               	goto	u10975
  7740  001858  0100               	movlb	0	; () banked
  7741  00185A  51C9               	movf	(??_set_output+1)& (0+255),w,b
  7742  00185C  0AFF               	xorlw	255
  7743  00185E  162B               	andwf	_out^0,f,c	;volatile
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;can.c: 894: outpar[i][5] = 0;
  7747  001860  51D2               	movf	set_output@i& (0+255),w,b
  7748  001862  0D08               	mullw	8
  7749  001864  0E05               	movlw	low (_outpar+5)
  7750  001866  24F3               	addwf	243,w,c
  7751  001868  6ED9               	movwf	fsr2l,c
  7752  00186A  0E01               	movlw	high (_outpar+5)
  7753  00186C  20F4               	addwfc	prodh,w,c
  7754  00186E  6EDA               	movwf	fsr2h,c
  7755  001870  0E00               	movlw	0
  7756  001872                     L15:
  7757  001872  6EDF               	movwf	indf2,c
  7758  001874  D014               	goto	l9151
  7759  001876                     l9131:
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;can.c: 897: else;can.c: 898: {;can.c: 899: if (virt[1] >> 4)
  7763  001876  51C7               	movf	set_output@virt& (0+255),w,b
  7764  001878  6ED9               	movwf	fsr2l,c
  7765  00187A  6ADA               	clrf	fsr2h,c
  7766  00187C  0E01               	movlw	1
  7767  00187E  26D9               	addwf	fsr2l,f,c
  7768  001880  50DF               	movf	indf2,w,c
  7769  001882  6FC8               	movwf	??_set_output& (0+255),b
  7770  001884  3BC8               	swapf	??_set_output& (0+255),f,b
  7771  001886  0E0F               	movlw	15
  7772  001888  17C8               	andwf	??_set_output& (0+255),f,b
  7773  00188A  A4D8               	btfss	status,2,c
  7774  00188C  D7DB               	goto	l9127
  7775                           
  7776                           ; BSR set to: 0
  7777                           ;can.c: 904: else;can.c: 905: {;can.c: 906: if (virt[5] & 0x01)
  7778  00188E  51C7               	movf	set_output@virt& (0+255),w,b
  7779  001890  6ED9               	movwf	fsr2l,c
  7780  001892  6ADA               	clrf	fsr2h,c
  7781  001894  0E05               	movlw	5
  7782  001896  26D9               	addwf	fsr2l,f,c
  7783  001898  B0DF               	btfsc	indf2,0,c
  7784  00189A  D7BD               	goto	u10950
  7785  00189C  D7D3               	goto	l9127
  7786  00189E                     l9151:
  7787                           
  7788                           ; BSR set to: 0
  7789  00189E  2BD2               	incf	set_output@i& (0+255),f,b
  7790                           
  7791                           ; BSR set to: 0
  7792  0018A0  0E07               	movlw	7
  7793  0018A2  65D2               	cpfsgt	set_output@i& (0+255),b
  7794  0018A4  D71F               	goto	l9099
  7795  0018A6  0012               	return	
  7796  0018A8                     l9155:
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;can.c: 927: else if((iotype == 0x49) &&;can.c: 928: (sub & (0x01 | 0x02 | 0x04 | 0x08))
      +                          )
  7800  0018A8  0E49               	movlw	73
  7801  0018AA  19D1               	xorwf	set_output@iotype& (0+255),w,b
  7802  0018AC  A4D8               	btfss	status,2,c
  7803  0018AE  0012               	return	
  7804                           
  7805                           ; BSR set to: 0
  7806  0018B0  C0D0  F0C8         	movff	set_output@sub,??_set_output
  7807  0018B4  0E0F               	movlw	15
  7808  0018B6  17C8               	andwf	??_set_output& (0+255),f,b
  7809  0018B8  B4D8               	btfsc	status,2,c
  7810  0018BA  0012               	return	
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;can.c: 929: {;can.c: 930: for (i = 0; i < 8; i++)
  7814  0018BC  0E00               	movlw	0
  7815  0018BE  6FD2               	movwf	set_output@i& (0+255),b
  7816  0018C0                     l9165:
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;can.c: 931: {;can.c: 932: if ((virt[0] == outpar[i][0]) &&;can.c: 933: (virt[2] == outp
      +                          ar[i][2]) &&;can.c: 934: (outpar[i][6] == 1))
  7820  0018C0  51D2               	movf	set_output@i& (0+255),w,b
  7821  0018C2  0D08               	mullw	8
  7822  0018C4  0E00               	movlw	low _outpar
  7823  0018C6  24F3               	addwf	243,w,c
  7824  0018C8  6ED9               	movwf	fsr2l,c
  7825  0018CA  0E01               	movlw	high _outpar
  7826  0018CC  20F4               	addwfc	prodh,w,c
  7827  0018CE  6EDA               	movwf	fsr2h,c
  7828  0018D0  51C7               	movf	set_output@virt& (0+255),w,b
  7829  0018D2  6EE1               	movwf	fsr1l,c
  7830  0018D4  6AE2               	clrf	fsr1h,c
  7831  0018D6  50DE               	movf	postinc2,w,c
  7832  0018D8  18E6               	xorwf	postinc1,w,c
  7833  0018DA  A4D8               	btfss	status,2,c
  7834  0018DC  D0AD               	goto	l9211
  7835                           
  7836                           ; BSR set to: 0
  7837  0018DE  51D2               	movf	set_output@i& (0+255),w,b
  7838  0018E0  0D08               	mullw	8
  7839  0018E2  0E02               	movlw	low (_outpar+2)
  7840  0018E4  24F3               	addwf	243,w,c
  7841  0018E6  6ED9               	movwf	fsr2l,c
  7842  0018E8  0E01               	movlw	high (_outpar+2)
  7843  0018EA  20F4               	addwfc	prodh,w,c
  7844  0018EC  6EDA               	movwf	fsr2h,c
  7845  0018EE  51C7               	movf	set_output@virt& (0+255),w,b
  7846  0018F0  6EE1               	movwf	fsr1l,c
  7847  0018F2  6AE2               	clrf	fsr1h,c
  7848  0018F4  0E02               	movlw	2
  7849  0018F6  26E1               	addwf	fsr1l,f,c
  7850  0018F8  50DE               	movf	postinc2,w,c
  7851  0018FA  18E6               	xorwf	postinc1,w,c
  7852  0018FC  A4D8               	btfss	status,2,c
  7853  0018FE  D09C               	goto	l9211
  7854                           
  7855                           ; BSR set to: 0
  7856  001900  51D2               	movf	set_output@i& (0+255),w,b
  7857  001902  0D08               	mullw	8
  7858  001904  0E06               	movlw	low (_outpar+6)
  7859  001906  24F3               	addwf	243,w,c
  7860  001908  6ED9               	movwf	fsr2l,c
  7861  00190A  0E01               	movlw	high (_outpar+6)
  7862  00190C  20F4               	addwfc	prodh,w,c
  7863  00190E  6EDA               	movwf	fsr2h,c
  7864  001910  04DE               	decf	postinc2,w,c
  7865  001912  A4D8               	btfss	status,2,c
  7866  001914  D091               	goto	l9211
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;can.c: 935: {;can.c: 936: if ((virt[1] & outpar[i][1] & 0x0F) &&;can.c: 937: ((virt[3] 
      +                          == outpar[i][3]) || (virt[3] == 0xFF)) &&;can.c: 938: (virt[4] & outpar[i][4]))
  7870  001916  51D2               	movf	set_output@i& (0+255),w,b
  7871  001918  0D08               	mullw	8
  7872  00191A  0E01               	movlw	low (_outpar+1)
  7873  00191C  24F3               	addwf	243,w,c
  7874  00191E  6ED9               	movwf	fsr2l,c
  7875  001920  0E01               	movlw	high (_outpar+1)
  7876  001922  20F4               	addwfc	prodh,w,c
  7877  001924  6EDA               	movwf	fsr2h,c
  7878  001926  50DF               	movf	indf2,w,c
  7879  001928  6FC8               	movwf	??_set_output& (0+255),b
  7880  00192A  51C7               	movf	set_output@virt& (0+255),w,b
  7881  00192C  6ED9               	movwf	fsr2l,c
  7882  00192E  6ADA               	clrf	fsr2h,c
  7883  001930  0E01               	movlw	1
  7884  001932  26D9               	addwf	fsr2l,f,c
  7885  001934  50DF               	movf	indf2,w,c
  7886  001936  15C8               	andwf	??_set_output& (0+255),w,b
  7887  001938  6FC9               	movwf	(??_set_output+1)& (0+255),b
  7888  00193A  0E0F               	movlw	15
  7889  00193C  17C9               	andwf	(??_set_output+1)& (0+255),f,b
  7890  00193E  B4D8               	btfsc	status,2,c
  7891  001940  D04E               	goto	l9187
  7892                           
  7893                           ; BSR set to: 0
  7894  001942  51D2               	movf	set_output@i& (0+255),w,b
  7895  001944  0D08               	mullw	8
  7896  001946  0E03               	movlw	low (_outpar+3)
  7897  001948  24F3               	addwf	243,w,c
  7898  00194A  6ED9               	movwf	fsr2l,c
  7899  00194C  0E01               	movlw	high (_outpar+3)
  7900  00194E  20F4               	addwfc	prodh,w,c
  7901  001950  6EDA               	movwf	fsr2h,c
  7902  001952  51C7               	movf	set_output@virt& (0+255),w,b
  7903  001954  6EE1               	movwf	fsr1l,c
  7904  001956  6AE2               	clrf	fsr1h,c
  7905  001958  0E03               	movlw	3
  7906  00195A  26E1               	addwf	fsr1l,f,c
  7907  00195C  50DE               	movf	postinc2,w,c
  7908  00195E  18E6               	xorwf	postinc1,w,c
  7909  001960  B4D8               	btfsc	status,2,c
  7910  001962  D008               	goto	u11080
  7911                           
  7912                           ; BSR set to: 0
  7913  001964  51C7               	movf	set_output@virt& (0+255),w,b
  7914  001966  6ED9               	movwf	fsr2l,c
  7915  001968  6ADA               	clrf	fsr2h,c
  7916  00196A  0E03               	movlw	3
  7917  00196C  26D9               	addwf	fsr2l,f,c
  7918  00196E  28DE               	incf	postinc2,w,c
  7919  001970  A4D8               	btfss	status,2,c
  7920  001972  D035               	goto	l9187
  7921  001974                     u11080:
  7922                           
  7923                           ; BSR set to: 0
  7924  001974  51D2               	movf	set_output@i& (0+255),w,b
  7925  001976  0D08               	mullw	8
  7926  001978  0E04               	movlw	low (_outpar+4)
  7927  00197A  24F3               	addwf	243,w,c
  7928  00197C  6ED9               	movwf	fsr2l,c
  7929  00197E  0E01               	movlw	high (_outpar+4)
  7930  001980  20F4               	addwfc	prodh,w,c
  7931  001982  6EDA               	movwf	fsr2h,c
  7932  001984  50DF               	movf	indf2,w,c
  7933  001986  6FC8               	movwf	??_set_output& (0+255),b
  7934  001988  51C7               	movf	set_output@virt& (0+255),w,b
  7935  00198A  6ED9               	movwf	fsr2l,c
  7936  00198C  6ADA               	clrf	fsr2h,c
  7937  00198E  0E04               	movlw	4
  7938  001990  26D9               	addwf	fsr2l,f,c
  7939  001992  50DF               	movf	indf2,w,c
  7940  001994  15C8               	andwf	??_set_output& (0+255),w,b
  7941  001996  0900               	iorlw	0
  7942  001998  B4D8               	btfsc	status,2,c
  7943  00199A  D021               	goto	l9187
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;can.c: 939: {;can.c: 940: if (!direction_ind_mode)
  7947  00199C  5027               	movf	_direction_ind_mode^0,w,c
  7948  00199E  A4D8               	btfss	status,2,c
  7949  0019A0  D037               	goto	l9191
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;can.c: 941: {;can.c: 942: if (virt[5] & 0x01)
  7953  0019A2  51C7               	movf	set_output@virt& (0+255),w,b
  7954  0019A4  6ED9               	movwf	fsr2l,c
  7955  0019A6  6ADA               	clrf	fsr2h,c
  7956  0019A8  0E05               	movlw	5
  7957  0019AA  26D9               	addwf	fsr2l,f,c
  7958  0019AC  A0DF               	btfss	indf2,0,c
  7959  0019AE  D017               	goto	l9187
  7960  0019B0                     u11110:
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;can.c: 943: {;can.c: 944: (out |= (1 << i));
  7964  0019B0  C0D2  F0C8         	movff	set_output@i,??_set_output
  7965  0019B4  0E01               	movlw	1
  7966  0019B6  6FC9               	movwf	(??_set_output+1)& (0+255),b
  7967  0019B8  2BC8               	incf	??_set_output& (0+255),f,b
  7968  0019BA  D002               	goto	u11124
  7969  0019BC                     u11125:
  7970  0019BC  90D8               	bcf	status,0,c
  7971  0019BE  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  7972  0019C0                     u11124:
  7973  0019C0  2FC8               	decfsz	??_set_output& (0+255),f,b
  7974  0019C2  D7FC               	goto	u11125
  7975  0019C4  0100               	movlb	0	; () banked
  7976  0019C6  51C9               	movf	(??_set_output+1)& (0+255),w,b
  7977  0019C8  122B               	iorwf	_out^0,f,c	;volatile
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;can.c: 945: outpar[i][5] = 1;
  7981  0019CA  51D2               	movf	set_output@i& (0+255),w,b
  7982  0019CC  0D08               	mullw	8
  7983  0019CE  0E05               	movlw	low (_outpar+5)
  7984  0019D0  24F3               	addwf	243,w,c
  7985  0019D2  6ED9               	movwf	fsr2l,c
  7986  0019D4  0E01               	movlw	high (_outpar+5)
  7987  0019D6  20F4               	addwfc	prodh,w,c
  7988  0019D8  6EDA               	movwf	fsr2h,c
  7989  0019DA  0E01               	movlw	1
  7990  0019DC  D017               	goto	L16
  7991  0019DE                     l9187:
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;can.c: 947: else;can.c: 948: {;can.c: 949: (out &= ~(1 << i));
  7995  0019DE  C0D2  F0C8         	movff	set_output@i,??_set_output
  7996  0019E2  0E01               	movlw	1
  7997  0019E4  6FC9               	movwf	(??_set_output+1)& (0+255),b
  7998  0019E6  2BC8               	incf	??_set_output& (0+255),f,b
  7999  0019E8  D002               	goto	u11134
  8000  0019EA                     u11135:
  8001  0019EA  90D8               	bcf	status,0,c
  8002  0019EC  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  8003  0019EE                     u11134:
  8004  0019EE  2FC8               	decfsz	??_set_output& (0+255),f,b
  8005  0019F0  D7FC               	goto	u11135
  8006  0019F2  0100               	movlb	0	; () banked
  8007  0019F4  51C9               	movf	(??_set_output+1)& (0+255),w,b
  8008  0019F6  0AFF               	xorlw	255
  8009  0019F8  162B               	andwf	_out^0,f,c	;volatile
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;can.c: 950: outpar[i][5] = 0;
  8013  0019FA  51D2               	movf	set_output@i& (0+255),w,b
  8014  0019FC  0D08               	mullw	8
  8015  0019FE  0E05               	movlw	low (_outpar+5)
  8016  001A00  24F3               	addwf	243,w,c
  8017  001A02  6ED9               	movwf	fsr2l,c
  8018  001A04  0E01               	movlw	high (_outpar+5)
  8019  001A06  20F4               	addwfc	prodh,w,c
  8020  001A08  6EDA               	movwf	fsr2h,c
  8021  001A0A  0E00               	movlw	0
  8022  001A0C                     L16:
  8023  001A0C  6EDF               	movwf	indf2,c
  8024  001A0E  D014               	goto	l9211
  8025  001A10                     l9191:
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;can.c: 953: else;can.c: 954: {;can.c: 955: if (virt[1] >> 4)
  8029  001A10  51C7               	movf	set_output@virt& (0+255),w,b
  8030  001A12  6ED9               	movwf	fsr2l,c
  8031  001A14  6ADA               	clrf	fsr2h,c
  8032  001A16  0E01               	movlw	1
  8033  001A18  26D9               	addwf	fsr2l,f,c
  8034  001A1A  50DF               	movf	indf2,w,c
  8035  001A1C  6FC8               	movwf	??_set_output& (0+255),b
  8036  001A1E  3BC8               	swapf	??_set_output& (0+255),f,b
  8037  001A20  0E0F               	movlw	15
  8038  001A22  17C8               	andwf	??_set_output& (0+255),f,b
  8039  001A24  A4D8               	btfss	status,2,c
  8040  001A26  D7DB               	goto	l9187
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;can.c: 960: else;can.c: 961: {;can.c: 962: if (virt[5] & 0x01)
  8044  001A28  51C7               	movf	set_output@virt& (0+255),w,b
  8045  001A2A  6ED9               	movwf	fsr2l,c
  8046  001A2C  6ADA               	clrf	fsr2h,c
  8047  001A2E  0E05               	movlw	5
  8048  001A30  26D9               	addwf	fsr2l,f,c
  8049  001A32  B0DF               	btfsc	indf2,0,c
  8050  001A34  D7BD               	goto	u11110
  8051  001A36  D7D3               	goto	l9187
  8052  001A38                     l9211:
  8053                           
  8054                           ; BSR set to: 0
  8055  001A38  2BD2               	incf	set_output@i& (0+255),f,b
  8056                           
  8057                           ; BSR set to: 0
  8058  001A3A  0E07               	movlw	7
  8059  001A3C  65D2               	cpfsgt	set_output@i& (0+255),b
  8060  001A3E  D740               	goto	l9165
  8061  001A40  0012               	return	
  8062  001A42                     l9215:
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;can.c: 984: else if (iotype == 0x44)
  8066  001A42  0E44               	movlw	68
  8067  001A44  19D1               	xorwf	set_output@iotype& (0+255),w,b
  8068  001A46  A4D8               	btfss	status,2,c
  8069  001A48  D0BE               	goto	l9255
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;can.c: 985: {;can.c: 986: for (i = 0; i < 8; i++)
  8073  001A4A  0E00               	movlw	0
  8074  001A4C  6FD2               	movwf	set_output@i& (0+255),b
  8075  001A4E                     l9223:
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;can.c: 987: {;can.c: 988: if (virt[0] == outpar[i][0])
  8079  001A4E  51D2               	movf	set_output@i& (0+255),w,b
  8080  001A50  0D08               	mullw	8
  8081  001A52  0E00               	movlw	low _outpar
  8082  001A54  24F3               	addwf	243,w,c
  8083  001A56  6ED9               	movwf	fsr2l,c
  8084  001A58  0E01               	movlw	high _outpar
  8085  001A5A  20F4               	addwfc	prodh,w,c
  8086  001A5C  6EDA               	movwf	fsr2h,c
  8087  001A5E  51C7               	movf	set_output@virt& (0+255),w,b
  8088  001A60  6EE1               	movwf	fsr1l,c
  8089  001A62  6AE2               	clrf	fsr1h,c
  8090  001A64  50DE               	movf	postinc2,w,c
  8091  001A66  18E6               	xorwf	postinc1,w,c
  8092  001A68  A4D8               	btfss	status,2,c
  8093  001A6A  D0A8               	goto	l1210
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;can.c: 989: if ((virt[1] & outpar[i][1] & 0x03) || (!outpar[i][1]))
  8097  001A6C  51D2               	movf	set_output@i& (0+255),w,b
  8098  001A6E  0D08               	mullw	8
  8099  001A70  0E01               	movlw	low (_outpar+1)
  8100  001A72  24F3               	addwf	243,w,c
  8101  001A74  6ED9               	movwf	fsr2l,c
  8102  001A76  0E01               	movlw	high (_outpar+1)
  8103  001A78  20F4               	addwfc	prodh,w,c
  8104  001A7A  6EDA               	movwf	fsr2h,c
  8105  001A7C  50DF               	movf	indf2,w,c
  8106  001A7E  6FC8               	movwf	??_set_output& (0+255),b
  8107  001A80  51C7               	movf	set_output@virt& (0+255),w,b
  8108  001A82  6ED9               	movwf	fsr2l,c
  8109  001A84  6ADA               	clrf	fsr2h,c
  8110  001A86  0E01               	movlw	1
  8111  001A88  26D9               	addwf	fsr2l,f,c
  8112  001A8A  50DF               	movf	indf2,w,c
  8113  001A8C  15C8               	andwf	??_set_output& (0+255),w,b
  8114  001A8E  6FC9               	movwf	(??_set_output+1)& (0+255),b
  8115  001A90  0E03               	movlw	3
  8116  001A92  17C9               	andwf	(??_set_output+1)& (0+255),f,b
  8117  001A94  A4D8               	btfss	status,2,c
  8118  001A96  D00B               	goto	u11200
  8119                           
  8120                           ; BSR set to: 0
  8121  001A98  51D2               	movf	set_output@i& (0+255),w,b
  8122  001A9A  0D08               	mullw	8
  8123  001A9C  0E01               	movlw	low (_outpar+1)
  8124  001A9E  24F3               	addwf	243,w,c
  8125  001AA0  6ED9               	movwf	fsr2l,c
  8126  001AA2  0E01               	movlw	high (_outpar+1)
  8127  001AA4  20F4               	addwfc	prodh,w,c
  8128  001AA6  6EDA               	movwf	fsr2h,c
  8129  001AA8  50DF               	movf	indf2,w,c
  8130  001AAA  A4D8               	btfss	status,2,c
  8131  001AAC  D087               	goto	l1210
  8132  001AAE                     u11200:
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;can.c: 990: if ((virt[3] == outpar[i][3]) || (virt[3] == 0xFF) || (!outpar[i][3]))
  8136  001AAE  51D2               	movf	set_output@i& (0+255),w,b
  8137  001AB0  0D08               	mullw	8
  8138  001AB2  0E03               	movlw	low (_outpar+3)
  8139  001AB4  24F3               	addwf	243,w,c
  8140  001AB6  6ED9               	movwf	fsr2l,c
  8141  001AB8  0E01               	movlw	high (_outpar+3)
  8142  001ABA  20F4               	addwfc	prodh,w,c
  8143  001ABC  6EDA               	movwf	fsr2h,c
  8144  001ABE  51C7               	movf	set_output@virt& (0+255),w,b
  8145  001AC0  6EE1               	movwf	fsr1l,c
  8146  001AC2  6AE2               	clrf	fsr1h,c
  8147  001AC4  0E03               	movlw	3
  8148  001AC6  26E1               	addwf	fsr1l,f,c
  8149  001AC8  50DE               	movf	postinc2,w,c
  8150  001ACA  18E6               	xorwf	postinc1,w,c
  8151  001ACC  B4D8               	btfsc	status,2,c
  8152  001ACE  D013               	goto	u11230
  8153                           
  8154                           ; BSR set to: 0
  8155  001AD0  51C7               	movf	set_output@virt& (0+255),w,b
  8156  001AD2  6ED9               	movwf	fsr2l,c
  8157  001AD4  6ADA               	clrf	fsr2h,c
  8158  001AD6  0E03               	movlw	3
  8159  001AD8  26D9               	addwf	fsr2l,f,c
  8160  001ADA  28DE               	incf	postinc2,w,c
  8161  001ADC  B4D8               	btfsc	status,2,c
  8162  001ADE  D00B               	goto	u11230
  8163                           
  8164                           ; BSR set to: 0
  8165  001AE0  51D2               	movf	set_output@i& (0+255),w,b
  8166  001AE2  0D08               	mullw	8
  8167  001AE4  0E03               	movlw	low (_outpar+3)
  8168  001AE6  24F3               	addwf	243,w,c
  8169  001AE8  6ED9               	movwf	fsr2l,c
  8170  001AEA  0E01               	movlw	high (_outpar+3)
  8171  001AEC  20F4               	addwfc	prodh,w,c
  8172  001AEE  6EDA               	movwf	fsr2h,c
  8173  001AF0  50DF               	movf	indf2,w,c
  8174  001AF2  A4D8               	btfss	status,2,c
  8175  001AF4  D063               	goto	l1210
  8176  001AF6                     u11230:
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;can.c: 991: if (virt[2] == outpar[i][2])
  8180  001AF6  51D2               	movf	set_output@i& (0+255),w,b
  8181  001AF8  0D08               	mullw	8
  8182  001AFA  0E02               	movlw	low (_outpar+2)
  8183  001AFC  24F3               	addwf	243,w,c
  8184  001AFE  6ED9               	movwf	fsr2l,c
  8185  001B00  0E01               	movlw	high (_outpar+2)
  8186  001B02  20F4               	addwfc	prodh,w,c
  8187  001B04  6EDA               	movwf	fsr2h,c
  8188  001B06  51C7               	movf	set_output@virt& (0+255),w,b
  8189  001B08  6EE1               	movwf	fsr1l,c
  8190  001B0A  6AE2               	clrf	fsr1h,c
  8191  001B0C  0E02               	movlw	2
  8192  001B0E  26E1               	addwf	fsr1l,f,c
  8193  001B10  50DE               	movf	postinc2,w,c
  8194  001B12  18E6               	xorwf	postinc1,w,c
  8195  001B14  A4D8               	btfss	status,2,c
  8196  001B16  D052               	goto	l1210
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;can.c: 992: if ((virt[4] & outpar[i][4]) || (!outpar[i][4]))
  8200  001B18  51D2               	movf	set_output@i& (0+255),w,b
  8201  001B1A  0D08               	mullw	8
  8202  001B1C  0E04               	movlw	low (_outpar+4)
  8203  001B1E  24F3               	addwf	243,w,c
  8204  001B20  6ED9               	movwf	fsr2l,c
  8205  001B22  0E01               	movlw	high (_outpar+4)
  8206  001B24  20F4               	addwfc	prodh,w,c
  8207  001B26  6EDA               	movwf	fsr2h,c
  8208  001B28  50DF               	movf	indf2,w,c
  8209  001B2A  6FC8               	movwf	??_set_output& (0+255),b
  8210  001B2C  51C7               	movf	set_output@virt& (0+255),w,b
  8211  001B2E  6ED9               	movwf	fsr2l,c
  8212  001B30  6ADA               	clrf	fsr2h,c
  8213  001B32  0E04               	movlw	4
  8214  001B34  26D9               	addwf	fsr2l,f,c
  8215  001B36  50DF               	movf	indf2,w,c
  8216  001B38  15C8               	andwf	??_set_output& (0+255),w,b
  8217  001B3A  0900               	iorlw	0
  8218  001B3C  A4D8               	btfss	status,2,c
  8219  001B3E  D00B               	goto	u11260
  8220                           
  8221                           ; BSR set to: 0
  8222  001B40  51D2               	movf	set_output@i& (0+255),w,b
  8223  001B42  0D08               	mullw	8
  8224  001B44  0E04               	movlw	low (_outpar+4)
  8225  001B46  24F3               	addwf	243,w,c
  8226  001B48  6ED9               	movwf	fsr2l,c
  8227  001B4A  0E01               	movlw	high (_outpar+4)
  8228  001B4C  20F4               	addwfc	prodh,w,c
  8229  001B4E  6EDA               	movwf	fsr2h,c
  8230  001B50  50DF               	movf	indf2,w,c
  8231  001B52  A4D8               	btfss	status,2,c
  8232  001B54  D033               	goto	l1210
  8233  001B56                     u11260:
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;can.c: 993: if(outpar[i][6] == 1)
  8237  001B56  51D2               	movf	set_output@i& (0+255),w,b
  8238  001B58  0D08               	mullw	8
  8239  001B5A  0E06               	movlw	low (_outpar+6)
  8240  001B5C  24F3               	addwf	243,w,c
  8241  001B5E  6ED9               	movwf	fsr2l,c
  8242  001B60  0E01               	movlw	high (_outpar+6)
  8243  001B62  20F4               	addwfc	prodh,w,c
  8244  001B64  6EDA               	movwf	fsr2h,c
  8245  001B66  04DE               	decf	postinc2,w,c
  8246  001B68  A4D8               	btfss	status,2,c
  8247  001B6A  D028               	goto	l1210
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;can.c: 994: {;can.c: 995: if (virt[5] & 0x01)
  8251  001B6C  51C7               	movf	set_output@virt& (0+255),w,b
  8252  001B6E  6ED9               	movwf	fsr2l,c
  8253  001B70  6ADA               	clrf	fsr2h,c
  8254  001B72  0E05               	movlw	5
  8255  001B74  26D9               	addwf	fsr2l,f,c
  8256  001B76  A0DF               	btfss	indf2,0,c
  8257  001B78  D021               	goto	l1210
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;can.c: 996: {;can.c: 997: (out |= (1 << i));
  8261  001B7A  C0D2  F0C8         	movff	set_output@i,??_set_output
  8262  001B7E  0E01               	movlw	1
  8263  001B80  6FC9               	movwf	(??_set_output+1)& (0+255),b
  8264  001B82  2BC8               	incf	??_set_output& (0+255),f,b
  8265  001B84  D002               	goto	u11294
  8266  001B86                     u11295:
  8267  001B86  90D8               	bcf	status,0,c
  8268  001B88  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  8269  001B8A                     u11294:
  8270  001B8A  2FC8               	decfsz	??_set_output& (0+255),f,b
  8271  001B8C  D7FC               	goto	u11295
  8272  001B8E  0100               	movlb	0	; () banked
  8273  001B90  51C9               	movf	(??_set_output+1)& (0+255),w,b
  8274  001B92  122B               	iorwf	_out^0,f,c	;volatile
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;can.c: 998: outpar[i][7] = 20;
  8278  001B94  51D2               	movf	set_output@i& (0+255),w,b
  8279  001B96  0D08               	mullw	8
  8280  001B98  0E07               	movlw	low (_outpar+7)
  8281  001B9A  24F3               	addwf	243,w,c
  8282  001B9C  6ED9               	movwf	fsr2l,c
  8283  001B9E  0E01               	movlw	high (_outpar+7)
  8284  001BA0  20F4               	addwfc	prodh,w,c
  8285  001BA2  6EDA               	movwf	fsr2h,c
  8286  001BA4  0E14               	movlw	20
  8287  001BA6  6EDF               	movwf	indf2,c
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;can.c: 999: outpar[i][5] = 1;
  8291  001BA8  51D2               	movf	set_output@i& (0+255),w,b
  8292  001BAA  0D08               	mullw	8
  8293  001BAC  0E05               	movlw	low (_outpar+5)
  8294  001BAE  24F3               	addwf	243,w,c
  8295  001BB0  6ED9               	movwf	fsr2l,c
  8296  001BB2  0E01               	movlw	high (_outpar+5)
  8297  001BB4  20F4               	addwfc	prodh,w,c
  8298  001BB6  6EDA               	movwf	fsr2h,c
  8299  001BB8  0E01               	movlw	1
  8300  001BBA  6EDF               	movwf	indf2,c
  8301  001BBC                     l1210:
  8302                           
  8303                           ; BSR set to: 0
  8304                           
  8305                           ; BSR set to: 0
  8306  001BBC  2BD2               	incf	set_output@i& (0+255),f,b
  8307                           
  8308                           ; BSR set to: 0
  8309  001BBE  0E07               	movlw	7
  8310  001BC0  65D2               	cpfsgt	set_output@i& (0+255),b
  8311  001BC2  D745               	goto	l9223
  8312  001BC4  0012               	return	
  8313  001BC6                     l9255:
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;can.c: 1004: else if((iotype == 0x0E) || (iotype == 0x14) || (iotype == 0x15))
  8317  001BC6  0E0E               	movlw	14
  8318  001BC8  19D1               	xorwf	set_output@iotype& (0+255),w,b
  8319  001BCA  B4D8               	btfsc	status,2,c
  8320  001BCC  D008               	goto	u11330
  8321                           
  8322                           ; BSR set to: 0
  8323  001BCE  0E14               	movlw	20
  8324  001BD0  19D1               	xorwf	set_output@iotype& (0+255),w,b
  8325  001BD2  B4D8               	btfsc	status,2,c
  8326  001BD4  D004               	goto	u11330
  8327                           
  8328                           ; BSR set to: 0
  8329  001BD6  0E15               	movlw	21
  8330  001BD8  19D1               	xorwf	set_output@iotype& (0+255),w,b
  8331  001BDA  A4D8               	btfss	status,2,c
  8332  001BDC  D077               	goto	l9301
  8333  001BDE                     u11330:
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;can.c: 1005: {;can.c: 1006: sub = virt[1];
  8337  001BDE  51C7               	movf	set_output@virt& (0+255),w,b
  8338  001BE0  6ED9               	movwf	fsr2l,c
  8339  001BE2  6ADA               	clrf	fsr2h,c
  8340  001BE4  0E01               	movlw	1
  8341  001BE6  26D9               	addwf	fsr2l,f,c
  8342  001BE8  50DF               	movf	indf2,w,c
  8343  001BEA  6FD0               	movwf	set_output@sub& (0+255),b
  8344                           
  8345                           ;can.c: 1007: switch(sub)
  8346  001BEC  D055               	goto	l9299
  8347  001BEE                     l9263:
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;can.c: 1010: if(virt[5])
  8351  001BEE  51C7               	movf	set_output@virt& (0+255),w,b
  8352  001BF0  6ED9               	movwf	fsr2l,c
  8353  001BF2  6ADA               	clrf	fsr2h,c
  8354  001BF4  0E05               	movlw	5
  8355  001BF6  26D9               	addwf	fsr2l,f,c
  8356  001BF8  50DF               	movf	indf2,w,c
  8357  001BFA  B4D8               	btfsc	status,2,c
  8358  001BFC  D003               	goto	l9269
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;can.c: 1011: {;can.c: 1012: display[3] |= 0x02;
  8362  001BFE  836B               	bsf	(_display+3)& (0+255),1,b	;volatile
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;can.c: 1013: LATEbits.LATE0 = 1;
  8366  001C00  808D               	bsf	141,0,c	;volatile
  8367                           
  8368                           ;can.c: 1014: }
  8369  001C02  0012               	return	
  8370  001C04                     l9269:
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;can.c: 1015: else;can.c: 1016: {;can.c: 1017: display[3] &= ~0x02;
  8374  001C04  936B               	bcf	(_display+3)& (0+255),1,b	;volatile
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;can.c: 1018: LATEbits.LATE0 = 0;
  8378  001C06  908D               	bcf	141,0,c	;volatile
  8379  001C08  0012               	return	
  8380  001C0A                     l9273:
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;can.c: 1023: case 0x8B:;can.c: 1024: if(virt[5])
  8384  001C0A  51C7               	movf	set_output@virt& (0+255),w,b
  8385  001C0C  6ED9               	movwf	fsr2l,c
  8386  001C0E  6ADA               	clrf	fsr2h,c
  8387  001C10  0E05               	movlw	5
  8388  001C12  26D9               	addwf	fsr2l,f,c
  8389  001C14  50DF               	movf	indf2,w,c
  8390  001C16  B4D8               	btfsc	status,2,c
  8391  001C18  D002               	goto	l9277
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;can.c: 1025: display[3] |= 0x01;
  8395  001C1A  816B               	bsf	(_display+3)& (0+255),0,b	;volatile
  8396  001C1C  0012               	return	
  8397  001C1E                     l9277:
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;can.c: 1026: else;can.c: 1027: display[3] &= ~0x01;
  8401  001C1E  916B               	bcf	(_display+3)& (0+255),0,b	;volatile
  8402  001C20  0012               	return	
  8403  001C22                     l9279:
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;can.c: 1036: fire_alarm = virt[5];
  8407  001C22  51C7               	movf	set_output@virt& (0+255),w,b
  8408  001C24  6ED9               	movwf	fsr2l,c
  8409  001C26  6ADA               	clrf	fsr2h,c
  8410  001C28  0E05               	movlw	5
  8411  001C2A  26D9               	addwf	fsr2l,f,c
  8412  001C2C  50DF               	movf	indf2,w,c
  8413  001C2E  6F82               	movwf	_fire_alarm& (0+255),b
  8414                           
  8415                           ;can.c: 1037: break;
  8416  001C30  0012               	return	
  8417  001C32                     l9281:
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;can.c: 1039: fire_evacuation = virt[5];
  8421  001C32  51C7               	movf	set_output@virt& (0+255),w,b
  8422  001C34  6ED9               	movwf	fsr2l,c
  8423  001C36  6ADA               	clrf	fsr2h,c
  8424  001C38  0E05               	movlw	5
  8425  001C3A  26D9               	addwf	fsr2l,f,c
  8426  001C3C  50DF               	movf	indf2,w,c
  8427  001C3E  6F81               	movwf	_fire_evacuation& (0+255),b
  8428                           
  8429                           ;can.c: 1040: break;
  8430  001C40  0012               	return	
  8431  001C42                     l9283:
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;can.c: 1042: fire_state = virt[5];
  8435  001C42  51C7               	movf	set_output@virt& (0+255),w,b
  8436  001C44  6ED9               	movwf	fsr2l,c
  8437  001C46  6ADA               	clrf	fsr2h,c
  8438  001C48  0E05               	movlw	5
  8439  001C4A  26D9               	addwf	fsr2l,f,c
  8440  001C4C  50DF               	movf	indf2,w,c
  8441  001C4E  6F80               	movwf	_fire_state& (0+255),b
  8442                           
  8443                           ;can.c: 1043: break;
  8444  001C50  0012               	return	
  8445  001C52                     l9287:
  8446                           
  8447                           ; BSR set to: 0
  8448  001C52  51D0               	movf	set_output@sub& (0+255),w,b
  8449                           
  8450                           ; Switch size 1, requested type "simple"
  8451                           ; Number of cases is 3, Range of values is 136 to 144
  8452                           ; switch strategies available:
  8453                           ; Name         Instructions Cycles
  8454                           ; simple_byte           10     6 (average)
  8455                           ;	Chosen strategy is simple_byte
  8456  001C54  0A88               	xorlw	136	; case 136
  8457  001C56  B4D8               	btfsc	status,2,c
  8458  001C58  D7F4               	goto	l9283
  8459  001C5A  0A07               	xorlw	7	; case 143
  8460  001C5C  B4D8               	btfsc	status,2,c
  8461  001C5E  D7E9               	goto	l9281
  8462  001C60  0A1F               	xorlw	31	; case 144
  8463  001C62  A4D8               	btfss	status,2,c
  8464  001C64  0012               	return	
  8465  001C66  D7DD               	goto	l9279
  8466  001C68                     l9289:
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;can.c: 1048: if(virt[5])
  8470  001C68  51C7               	movf	set_output@virt& (0+255),w,b
  8471  001C6A  6ED9               	movwf	fsr2l,c
  8472  001C6C  6ADA               	clrf	fsr2h,c
  8473  001C6E  0E05               	movlw	5
  8474  001C70  26D9               	addwf	fsr2l,f,c
  8475  001C72  50DF               	movf	indf2,w,c
  8476  001C74  B4D8               	btfsc	status,2,c
  8477  001C76  D002               	goto	l1238
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;can.c: 1049: LATEbits.LATE1 = 1;
  8481  001C78  828D               	bsf	141,1,c	;volatile
  8482  001C7A  0012               	return	
  8483  001C7C                     l1238:
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;can.c: 1050: else;can.c: 1051: LATEbits.LATE1 = 0;
  8487  001C7C  928D               	bcf	141,1,c	;volatile
  8488  001C7E  0012               	return	
  8489  001C80                     l9293:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;can.c: 1055: if(virt[5])
  8493  001C80  51C7               	movf	set_output@virt& (0+255),w,b
  8494  001C82  6ED9               	movwf	fsr2l,c
  8495  001C84  6ADA               	clrf	fsr2h,c
  8496  001C86  0E05               	movlw	5
  8497  001C88  26D9               	addwf	fsr2l,f,c
  8498  001C8A  50DF               	movf	indf2,w,c
  8499  001C8C  B4D8               	btfsc	status,2,c
  8500  001C8E  D002               	goto	l1241
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;can.c: 1056: LATEbits.LATE2 = 1;
  8504  001C90  848D               	bsf	141,2,c	;volatile
  8505  001C92  0012               	return	
  8506  001C94                     l1241:
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;can.c: 1057: else;can.c: 1058: LATEbits.LATE2 = 0;
  8510  001C94  948D               	bcf	141,2,c	;volatile
  8511  001C96  0012               	return	
  8512  001C98                     l9299:
  8513                           
  8514                           ; BSR set to: 0
  8515  001C98  51D0               	movf	set_output@sub& (0+255),w,b
  8516                           
  8517                           ; Switch size 1, requested type "simple"
  8518                           ; Number of cases is 8, Range of values is 16 to 161
  8519                           ; switch strategies available:
  8520                           ; Name         Instructions Cycles
  8521                           ; simple_byte           25    13 (average)
  8522                           ;	Chosen strategy is simple_byte
  8523  001C9A  0A10               	xorlw	16	; case 16
  8524  001C9C  B4D8               	btfsc	status,2,c
  8525  001C9E  D7E4               	goto	l9289
  8526  001CA0  0A91               	xorlw	145	; case 129
  8527  001CA2  B4D8               	btfsc	status,2,c
  8528  001CA4  D7B2               	goto	l9273
  8529  001CA6  0A07               	xorlw	7	; case 134
  8530  001CA8  B4D8               	btfsc	status,2,c
  8531  001CAA  D7A1               	goto	l9263
  8532  001CAC  0A0E               	xorlw	14	; case 136
  8533  001CAE  B4D8               	btfsc	status,2,c
  8534  001CB0  D7D0               	goto	l9287
  8535  001CB2  0A03               	xorlw	3	; case 139
  8536  001CB4  B4D8               	btfsc	status,2,c
  8537  001CB6  D7A9               	goto	l9273
  8538  001CB8  0A04               	xorlw	4	; case 143
  8539  001CBA  B4D8               	btfsc	status,2,c
  8540  001CBC  D7CA               	goto	l9287
  8541  001CBE  0A1F               	xorlw	31	; case 144
  8542  001CC0  B4D8               	btfsc	status,2,c
  8543  001CC2  D7C7               	goto	l9287
  8544  001CC4  0A31               	xorlw	49	; case 161
  8545  001CC6  A4D8               	btfss	status,2,c
  8546  001CC8  0012               	return	
  8547  001CCA  D7DA               	goto	l9293
  8548  001CCC                     l9301:
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;can.c: 1062: else if (iotype == 0x45)
  8552  001CCC  0E45               	movlw	69
  8553  001CCE  19D1               	xorwf	set_output@iotype& (0+255),w,b
  8554  001CD0  A4D8               	btfss	status,2,c
  8555  001CD2  D046               	goto	l9315
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;can.c: 1063: {;can.c: 1064: index = ((WORD)virt[1] << 8) | virt[3];
  8559  001CD4  51C7               	movf	set_output@virt& (0+255),w,b
  8560  001CD6  6ED9               	movwf	fsr2l,c
  8561  001CD8  6ADA               	clrf	fsr2h,c
  8562  001CDA  0E03               	movlw	3
  8563  001CDC  26D9               	addwf	fsr2l,f,c
  8564  001CDE  50DF               	movf	indf2,w,c
  8565  001CE0  6FC8               	movwf	??_set_output& (0+255),b
  8566  001CE2  51C7               	movf	set_output@virt& (0+255),w,b
  8567  001CE4  6ED9               	movwf	fsr2l,c
  8568  001CE6  6ADA               	clrf	fsr2h,c
  8569  001CE8  0E01               	movlw	1
  8570  001CEA  26D9               	addwf	fsr2l,f,c
  8571  001CEC  50DF               	movf	indf2,w,c
  8572  001CEE  6FC9               	movwf	(??_set_output+1)& (0+255),b
  8573  001CF0  51C8               	movf	??_set_output& (0+255),w,b
  8574  001CF2  6FCB               	movwf	set_output@index& (0+255),b
  8575  001CF4  C0C9  F0CC         	movff	??_set_output+1,set_output@index+1
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;can.c: 1065: if(index == 0x250D)
  8579  001CF8  0E0D               	movlw	13
  8580  001CFA  19CB               	xorwf	set_output@index& (0+255),w,b
  8581  001CFC  E103               	bnz	u11391
  8582  001CFE  0E25               	movlw	37
  8583  001D00  19CC               	xorwf	(set_output@index+1)& (0+255),w,b
  8584  001D02  A4D8               	btfss	status,2,c
  8585  001D04                     u11391:
  8586  001D04  0012               	return	
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;can.c: 1066: {;can.c: 1067: backlight_func = (virt[5] >> 4) & 0x03;
  8590  001D06  51C7               	movf	set_output@virt& (0+255),w,b
  8591  001D08  6ED9               	movwf	fsr2l,c
  8592  001D0A  6ADA               	clrf	fsr2h,c
  8593  001D0C  0E05               	movlw	5
  8594  001D0E  26D9               	addwf	fsr2l,f,c
  8595  001D10  50DF               	movf	indf2,w,c
  8596  001D12  6FC8               	movwf	??_set_output& (0+255),b
  8597  001D14  39C8               	swapf	??_set_output& (0+255),w,b
  8598  001D16  0B0F               	andlw	15
  8599  001D18  0B03               	andlw	3
  8600  001D1A  6E11               	movwf	_backlight_func^0,c
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;can.c: 1068: backlight_off_time = ((WORD)(virt[5] & 0x0F)) * 120;
  8604  001D1C  51C7               	movf	set_output@virt& (0+255),w,b
  8605  001D1E  6ED9               	movwf	fsr2l,c
  8606  001D20  6ADA               	clrf	fsr2h,c
  8607  001D22  0E05               	movlw	5
  8608  001D24  26D9               	addwf	fsr2l,f,c
  8609  001D26  50DF               	movf	indf2,w,c
  8610  001D28  6FC8               	movwf	??_set_output& (0+255),b
  8611  001D2A  0E0F               	movlw	15
  8612  001D2C  17C8               	andwf	??_set_output& (0+255),f,b
  8613  001D2E  51C8               	movf	??_set_output& (0+255),w,b
  8614  001D30  0D78               	mullw	120
  8615  001D32  CFF3 F078          	movff	prodl,_backlight_off_time
  8616  001D36  CFF4 F079          	movff	prodh,_backlight_off_time+1
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;can.c: 1069: light_para_ok = 1;
  8620  001D3A  0E01               	movlw	1
  8621  001D3C  6E10               	movwf	_light_para_ok^0,c
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;can.c: 1070: display_STN_mode = (virt[5] >> 6) & 0x03;
  8625  001D3E  51C7               	movf	set_output@virt& (0+255),w,b
  8626  001D40  6ED9               	movwf	fsr2l,c
  8627  001D42  6ADA               	clrf	fsr2h,c
  8628  001D44  0E05               	movlw	5
  8629  001D46  26D9               	addwf	fsr2l,f,c
  8630  001D48  50DF               	movf	indf2,w,c
  8631  001D4A  6FC8               	movwf	??_set_output& (0+255),b
  8632  001D4C  0E06               	movlw	6
  8633  001D4E  6FC9               	movwf	(??_set_output+1)& (0+255),b
  8634  001D50                     u11405:
  8635  001D50  90D8               	bcf	status,0,c
  8636  001D52  33C8               	rrcf	??_set_output& (0+255),f,b
  8637  001D54  2FC9               	decfsz	(??_set_output+1)& (0+255),f,b
  8638  001D56  D7FC               	goto	u11405
  8639  001D58  51C8               	movf	??_set_output& (0+255),w,b
  8640  001D5A  0B03               	andlw	3
  8641  001D5C  6E0F               	movwf	_display_STN_mode^0,c
  8642  001D5E  0012               	return	
  8643  001D60                     l9315:
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;can.c: 1073: else;can.c: 1074: {;can.c: 1075: for (i = 0; i < 8; i++)
  8647  001D60  0E00               	movlw	0
  8648  001D62  6FD2               	movwf	set_output@i& (0+255),b
  8649  001D64                     l9321:
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;can.c: 1076: {;can.c: 1077: if (virt[0] == outpar[i][0])
  8653  001D64  51D2               	movf	set_output@i& (0+255),w,b
  8654  001D66  0D08               	mullw	8
  8655  001D68  0E00               	movlw	low _outpar
  8656  001D6A  24F3               	addwf	243,w,c
  8657  001D6C  6ED9               	movwf	fsr2l,c
  8658  001D6E  0E01               	movlw	high _outpar
  8659  001D70  20F4               	addwfc	prodh,w,c
  8660  001D72  6EDA               	movwf	fsr2h,c
  8661  001D74  51C7               	movf	set_output@virt& (0+255),w,b
  8662  001D76  6EE1               	movwf	fsr1l,c
  8663  001D78  6AE2               	clrf	fsr1h,c
  8664  001D7A  50DE               	movf	postinc2,w,c
  8665  001D7C  18E6               	xorwf	postinc1,w,c
  8666  001D7E  A4D8               	btfss	status,2,c
  8667  001D80  D09B               	goto	l9347
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;can.c: 1078: if ((virt[1] == outpar[i][1]) || (!virt[1]))
  8671  001D82  51D2               	movf	set_output@i& (0+255),w,b
  8672  001D84  0D08               	mullw	8
  8673  001D86  0E01               	movlw	low (_outpar+1)
  8674  001D88  24F3               	addwf	243,w,c
  8675  001D8A  6ED9               	movwf	fsr2l,c
  8676  001D8C  0E01               	movlw	high (_outpar+1)
  8677  001D8E  20F4               	addwfc	prodh,w,c
  8678  001D90  6EDA               	movwf	fsr2h,c
  8679  001D92  51C7               	movf	set_output@virt& (0+255),w,b
  8680  001D94  6EE1               	movwf	fsr1l,c
  8681  001D96  6AE2               	clrf	fsr1h,c
  8682  001D98  0E01               	movlw	1
  8683  001D9A  26E1               	addwf	fsr1l,f,c
  8684  001D9C  50DE               	movf	postinc2,w,c
  8685  001D9E  18E6               	xorwf	postinc1,w,c
  8686  001DA0  B4D8               	btfsc	status,2,c
  8687  001DA2  D008               	goto	u11430
  8688                           
  8689                           ; BSR set to: 0
  8690  001DA4  51C7               	movf	set_output@virt& (0+255),w,b
  8691  001DA6  6ED9               	movwf	fsr2l,c
  8692  001DA8  6ADA               	clrf	fsr2h,c
  8693  001DAA  0E01               	movlw	1
  8694  001DAC  26D9               	addwf	fsr2l,f,c
  8695  001DAE  50DF               	movf	indf2,w,c
  8696  001DB0  A4D8               	btfss	status,2,c
  8697  001DB2  D082               	goto	l9347
  8698  001DB4                     u11430:
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;can.c: 1079: if (virt[3] == outpar[i][3])
  8702  001DB4  51D2               	movf	set_output@i& (0+255),w,b
  8703  001DB6  0D08               	mullw	8
  8704  001DB8  0E03               	movlw	low (_outpar+3)
  8705  001DBA  24F3               	addwf	243,w,c
  8706  001DBC  6ED9               	movwf	fsr2l,c
  8707  001DBE  0E01               	movlw	high (_outpar+3)
  8708  001DC0  20F4               	addwfc	prodh,w,c
  8709  001DC2  6EDA               	movwf	fsr2h,c
  8710  001DC4  51C7               	movf	set_output@virt& (0+255),w,b
  8711  001DC6  6EE1               	movwf	fsr1l,c
  8712  001DC8  6AE2               	clrf	fsr1h,c
  8713  001DCA  0E03               	movlw	3
  8714  001DCC  26E1               	addwf	fsr1l,f,c
  8715  001DCE  50DE               	movf	postinc2,w,c
  8716  001DD0  18E6               	xorwf	postinc1,w,c
  8717  001DD2  A4D8               	btfss	status,2,c
  8718  001DD4  D071               	goto	l9347
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;can.c: 1080: if (virt[2] == outpar[i][2])
  8722  001DD6  51D2               	movf	set_output@i& (0+255),w,b
  8723  001DD8  0D08               	mullw	8
  8724  001DDA  0E02               	movlw	low (_outpar+2)
  8725  001DDC  24F3               	addwf	243,w,c
  8726  001DDE  6ED9               	movwf	fsr2l,c
  8727  001DE0  0E01               	movlw	high (_outpar+2)
  8728  001DE2  20F4               	addwfc	prodh,w,c
  8729  001DE4  6EDA               	movwf	fsr2h,c
  8730  001DE6  51C7               	movf	set_output@virt& (0+255),w,b
  8731  001DE8  6EE1               	movwf	fsr1l,c
  8732  001DEA  6AE2               	clrf	fsr1h,c
  8733  001DEC  0E02               	movlw	2
  8734  001DEE  26E1               	addwf	fsr1l,f,c
  8735  001DF0  50DE               	movf	postinc2,w,c
  8736  001DF2  18E6               	xorwf	postinc1,w,c
  8737  001DF4  A4D8               	btfss	status,2,c
  8738  001DF6  D060               	goto	l9347
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;can.c: 1081: if ((virt[4] & outpar[i][4]) || (!outpar[i][4]))
  8742  001DF8  51D2               	movf	set_output@i& (0+255),w,b
  8743  001DFA  0D08               	mullw	8
  8744  001DFC  0E04               	movlw	low (_outpar+4)
  8745  001DFE  24F3               	addwf	243,w,c
  8746  001E00  6ED9               	movwf	fsr2l,c
  8747  001E02  0E01               	movlw	high (_outpar+4)
  8748  001E04  20F4               	addwfc	prodh,w,c
  8749  001E06  6EDA               	movwf	fsr2h,c
  8750  001E08  50DF               	movf	indf2,w,c
  8751  001E0A  6FC8               	movwf	??_set_output& (0+255),b
  8752  001E0C  51C7               	movf	set_output@virt& (0+255),w,b
  8753  001E0E  6ED9               	movwf	fsr2l,c
  8754  001E10  6ADA               	clrf	fsr2h,c
  8755  001E12  0E04               	movlw	4
  8756  001E14  26D9               	addwf	fsr2l,f,c
  8757  001E16  50DF               	movf	indf2,w,c
  8758  001E18  15C8               	andwf	??_set_output& (0+255),w,b
  8759  001E1A  0900               	iorlw	0
  8760  001E1C  A4D8               	btfss	status,2,c
  8761  001E1E  D00B               	goto	u11470
  8762                           
  8763                           ; BSR set to: 0
  8764  001E20  51D2               	movf	set_output@i& (0+255),w,b
  8765  001E22  0D08               	mullw	8
  8766  001E24  0E04               	movlw	low (_outpar+4)
  8767  001E26  24F3               	addwf	243,w,c
  8768  001E28  6ED9               	movwf	fsr2l,c
  8769  001E2A  0E01               	movlw	high (_outpar+4)
  8770  001E2C  20F4               	addwfc	prodh,w,c
  8771  001E2E  6EDA               	movwf	fsr2h,c
  8772  001E30  50DF               	movf	indf2,w,c
  8773  001E32  A4D8               	btfss	status,2,c
  8774  001E34  D041               	goto	l9347
  8775  001E36                     u11470:
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;can.c: 1082: if(outpar[i][6] == 1)
  8779  001E36  51D2               	movf	set_output@i& (0+255),w,b
  8780  001E38  0D08               	mullw	8
  8781  001E3A  0E06               	movlw	low (_outpar+6)
  8782  001E3C  24F3               	addwf	243,w,c
  8783  001E3E  6ED9               	movwf	fsr2l,c
  8784  001E40  0E01               	movlw	high (_outpar+6)
  8785  001E42  20F4               	addwfc	prodh,w,c
  8786  001E44  6EDA               	movwf	fsr2h,c
  8787  001E46  04DE               	decf	postinc2,w,c
  8788  001E48  A4D8               	btfss	status,2,c
  8789  001E4A  D036               	goto	l9347
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;can.c: 1083: {;can.c: 1084: if (virt[5] & 0x01)
  8793  001E4C  51C7               	movf	set_output@virt& (0+255),w,b
  8794  001E4E  6ED9               	movwf	fsr2l,c
  8795  001E50  6ADA               	clrf	fsr2h,c
  8796  001E52  0E05               	movlw	5
  8797  001E54  26D9               	addwf	fsr2l,f,c
  8798  001E56  A0DF               	btfss	indf2,0,c
  8799  001E58  D017               	goto	l9343
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;can.c: 1085: {;can.c: 1086: (out |= (1 << i));
  8803  001E5A  C0D2  F0C8         	movff	set_output@i,??_set_output
  8804  001E5E  0E01               	movlw	1
  8805  001E60  6FC9               	movwf	(??_set_output+1)& (0+255),b
  8806  001E62  2BC8               	incf	??_set_output& (0+255),f,b
  8807  001E64  D002               	goto	u11504
  8808  001E66                     u11505:
  8809  001E66  90D8               	bcf	status,0,c
  8810  001E68  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  8811  001E6A                     u11504:
  8812  001E6A  2FC8               	decfsz	??_set_output& (0+255),f,b
  8813  001E6C  D7FC               	goto	u11505
  8814  001E6E  0100               	movlb	0	; () banked
  8815  001E70  51C9               	movf	(??_set_output+1)& (0+255),w,b
  8816  001E72  122B               	iorwf	_out^0,f,c	;volatile
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;can.c: 1087: outpar[i][5] = 1;
  8820  001E74  51D2               	movf	set_output@i& (0+255),w,b
  8821  001E76  0D08               	mullw	8
  8822  001E78  0E05               	movlw	low (_outpar+5)
  8823  001E7A  24F3               	addwf	243,w,c
  8824  001E7C  6ED9               	movwf	fsr2l,c
  8825  001E7E  0E01               	movlw	high (_outpar+5)
  8826  001E80  20F4               	addwfc	prodh,w,c
  8827  001E82  6EDA               	movwf	fsr2h,c
  8828  001E84  0E01               	movlw	1
  8829  001E86  D017               	goto	L17
  8830  001E88                     l9343:
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;can.c: 1089: else;can.c: 1090: {;can.c: 1091: (out &= ~(1 << i));
  8834  001E88  C0D2  F0C8         	movff	set_output@i,??_set_output
  8835  001E8C  0E01               	movlw	1
  8836  001E8E  6FC9               	movwf	(??_set_output+1)& (0+255),b
  8837  001E90  2BC8               	incf	??_set_output& (0+255),f,b
  8838  001E92  D002               	goto	u11514
  8839  001E94                     u11515:
  8840  001E94  90D8               	bcf	status,0,c
  8841  001E96  37C9               	rlcf	(??_set_output+1)& (0+255),f,b
  8842  001E98                     u11514:
  8843  001E98  2FC8               	decfsz	??_set_output& (0+255),f,b
  8844  001E9A  D7FC               	goto	u11515
  8845  001E9C  0100               	movlb	0	; () banked
  8846  001E9E  51C9               	movf	(??_set_output+1)& (0+255),w,b
  8847  001EA0  0AFF               	xorlw	255
  8848  001EA2  162B               	andwf	_out^0,f,c	;volatile
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;can.c: 1092: outpar[i][5] = 0;
  8852  001EA4  51D2               	movf	set_output@i& (0+255),w,b
  8853  001EA6  0D08               	mullw	8
  8854  001EA8  0E05               	movlw	low (_outpar+5)
  8855  001EAA  24F3               	addwf	243,w,c
  8856  001EAC  6ED9               	movwf	fsr2l,c
  8857  001EAE  0E01               	movlw	high (_outpar+5)
  8858  001EB0  20F4               	addwfc	prodh,w,c
  8859  001EB2  6EDA               	movwf	fsr2h,c
  8860  001EB4  0E00               	movlw	0
  8861  001EB6                     L17:
  8862  001EB6  6EDF               	movwf	indf2,c
  8863  001EB8                     l9347:
  8864                           
  8865                           ; BSR set to: 0
  8866  001EB8  2BD2               	incf	set_output@i& (0+255),f,b
  8867                           
  8868                           ; BSR set to: 0
  8869  001EBA  0E07               	movlw	7
  8870  001EBC  65D2               	cpfsgt	set_output@i& (0+255),b
  8871  001EBE  D752               	goto	l9321
  8872  001EC0  0012               	return	
  8873  001EC2                     __end_of_set_output:
  8874                           	callstack 0
  8875                           
  8876 ;; *************** function _set_io_config *****************
  8877 ;; Defined at:
  8878 ;;		line 1103 in file "../../src/can.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;		None
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  i               1   12[BANK0 ] unsigned char 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      void 
  8885 ;; Registers used:
  8886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8887 ;; Tracked objects:
  8888 ;;		On entry : 3E/0
  8889 ;;		On exit  : 3F/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8895 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8896 ;;Total ram usage:        3 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    3
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_main
  8903 ;;		_read_rx
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           	psect	text7
  8908  003DDE                     __ptext7:
  8909                           	callstack 0
  8910  003DDE                     _set_io_config:
  8911                           	callstack 27
  8912                           
  8913                           ;can.c: 1104: BYTE i;;can.c: 1105: outpush = 0;
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;incstack = 0
  8917  003DDE  0E00               	movlw	0
  8918  003DE0  6E1B               	movwf	_outpush^0,c	;volatile
  8919                           
  8920                           ;can.c: 1106: for (i = 0; i < 8; i++)
  8921  003DE2  0E00               	movlw	0
  8922  003DE4  0100               	movlb	0	; () banked
  8923  003DE6  6FC8               	movwf	set_io_config@i& (0+255),b
  8924  003DE8  D036               	goto	l8869
  8925  003DEA                     l1272:
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;can.c: 1114: case (0x9A) :;can.c: 1115: case (0x09) :;can.c: 1116: case (0x0A):;can.c: 
      +                          1117: case (0xA1) :;can.c: 1118: (outpush |= (1 << i));
  8929                           
  8930                           ; BSR set to: 0
  8931  003DEA  C0C8  F0C6         	movff	set_io_config@i,??_set_io_config
  8932  003DEE  0E01               	movlw	1
  8933  003DF0  6FC7               	movwf	(??_set_io_config+1)& (0+255),b
  8934  003DF2  2BC6               	incf	??_set_io_config& (0+255),f,b
  8935  003DF4  D002               	goto	u10334
  8936  003DF6                     u10335:
  8937  003DF6  90D8               	bcf	status,0,c
  8938  003DF8  37C7               	rlcf	(??_set_io_config+1)& (0+255),f,b
  8939  003DFA                     u10334:
  8940  003DFA  2FC6               	decfsz	??_set_io_config& (0+255),f,b
  8941  003DFC  D7FC               	goto	u10335
  8942  003DFE  0100               	movlb	0	; () banked
  8943  003E00  51C7               	movf	(??_set_io_config+1)& (0+255),w,b
  8944  003E02  121B               	iorwf	_outpush^0,f,c	;volatile
  8945                           
  8946                           ;can.c: 1119: break;
  8947  003E04  D042               	goto	l8871
  8948  003E06                     l8857:
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;can.c: 1122: (outpush &= ~(1 << i));
  8952  003E06  C0C8  F0C6         	movff	set_io_config@i,??_set_io_config
  8953  003E0A  0E01               	movlw	1
  8954  003E0C  6FC7               	movwf	(??_set_io_config+1)& (0+255),b
  8955  003E0E  2BC6               	incf	??_set_io_config& (0+255),f,b
  8956  003E10  D002               	goto	u10344
  8957  003E12                     u10345:
  8958  003E12  90D8               	bcf	status,0,c
  8959  003E14  37C7               	rlcf	(??_set_io_config+1)& (0+255),f,b
  8960  003E16                     u10344:
  8961  003E16  2FC6               	decfsz	??_set_io_config& (0+255),f,b
  8962  003E18  D7FC               	goto	u10345
  8963  003E1A  0100               	movlb	0	; () banked
  8964  003E1C  51C7               	movf	(??_set_io_config+1)& (0+255),w,b
  8965  003E1E  0AFF               	xorlw	255
  8966  003E20  161B               	andwf	_outpush^0,f,c	;volatile
  8967                           
  8968                           ;can.c: 1123: break;
  8969  003E22  D033               	goto	l8871
  8970  003E24                     l8861:
  8971                           
  8972                           ; BSR set to: 0
  8973  003E24  51C8               	movf	set_io_config@i& (0+255),w,b
  8974  003E26  0D08               	mullw	8
  8975  003E28  0E01               	movlw	low (_outpar+1)
  8976  003E2A  24F3               	addwf	243,w,c
  8977  003E2C  6ED9               	movwf	fsr2l,c
  8978  003E2E  0E01               	movlw	high (_outpar+1)
  8979  003E30  20F4               	addwfc	prodh,w,c
  8980  003E32  6EDA               	movwf	fsr2h,c
  8981  003E34  50DF               	movf	indf2,w,c
  8982                           
  8983                           ; Switch size 1, requested type "simple"
  8984                           ; Number of cases is 5, Range of values is 1 to 161
  8985                           ; switch strategies available:
  8986                           ; Name         Instructions Cycles
  8987                           ; simple_byte           16     9 (average)
  8988                           ;	Chosen strategy is simple_byte
  8989  003E36  0A01               	xorlw	1	; case 1
  8990  003E38  B4D8               	btfsc	status,2,c
  8991  003E3A  D7D7               	goto	l1272
  8992  003E3C  0A08               	xorlw	8	; case 9
  8993  003E3E  B4D8               	btfsc	status,2,c
  8994  003E40  D7D4               	goto	l1272
  8995  003E42  0A03               	xorlw	3	; case 10
  8996  003E44  B4D8               	btfsc	status,2,c
  8997  003E46  D7D1               	goto	l1272
  8998  003E48  0A90               	xorlw	144	; case 154
  8999  003E4A  B4D8               	btfsc	status,2,c
  9000  003E4C  D7CE               	goto	l1272
  9001  003E4E  0A3B               	xorlw	59	; case 161
  9002  003E50  B4D8               	btfsc	status,2,c
  9003  003E52  D7CB               	goto	l1272
  9004  003E54  D7D8               	goto	l8857
  9005  003E56                     l8869:
  9006                           
  9007                           ; BSR set to: 0
  9008  003E56  51C8               	movf	set_io_config@i& (0+255),w,b
  9009  003E58  0D08               	mullw	8
  9010  003E5A  0E00               	movlw	low _outpar
  9011  003E5C  24F3               	addwf	243,w,c
  9012  003E5E  6ED9               	movwf	fsr2l,c
  9013  003E60  0E01               	movlw	high _outpar
  9014  003E62  20F4               	addwfc	prodh,w,c
  9015  003E64  6EDA               	movwf	fsr2h,c
  9016  003E66  50DF               	movf	indf2,w,c
  9017                           
  9018                           ; Switch size 1, requested type "simple"
  9019                           ; Number of cases is 6, Range of values is 2 to 145
  9020                           ; switch strategies available:
  9021                           ; Name         Instructions Cycles
  9022                           ; simple_byte           19    10 (average)
  9023                           ;	Chosen strategy is simple_byte
  9024  003E68  0A02               	xorlw	2	; case 2
  9025  003E6A  B4D8               	btfsc	status,2,c
  9026  003E6C  D7BE               	goto	l1272
  9027  003E6E  0A07               	xorlw	7	; case 5
  9028  003E70  B4D8               	btfsc	status,2,c
  9029  003E72  D7BB               	goto	l1272
  9030  003E74  0A0B               	xorlw	11	; case 14
  9031  003E76  B4D8               	btfsc	status,2,c
  9032  003E78  D7D5               	goto	l8861
  9033  003E7A  0A81               	xorlw	129	; case 143
  9034  003E7C  B4D8               	btfsc	status,2,c
  9035  003E7E  D7B5               	goto	l1272
  9036  003E80  0A1F               	xorlw	31	; case 144
  9037  003E82  B4D8               	btfsc	status,2,c
  9038  003E84  D7B2               	goto	l1272
  9039  003E86  0A01               	xorlw	1	; case 145
  9040  003E88  D7E3               	goto	L18
  9041  003E8A                     l8871:
  9042                           
  9043                           ; BSR set to: 0
  9044  003E8A  2BC8               	incf	set_io_config@i& (0+255),f,b
  9045                           
  9046                           ; BSR set to: 0
  9047  003E8C  0E07               	movlw	7
  9048  003E8E  65C8               	cpfsgt	set_io_config@i& (0+255),b
  9049  003E90  D7E2               	goto	l8869
  9050  003E92  0012               	return	
  9051  003E94                     __end_of_set_io_config:
  9052                           	callstack 0
  9053                           
  9054 ;; *************** function _search_dict *****************
  9055 ;; Defined at:
  9056 ;;		line 144 in file "../../src/dict.c"
  9057 ;; Parameters:    Size  Location     Type
  9058 ;;  index           2   10[BANK0 ] unsigned int 
  9059 ;;  subindex        1   12[BANK0 ] unsigned char 
  9060 ;;  type            1   13[BANK0 ] unsigned char 
  9061 ;;  pos             1   14[BANK0 ] PTR unsigned char 
  9062 ;;		 -> read_rx@pos(1), 
  9063 ;; Auto vars:     Size  Location     Type
  9064 ;;  i               1   18[BANK0 ] unsigned char 
  9065 ;;  size            1   17[BANK0 ] unsigned char 
  9066 ;;  subindex_exi    1   16[BANK0 ] unsigned char 
  9067 ;;  index_exists    1   15[BANK0 ] unsigned char 
  9068 ;; Return value:  Size  Location     Type
  9069 ;;                  4   10[BANK0 ] unsigned long 
  9070 ;; Registers used:
  9071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  9072 ;; Tracked objects:
  9073 ;;		On entry : 3F/0
  9074 ;;		On exit  : 3F/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9077 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9078 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9080 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9081 ;;Total ram usage:        9 bytes
  9082 ;; Hardware stack levels used:    1
  9083 ;; Hardware stack levels required when called:    3
  9084 ;; This function calls:
  9085 ;;		Nothing
  9086 ;; This function is called by:
  9087 ;;		_read_rx
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           	psect	text8
  9092  00302E                     __ptext8:
  9093                           	callstack 0
  9094  00302E                     _search_dict:
  9095                           	callstack 26
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;dict.c: 145: BYTE i;;dict.c: 146: BYTE index_exists;;dict.c: 147: BYTE subindex_exists;
      +                          ;dict.c: 148: BYTE size;;dict.c: 149: i = 0;
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;incstack = 0
  9102  00302E  0E00               	movlw	0
  9103  003030  6FCE               	movwf	search_dict@i& (0+255),b
  9104                           
  9105                           ;dict.c: 150: index_exists = 0;
  9106  003032  0E00               	movlw	0
  9107  003034  6FCB               	movwf	search_dict@index_exists& (0+255),b
  9108                           
  9109                           ;dict.c: 151: subindex_exists = 0;
  9110  003036  0E00               	movlw	0
  9111  003038  6FCC               	movwf	search_dict@subindex_exists& (0+255),b
  9112                           
  9113                           ;dict.c: 152: while (dict[i].object != 0xFFFF)
  9114  00303A  D09D               	goto	l9417
  9115  00303C                     l9353:
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;dict.c: 153: {;dict.c: 154: if (dict[i].object == index)
  9119  00303C  51CE               	movf	search_dict@i& (0+255),w,b
  9120  00303E  0D07               	mullw	7
  9121  003040  0EAC               	movlw	low _dict
  9122  003042  24F3               	addwf	243,w,c
  9123  003044  6EF6               	movwf	tblptrl,c
  9124  003046  0E7E               	movlw	high _dict
  9125  003048  20F4               	addwfc	244,w,c
  9126  00304A  6EF7               	movwf	tblptrh,c
  9127  00304C                     	if	0	;There are less than 3 active tblptr bytes
  9128  00304C                     	endif
  9129  00304C  51C6               	movf	search_dict@index& (0+255),w,b
  9130  00304E  0009               	tblrd		*+
  9131  003050  18F5               	xorwf	tablat,w,c
  9132  003052  E104               	bnz	u11531
  9133  003054  51C7               	movf	(search_dict@index+1)& (0+255),w,b
  9134  003056  0009               	tblrd		*+
  9135  003058  18F5               	xorwf	tablat,w,c
  9136  00305A  A4D8               	btfss	status,2,c
  9137  00305C                     u11531:
  9138  00305C  D08B               	goto	l9415
  9139                           
  9140                           ; BSR set to: 0
  9141                           ;dict.c: 155: {;dict.c: 156: if (subindex <= dict[i].sub)
  9142  00305E  51CE               	movf	search_dict@i& (0+255),w,b
  9143  003060  0D07               	mullw	7
  9144  003062  0E02               	movlw	2
  9145  003064  26F3               	addwf	243,f,c
  9146  003066  0E00               	movlw	0
  9147  003068  22F4               	addwfc	244,f,c
  9148  00306A  0EAC               	movlw	low _dict
  9149  00306C  24F3               	addwf	243,w,c
  9150  00306E  6EF6               	movwf	tblptrl,c
  9151  003070  0E7E               	movlw	high _dict
  9152  003072  20F4               	addwfc	244,w,c
  9153  003074  6EF7               	movwf	tblptrh,c
  9154  003076                     	if	0	;There are less than 3 active tblptr bytes
  9155  003076                     	endif
  9156  003076  51C8               	movf	search_dict@subindex& (0+255),w,b
  9157  003078  0009               	tblrd		*+
  9158  00307A  5CF5               	subwf	tablat,w,c
  9159  00307C  A0D8               	btfss	status,0,c
  9160  00307E  D078               	goto	l1374
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;dict.c: 157: {;dict.c: 158: if ((type & 0xE0) == 0x20)
  9164  003080  51C9               	movf	search_dict@type& (0+255),w,b
  9165  003082  0BE0               	andlw	224
  9166  003084  0A20               	xorlw	32
  9167  003086  A4D8               	btfss	status,2,c
  9168  003088  D065               	goto	l1382
  9169                           
  9170                           ; BSR set to: 0
  9171                           ;dict.c: 159: {;dict.c: 160: size = dict[i].size;
  9172  00308A  51CE               	movf	search_dict@i& (0+255),w,b
  9173  00308C  0D07               	mullw	7
  9174  00308E  0E04               	movlw	4
  9175  003090  26F3               	addwf	243,f,c
  9176  003092  0E00               	movlw	0
  9177  003094  22F4               	addwfc	244,f,c
  9178  003096  0EAC               	movlw	low _dict
  9179  003098  24F3               	addwf	243,w,c
  9180  00309A  6EF6               	movwf	tblptrl,c
  9181  00309C  0E7E               	movlw	high _dict
  9182  00309E  20F4               	addwfc	244,w,c
  9183  0030A0  6EF7               	movwf	tblptrh,c
  9184  0030A2                     	if	0	;There are less than 3 active tblptr bytes
  9185  0030A2                     	endif
  9186  0030A2  0008               	tblrd		*
  9187  0030A4  CFF5 F0CD          	movff	tablat,search_dict@size
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;dict.c: 161: if ((type & 0x02) && (size > 4) &&;dict.c: 162: (subindex || (!dict[i].sub
      +                          )))
  9191  0030A8  A3C9               	btfss	search_dict@type& (0+255),1,b
  9192  0030AA  D020               	goto	l1376
  9193                           
  9194                           ; BSR set to: 0
  9195  0030AC  0E04               	movlw	4
  9196  0030AE  65CD               	cpfsgt	search_dict@size& (0+255),b
  9197  0030B0  D01D               	goto	l1376
  9198                           
  9199                           ; BSR set to: 0
  9200  0030B2  51C8               	movf	search_dict@subindex& (0+255),w,b
  9201  0030B4  A4D8               	btfss	status,2,c
  9202  0030B6  D011               	goto	u11590
  9203                           
  9204                           ; BSR set to: 0
  9205  0030B8  51CE               	movf	search_dict@i& (0+255),w,b
  9206  0030BA  0D07               	mullw	7
  9207  0030BC  0E02               	movlw	2
  9208  0030BE  26F3               	addwf	243,f,c
  9209  0030C0  0E00               	movlw	0
  9210  0030C2  22F4               	addwfc	244,f,c
  9211  0030C4  0EAC               	movlw	low _dict
  9212  0030C6  24F3               	addwf	243,w,c
  9213  0030C8  6EF6               	movwf	tblptrl,c
  9214  0030CA  0E7E               	movlw	high _dict
  9215  0030CC  20F4               	addwfc	244,w,c
  9216  0030CE  6EF7               	movwf	tblptrh,c
  9217  0030D0                     	if	0	;There are less than 3 active tblptr bytes
  9218  0030D0                     	endif
  9219  0030D0  0008               	tblrd		*
  9220  0030D2  50F5               	movf	tablat,w,c
  9221  0030D4  0900               	iorlw	0
  9222  0030D6  A4D8               	btfss	status,2,c
  9223  0030D8  D009               	goto	l1376
  9224  0030DA                     u11590:
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;dict.c: 163: return (0x06010000);
  9228  0030DA  0E00               	movlw	0
  9229  0030DC  6FC6               	movwf	?_search_dict& (0+255),b
  9230  0030DE  0E00               	movlw	0
  9231  0030E0  6FC7               	movwf	(?_search_dict+1)& (0+255),b
  9232  0030E2  0E01               	movlw	1
  9233  0030E4  6FC8               	movwf	(?_search_dict+2)& (0+255),b
  9234  0030E6  0E06               	movlw	6
  9235  0030E8  6FC9               	movwf	(?_search_dict+3)& (0+255),b
  9236  0030EA  0012               	return	
  9237  0030EC                     l1376:
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;dict.c: 164: else if (!((type & 0x02)) && (size <= 4))
  9241  0030EC  B3C9               	btfsc	search_dict@type& (0+255),1,b
  9242  0030EE  D004               	goto	l9383
  9243                           
  9244                           ; BSR set to: 0
  9245  0030F0  0E05               	movlw	5
  9246  0030F2  61CD               	cpfslt	search_dict@size& (0+255),b
  9247  0030F4  D001               	goto	l9383
  9248  0030F6  D7F1               	goto	u11590
  9249  0030F8                     l9383:
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;dict.c: 166: else if (!dict[i].access)
  9253  0030F8  51CE               	movf	search_dict@i& (0+255),w,b
  9254  0030FA  0D07               	mullw	7
  9255  0030FC  0E03               	movlw	3
  9256  0030FE  26F3               	addwf	243,f,c
  9257  003100  0E00               	movlw	0
  9258  003102  22F4               	addwfc	244,f,c
  9259  003104  0EAC               	movlw	low _dict
  9260  003106  24F3               	addwf	243,w,c
  9261  003108  6EF6               	movwf	tblptrl,c
  9262  00310A  0E7E               	movlw	high _dict
  9263  00310C  20F4               	addwfc	244,w,c
  9264  00310E  6EF7               	movwf	tblptrh,c
  9265  003110                     	if	0	;There are less than 3 active tblptr bytes
  9266  003110                     	endif
  9267  003110  0008               	tblrd		*
  9268  003112  50F5               	movf	tablat,w,c
  9269  003114  0900               	iorlw	0
  9270  003116  A4D8               	btfss	status,2,c
  9271  003118  D009               	goto	l9391
  9272  00311A                     u11620:
  9273                           
  9274                           ; BSR set to: 0
  9275                           ;dict.c: 167: return (0x06010002);
  9276  00311A  0E02               	movlw	2
  9277  00311C  6FC6               	movwf	?_search_dict& (0+255),b
  9278  00311E  0E00               	movlw	0
  9279  003120  6FC7               	movwf	(?_search_dict+1)& (0+255),b
  9280  003122  0E01               	movlw	1
  9281  003124  6FC8               	movwf	(?_search_dict+2)& (0+255),b
  9282  003126  0E06               	movlw	6
  9283  003128  6FC9               	movwf	(?_search_dict+3)& (0+255),b
  9284  00312A  0012               	return	
  9285  00312C                     l9391:
  9286                           
  9287                           ; BSR set to: 0
  9288                           ;dict.c: 168: else if ((!subindex) && dict[i].sub)
  9289  00312C  51C8               	movf	search_dict@subindex& (0+255),w,b
  9290  00312E  A4D8               	btfss	status,2,c
  9291  003130  D011               	goto	l1382
  9292                           
  9293                           ; BSR set to: 0
  9294  003132  51CE               	movf	search_dict@i& (0+255),w,b
  9295  003134  0D07               	mullw	7
  9296  003136  0E02               	movlw	2
  9297  003138  26F3               	addwf	243,f,c
  9298  00313A  0E00               	movlw	0
  9299  00313C  22F4               	addwfc	244,f,c
  9300  00313E  0EAC               	movlw	low _dict
  9301  003140  24F3               	addwf	243,w,c
  9302  003142  6EF6               	movwf	tblptrl,c
  9303  003144  0E7E               	movlw	high _dict
  9304  003146  20F4               	addwfc	244,w,c
  9305  003148  6EF7               	movwf	tblptrh,c
  9306  00314A                     	if	0	;There are less than 3 active tblptr bytes
  9307  00314A                     	endif
  9308  00314A  0008               	tblrd		*
  9309  00314C  50F5               	movf	tablat,w,c
  9310  00314E  0900               	iorlw	0
  9311  003150  A4D8               	btfss	status,2,c
  9312  003152  D7E3               	goto	u11620
  9313  003154                     l1382:
  9314                           
  9315                           ; BSR set to: 0
  9316                           ;dict.c: 170: *pos = i;
  9317                           
  9318                           ; BSR set to: 0
  9319  003154  51CA               	movf	search_dict@pos& (0+255),w,b
  9320  003156  6ED9               	movwf	fsr2l,c
  9321  003158  6ADA               	clrf	fsr2h,c
  9322  00315A  C0CE  FFDF         	movff	search_dict@i,indf2
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;dict.c: 171: return (0);
  9326  00315E  0E00               	movlw	0
  9327  003160  6FC6               	movwf	?_search_dict& (0+255),b
  9328  003162  0E00               	movlw	0
  9329  003164  6FC7               	movwf	(?_search_dict+1)& (0+255),b
  9330  003166  0E00               	movlw	0
  9331  003168  6FC8               	movwf	(?_search_dict+2)& (0+255),b
  9332  00316A  0E00               	movlw	0
  9333  00316C  6FC9               	movwf	(?_search_dict+3)& (0+255),b
  9334  00316E  0012               	return	
  9335  003170                     l1374:
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;dict.c: 179: };dict.c: 180: index_exists = 1;
  9339  003170  0E01               	movlw	1
  9340  003172  6FCB               	movwf	search_dict@index_exists& (0+255),b
  9341  003174                     l9415:
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;dict.c: 181: };dict.c: 182: i++;
  9345  003174  2BCE               	incf	search_dict@i& (0+255),f,b
  9346  003176                     l9417:
  9347                           
  9348                           ; BSR set to: 0
  9349  003176  51CE               	movf	search_dict@i& (0+255),w,b
  9350  003178  0D07               	mullw	7
  9351  00317A  0EAC               	movlw	low _dict
  9352  00317C  24F3               	addwf	243,w,c
  9353  00317E  6EF6               	movwf	tblptrl,c
  9354  003180  0E7E               	movlw	high _dict
  9355  003182  20F4               	addwfc	244,w,c
  9356  003184  6EF7               	movwf	tblptrh,c
  9357  003186                     	if	0	;There are less than 3 active tblptr bytes
  9358  003186                     	endif
  9359  003186  0009               	tblrd		*+
  9360  003188  28F5               	incf	tablat,w,c
  9361  00318A  E103               	bnz	u11651
  9362  00318C  0009               	tblrd		*+
  9363  00318E  28F5               	incf	tablat,w,c
  9364  003190  A4D8               	btfss	status,2,c
  9365  003192                     u11651:
  9366  003192  D754               	goto	l9353
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;dict.c: 183: };dict.c: 184: if (subindex_exists)
  9370  003194  51CC               	movf	search_dict@subindex_exists& (0+255),w,b
  9371  003196  A4D8               	btfss	status,2,c
  9372  003198  D7C0               	goto	u11620
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;dict.c: 186: if (index_exists)
  9376  00319A  51CB               	movf	search_dict@index_exists& (0+255),w,b
  9377  00319C  B4D8               	btfsc	status,2,c
  9378  00319E  D009               	goto	l9431
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;dict.c: 187: return (0x06090011);
  9382  0031A0  0E11               	movlw	17
  9383  0031A2  6FC6               	movwf	?_search_dict& (0+255),b
  9384  0031A4  0E00               	movlw	0
  9385  0031A6  6FC7               	movwf	(?_search_dict+1)& (0+255),b
  9386  0031A8  0E09               	movlw	9
  9387  0031AA  6FC8               	movwf	(?_search_dict+2)& (0+255),b
  9388  0031AC  0E06               	movlw	6
  9389  0031AE  6FC9               	movwf	(?_search_dict+3)& (0+255),b
  9390  0031B0  0012               	return	
  9391  0031B2                     l9431:
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;dict.c: 188: return (0x06020000);
  9395  0031B2  0E00               	movlw	0
  9396  0031B4  6FC6               	movwf	?_search_dict& (0+255),b
  9397  0031B6  0E00               	movlw	0
  9398  0031B8  6FC7               	movwf	(?_search_dict+1)& (0+255),b
  9399  0031BA  0E02               	movlw	2
  9400  0031BC  6FC8               	movwf	(?_search_dict+2)& (0+255),b
  9401  0031BE  0E06               	movlw	6
  9402  0031C0  6FC9               	movwf	(?_search_dict+3)& (0+255),b
  9403                           
  9404                           ; BSR set to: 0
  9405  0031C2  0012               	return		;funcret
  9406  0031C4                     __end_of_search_dict:
  9407                           	callstack 0
  9408                           
  9409 ;; *************** function _sdo_segment *****************
  9410 ;; Defined at:
  9411 ;;		line 293 in file "../../src/can.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;  command         1    wreg     unsigned char 
  9414 ;;  size            1   16[BANK0 ] unsigned char 
  9415 ;;  value           2   17[BANK0 ] PTR unsigned char 
  9416 ;;		 -> read_rx@buffer(8), NULL(0), virt_out(7), virt_in(7), 
  9417 ;;		 -> inpar(56), outpar(64), 
  9418 ;; Auto vars:     Size  Location     Type
  9419 ;;  command         1   21[BANK0 ] unsigned char 
  9420 ;;  i               1   22[BANK0 ] unsigned char 
  9421 ;; Return value:  Size  Location     Type
  9422 ;;                  1    wreg      void 
  9423 ;; Registers used:
  9424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9425 ;; Tracked objects:
  9426 ;;		On entry : 3F/0
  9427 ;;		On exit  : 30/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9430 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9431 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9432 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9433 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9434 ;;Total ram usage:        7 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; Hardware stack levels required when called:    4
  9437 ;; This function calls:
  9438 ;;		_can_transmit
  9439 ;; This function is called by:
  9440 ;;		_read_rx
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           	psect	text9
  9445  003C3C                     __ptext9:
  9446                           	callstack 0
  9447  003C3C                     _sdo_segment:
  9448                           	callstack 25
  9449                           
  9450                           ; BSR set to: 0
  9451                           ;incstack = 0
  9452                           ;sdo_segment@command stored from wreg
  9453  003C3C  6FD1               	movwf	sdo_segment@command& (0+255),b
  9454  003C3E                     
  9455                           ;can.c: 294: BYTE i;;can.c: 295: while (tc == 30);
  9456  003C3E  0E1E               	movlw	30
  9457  003C40  180D               	xorwf	_tc^0,w,c	;volatile
  9458  003C42  B4D8               	btfsc	status,2,c
  9459  003C44  D7FC               	goto	l8891
  9460                           
  9461                           ;can.c: 296: tx[ti][0] = 0xB0 + 8;
  9462  003C46  500A               	movf	_ti^0,w,c	;volatile
  9463  003C48  0D0A               	mullw	10
  9464  003C4A  0E8B               	movlw	low _tx
  9465  003C4C  24F3               	addwf	243,w,c
  9466  003C4E  6ED9               	movwf	fsr2l,c
  9467  003C50  0E01               	movlw	high _tx
  9468  003C52  20F4               	addwfc	prodh,w,c
  9469  003C54  6EDA               	movwf	fsr2h,c
  9470  003C56  0EB8               	movlw	184
  9471  003C58  6EDF               	movwf	indf2,c
  9472                           
  9473                           ;can.c: 297: tx[ti][1] = node_id;
  9474  003C5A  500A               	movf	_ti^0,w,c	;volatile
  9475  003C5C  0D0A               	mullw	10
  9476  003C5E  0E8C               	movlw	low (_tx+1)
  9477  003C60  24F3               	addwf	243,w,c
  9478  003C62  6ED9               	movwf	fsr2l,c
  9479  003C64  0E01               	movlw	high (_tx+1)
  9480  003C66  20F4               	addwfc	prodh,w,c
  9481  003C68  6EDA               	movwf	fsr2h,c
  9482  003C6A  C09D  FFDF         	movff	_node_id,indf2
  9483                           
  9484                           ;can.c: 298: tx[ti][2] = command;
  9485  003C6E  500A               	movf	_ti^0,w,c	;volatile
  9486  003C70  0D0A               	mullw	10
  9487  003C72  0E8D               	movlw	low (_tx+2)
  9488  003C74  24F3               	addwf	243,w,c
  9489  003C76  6ED9               	movwf	fsr2l,c
  9490  003C78  0E01               	movlw	high (_tx+2)
  9491  003C7A  20F4               	addwfc	prodh,w,c
  9492  003C7C  6EDA               	movwf	fsr2h,c
  9493  003C7E  C0D1  FFDF         	movff	sdo_segment@command,indf2
  9494                           
  9495                           ;can.c: 299: for (i = 0; i < size; i++)
  9496  003C82  0E00               	movlw	0
  9497  003C84  0100               	movlb	0	; () banked
  9498  003C86  6FD2               	movwf	sdo_segment@i& (0+255),b
  9499  003C88  D01D               	goto	l8905
  9500  003C8A                     l8899:
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;can.c: 300: tx[ti][3 + i] = *value++;
  9504  003C8A  C0CD  FFD9         	movff	sdo_segment@value,fsr2l
  9505  003C8E  C0CE  FFDA         	movff	sdo_segment@value+1,fsr2h
  9506  003C92  500A               	movf	_ti^0,w,c	;volatile
  9507  003C94  0D0A               	mullw	10
  9508  003C96  0E8B               	movlw	low _tx
  9509  003C98  6FCF               	movwf	??_sdo_segment& (0+255),b
  9510  003C9A  0E01               	movlw	high _tx
  9511  003C9C  6FD0               	movwf	(??_sdo_segment+1)& (0+255),b
  9512  003C9E  0E03               	movlw	3
  9513  003CA0  27CF               	addwf	??_sdo_segment& (0+255),f,b
  9514  003CA2  0E00               	movlw	0
  9515  003CA4  23D0               	addwfc	(??_sdo_segment+1)& (0+255),f,b
  9516  003CA6  50F3               	movf	243,w,c
  9517  003CA8  27CF               	addwf	??_sdo_segment& (0+255),f,b
  9518  003CAA  50F4               	movf	244,w,c
  9519  003CAC  23D0               	addwfc	(??_sdo_segment+1)& (0+255),f,b
  9520  003CAE  51D2               	movf	sdo_segment@i& (0+255),w,b
  9521  003CB0  25CF               	addwf	??_sdo_segment& (0+255),w,b
  9522  003CB2  6EE1               	movwf	fsr1l,c
  9523  003CB4  0E00               	movlw	0
  9524  003CB6  21D0               	addwfc	(??_sdo_segment+1)& (0+255),w,b
  9525  003CB8  6EE2               	movwf	fsr1h,c
  9526  003CBA  CFDF FFE7          	movff	indf2,indf1
  9527                           
  9528                           ; BSR set to: 0
  9529  003CBE  4BCD               	infsnz	sdo_segment@value& (0+255),f,b
  9530  003CC0  2BCE               	incf	(sdo_segment@value+1)& (0+255),f,b
  9531                           
  9532                           ; BSR set to: 0
  9533  003CC2  2BD2               	incf	sdo_segment@i& (0+255),f,b
  9534  003CC4                     l8905:
  9535                           
  9536                           ; BSR set to: 0
  9537  003CC4  51CC               	movf	sdo_segment@size& (0+255),w,b
  9538  003CC6  5DD2               	subwf	sdo_segment@i& (0+255),w,b
  9539  003CC8  A0D8               	btfss	status,0,c
  9540  003CCA  D7DF               	goto	l8899
  9541                           
  9542                           ; BSR set to: 0
  9543                           ;can.c: 301: for (i = size; i < 7; i++)
  9544  003CCC  C0CC  F0D2         	movff	sdo_segment@size,sdo_segment@i
  9545  003CD0                     l8907:
  9546                           
  9547                           ; BSR set to: 0
  9548  003CD0  0E06               	movlw	6
  9549  003CD2  65D2               	cpfsgt	sdo_segment@i& (0+255),b
  9550  003CD4  D001               	goto	l8911
  9551  003CD6  D018               	goto	l8917
  9552  003CD8                     l8911:
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;can.c: 302: tx[ti][3 + i] = 0;
  9556  003CD8  500A               	movf	_ti^0,w,c	;volatile
  9557  003CDA  0D0A               	mullw	10
  9558  003CDC  0E8B               	movlw	low _tx
  9559  003CDE  6FCF               	movwf	??_sdo_segment& (0+255),b
  9560  003CE0  0E01               	movlw	high _tx
  9561  003CE2  6FD0               	movwf	(??_sdo_segment+1)& (0+255),b
  9562  003CE4  0E03               	movlw	3
  9563  003CE6  27CF               	addwf	??_sdo_segment& (0+255),f,b
  9564  003CE8  0E00               	movlw	0
  9565  003CEA  23D0               	addwfc	(??_sdo_segment+1)& (0+255),f,b
  9566  003CEC  50F3               	movf	243,w,c
  9567  003CEE  27CF               	addwf	??_sdo_segment& (0+255),f,b
  9568  003CF0  50F4               	movf	244,w,c
  9569  003CF2  23D0               	addwfc	(??_sdo_segment+1)& (0+255),f,b
  9570  003CF4  51D2               	movf	sdo_segment@i& (0+255),w,b
  9571  003CF6  25CF               	addwf	??_sdo_segment& (0+255),w,b
  9572  003CF8  6ED9               	movwf	fsr2l,c
  9573  003CFA  0E00               	movlw	0
  9574  003CFC  21D0               	addwfc	(??_sdo_segment+1)& (0+255),w,b
  9575  003CFE  6EDA               	movwf	fsr2h,c
  9576  003D00  0E00               	movlw	0
  9577  003D02  6EDF               	movwf	indf2,c
  9578                           
  9579                           ; BSR set to: 0
  9580  003D04  2BD2               	incf	sdo_segment@i& (0+255),f,b
  9581  003D06  D7E4               	goto	l8907
  9582  003D08                     l8917:
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;can.c: 303: can_transmit ();
  9586  003D08  ECBC  F01C         	call	_can_transmit	;wreg free
  9587  003D0C  0012               	return		;funcret
  9588  003D0E                     __end_of_sdo_segment:
  9589                           	callstack 0
  9590                           
  9591 ;; *************** function _sdo_response *****************
  9592 ;; Defined at:
  9593 ;;		line 275 in file "../../src/can.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;  command         1    wreg     unsigned char 
  9596 ;;  index           2   16[BANK0 ] unsigned int 
  9597 ;;  subindex        1   18[BANK0 ] unsigned char 
  9598 ;;  value           4   19[BANK0 ] unsigned long 
  9599 ;; Auto vars:     Size  Location     Type
  9600 ;;  command         1   23[BANK0 ] unsigned char 
  9601 ;; Return value:  Size  Location     Type
  9602 ;;                  1    wreg      void 
  9603 ;; Registers used:
  9604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9605 ;; Tracked objects:
  9606 ;;		On entry : 3E/0
  9607 ;;		On exit  : 30/0
  9608 ;;		Unchanged: 0/0
  9609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9610 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9613 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9614 ;;Total ram usage:        8 bytes
  9615 ;; Hardware stack levels used:    1
  9616 ;; Hardware stack levels required when called:    4
  9617 ;; This function calls:
  9618 ;;		_can_transmit
  9619 ;; This function is called by:
  9620 ;;		_read_rx
  9621 ;; This function uses a non-reentrant model
  9622 ;;
  9623                           
  9624                           	psect	text10
  9625  003A8C                     __ptext10:
  9626                           	callstack 0
  9627  003A8C                     _sdo_response:
  9628                           	callstack 25
  9629                           
  9630                           ;incstack = 0
  9631                           ;sdo_response@command stored from wreg
  9632  003A8C  0100               	movlb	0	; () banked
  9633  003A8E  6FD3               	movwf	sdo_response@command& (0+255),b
  9634  003A90                     
  9635                           ;can.c: 276: while (tc == 30);
  9636  003A90  0E1E               	movlw	30
  9637  003A92  180D               	xorwf	_tc^0,w,c	;volatile
  9638  003A94  B4D8               	btfsc	status,2,c
  9639  003A96  D7FC               	goto	l8883
  9640                           
  9641                           ;can.c: 277: tx[ti][0] = 0xB0 + 8;
  9642  003A98  500A               	movf	_ti^0,w,c	;volatile
  9643  003A9A  0D0A               	mullw	10
  9644  003A9C  0E8B               	movlw	low _tx
  9645  003A9E  24F3               	addwf	243,w,c
  9646  003AA0  6ED9               	movwf	fsr2l,c
  9647  003AA2  0E01               	movlw	high _tx
  9648  003AA4  20F4               	addwfc	prodh,w,c
  9649  003AA6  6EDA               	movwf	fsr2h,c
  9650  003AA8  0EB8               	movlw	184
  9651  003AAA  6EDF               	movwf	indf2,c
  9652                           
  9653                           ;can.c: 278: tx[ti][1] = node_id;
  9654  003AAC  500A               	movf	_ti^0,w,c	;volatile
  9655  003AAE  0D0A               	mullw	10
  9656  003AB0  0E8C               	movlw	low (_tx+1)
  9657  003AB2  24F3               	addwf	243,w,c
  9658  003AB4  6ED9               	movwf	fsr2l,c
  9659  003AB6  0E01               	movlw	high (_tx+1)
  9660  003AB8  20F4               	addwfc	prodh,w,c
  9661  003ABA  6EDA               	movwf	fsr2h,c
  9662  003ABC  C09D  FFDF         	movff	_node_id,indf2
  9663                           
  9664                           ;can.c: 279: tx[ti][2] = command;
  9665  003AC0  500A               	movf	_ti^0,w,c	;volatile
  9666  003AC2  0D0A               	mullw	10
  9667  003AC4  0E8D               	movlw	low (_tx+2)
  9668  003AC6  24F3               	addwf	243,w,c
  9669  003AC8  6ED9               	movwf	fsr2l,c
  9670  003ACA  0E01               	movlw	high (_tx+2)
  9671  003ACC  20F4               	addwfc	prodh,w,c
  9672  003ACE  6EDA               	movwf	fsr2h,c
  9673  003AD0  C0D3  FFDF         	movff	sdo_response@command,indf2
  9674                           
  9675                           ;can.c: 280: tx[ti][3] = index;
  9676  003AD4  500A               	movf	_ti^0,w,c	;volatile
  9677  003AD6  0D0A               	mullw	10
  9678  003AD8  0E8E               	movlw	low (_tx+3)
  9679  003ADA  24F3               	addwf	243,w,c
  9680  003ADC  6ED9               	movwf	fsr2l,c
  9681  003ADE  0E01               	movlw	high (_tx+3)
  9682  003AE0  20F4               	addwfc	prodh,w,c
  9683  003AE2  6EDA               	movwf	fsr2h,c
  9684  003AE4  C0CC  FFDF         	movff	sdo_response@index,indf2
  9685                           
  9686                           ;can.c: 281: tx[ti][4] = index >> 8;
  9687  003AE8  500A               	movf	_ti^0,w,c	;volatile
  9688  003AEA  0D0A               	mullw	10
  9689  003AEC  0E8F               	movlw	low (_tx+4)
  9690  003AEE  24F3               	addwf	243,w,c
  9691  003AF0  6ED9               	movwf	fsr2l,c
  9692  003AF2  0E01               	movlw	high (_tx+4)
  9693  003AF4  20F4               	addwfc	prodh,w,c
  9694  003AF6  6EDA               	movwf	fsr2h,c
  9695  003AF8  C0CD  FFDF         	movff	sdo_response@index+1,indf2
  9696                           
  9697                           ;can.c: 282: tx[ti][5] = subindex;
  9698  003AFC  500A               	movf	_ti^0,w,c	;volatile
  9699  003AFE  0D0A               	mullw	10
  9700  003B00  0E90               	movlw	low (_tx+5)
  9701  003B02  24F3               	addwf	243,w,c
  9702  003B04  6ED9               	movwf	fsr2l,c
  9703  003B06  0E01               	movlw	high (_tx+5)
  9704  003B08  20F4               	addwfc	prodh,w,c
  9705  003B0A  6EDA               	movwf	fsr2h,c
  9706  003B0C  C0CE  FFDF         	movff	sdo_response@subindex,indf2
  9707                           
  9708                           ;can.c: 283: tx[ti][6] = value;
  9709  003B10  500A               	movf	_ti^0,w,c	;volatile
  9710  003B12  0D0A               	mullw	10
  9711  003B14  0E91               	movlw	low (_tx+6)
  9712  003B16  24F3               	addwf	243,w,c
  9713  003B18  6ED9               	movwf	fsr2l,c
  9714  003B1A  0E01               	movlw	high (_tx+6)
  9715  003B1C  20F4               	addwfc	prodh,w,c
  9716  003B1E  6EDA               	movwf	fsr2h,c
  9717  003B20  C0CF  FFDF         	movff	sdo_response@value,indf2
  9718                           
  9719                           ;can.c: 284: tx[ti][7] = value >> 8;
  9720  003B24  500A               	movf	_ti^0,w,c	;volatile
  9721  003B26  0D0A               	mullw	10
  9722  003B28  0E92               	movlw	low (_tx+7)
  9723  003B2A  24F3               	addwf	243,w,c
  9724  003B2C  6ED9               	movwf	fsr2l,c
  9725  003B2E  0E01               	movlw	high (_tx+7)
  9726  003B30  20F4               	addwfc	prodh,w,c
  9727  003B32  6EDA               	movwf	fsr2h,c
  9728  003B34  C0D0  FFDF         	movff	sdo_response@value+1,indf2
  9729                           
  9730                           ;can.c: 285: tx[ti][8] = value >> 16;
  9731  003B38  500A               	movf	_ti^0,w,c	;volatile
  9732  003B3A  0D0A               	mullw	10
  9733  003B3C  0E93               	movlw	low (_tx+8)
  9734  003B3E  24F3               	addwf	243,w,c
  9735  003B40  6ED9               	movwf	fsr2l,c
  9736  003B42  0E01               	movlw	high (_tx+8)
  9737  003B44  20F4               	addwfc	prodh,w,c
  9738  003B46  6EDA               	movwf	fsr2h,c
  9739  003B48  C0D1  FFDF         	movff	sdo_response@value+2,indf2
  9740                           
  9741                           ;can.c: 286: tx[ti][9] = value >> 24;
  9742  003B4C  500A               	movf	_ti^0,w,c	;volatile
  9743  003B4E  0D0A               	mullw	10
  9744  003B50  0E94               	movlw	low (_tx+9)
  9745  003B52  24F3               	addwf	243,w,c
  9746  003B54  6ED9               	movwf	fsr2l,c
  9747  003B56  0E01               	movlw	high (_tx+9)
  9748  003B58  20F4               	addwfc	prodh,w,c
  9749  003B5A  6EDA               	movwf	fsr2h,c
  9750  003B5C  C0D2  FFDF         	movff	sdo_response@value+3,indf2
  9751                           
  9752                           ;can.c: 287: can_transmit ();
  9753  003B60  ECBC  F01C         	call	_can_transmit	;wreg free
  9754  003B64  0012               	return		;funcret
  9755  003B66                     __end_of_sdo_response:
  9756                           	callstack 0
  9757                           
  9758 ;; *************** function _read_dict *****************
  9759 ;; Defined at:
  9760 ;;		line 41 in file "../../src/dict.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;  pos             1    wreg     unsigned char 
  9763 ;;  subindex        1   10[BANK0 ] unsigned char 
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;  pos             1   29[BANK0 ] unsigned char 
  9766 ;;  value           4   22[BANK0 ] unsigned char [4]
  9767 ;;  i               1   28[BANK0 ] unsigned char 
  9768 ;;  size            1   27[BANK0 ] unsigned char 
  9769 ;;  address         1   26[BANK0 ] unsigned char 
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  4   10[BANK0 ] unsigned long 
  9772 ;; Registers used:
  9773 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  9774 ;; Tracked objects:
  9775 ;;		On entry : 3F/0
  9776 ;;		On exit  : 3F/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9780 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9781 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9782 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9783 ;;Total ram usage:       20 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    3
  9786 ;; This function calls:
  9787 ;;		Nothing
  9788 ;; This function is called by:
  9789 ;;		_read_rx
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text11
  9794  002A82                     __ptext11:
  9795                           	callstack 0
  9796  002A82                     _read_dict:
  9797                           	callstack 26
  9798                           
  9799                           ;incstack = 0
  9800                           ;read_dict@pos stored from wreg
  9801  002A82  6FD9               	movwf	read_dict@pos& (0+255),b
  9802                           
  9803                           ;dict.c: 42: BYTE address;;dict.c: 43: BYTE i;;dict.c: 44: BYTE value[4];;dict.c: 45: BY
      +                          TE size;;dict.c: 46: size = dict[pos].size;
  9804  002A84  0100               	movlb	0	; () banked
  9805  002A86  51D9               	movf	read_dict@pos& (0+255),w,b
  9806  002A88  0D07               	mullw	7
  9807  002A8A  0E04               	movlw	4
  9808  002A8C  26F3               	addwf	243,f,c
  9809  002A8E  0E00               	movlw	0
  9810  002A90  22F4               	addwfc	244,f,c
  9811  002A92  0EAC               	movlw	low _dict
  9812  002A94  24F3               	addwf	243,w,c
  9813  002A96  6EF6               	movwf	tblptrl,c
  9814  002A98  0E7E               	movlw	high _dict
  9815  002A9A  20F4               	addwfc	244,w,c
  9816  002A9C  6EF7               	movwf	tblptrh,c
  9817  002A9E                     	if	0	;There are less than 3 active tblptr bytes
  9818  002A9E                     	endif
  9819  002A9E  0008               	tblrd		*
  9820  002AA0  CFF5 F0D7          	movff	tablat,read_dict@size
  9821                           
  9822                           ; BSR set to: 0
  9823                           ;dict.c: 48: if (subindex)
  9824  002AA4  51C6               	movf	read_dict@subindex& (0+255),w,b
  9825  002AA6  B4D8               	btfsc	status,2,c
  9826  002AA8  D005               	goto	l9509
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;dict.c: 49: address = (subindex - 1) * size;
  9830  002AAA  05C6               	decf	read_dict@subindex& (0+255),w,b
  9831  002AAC  03D7               	mulwf	read_dict@size& (0+255),b
  9832  002AAE  CFF3 F0D6          	movff	prodl,read_dict@address
  9833  002AB2  D140               	goto	l9545
  9834  002AB4                     l9509:
  9835                           
  9836                           ; BSR set to: 0
  9837                           ;dict.c: 50: else;dict.c: 51: address = 0;
  9838  002AB4  0E00               	movlw	0
  9839  002AB6  6FD6               	movwf	read_dict@address& (0+255),b
  9840  002AB8  D13D               	goto	l9545
  9841  002ABA                     l9511:
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;dict.c: 55: case (0x6260):;dict.c: 56: return (((DWORD)((*((BYTE *)dict[pos].pointer) >
      +                          > subindex - 1) & 1)) << 15);
  9845  002ABA  C0C6  F0CA         	movff	read_dict@subindex,??_read_dict
  9846  002ABE  0EFF               	movlw	-1
  9847  002AC0  27CA               	addwf	??_read_dict& (0+255),f,b
  9848  002AC2  51D9               	movf	read_dict@pos& (0+255),w,b
  9849  002AC4  0D07               	mullw	7
  9850  002AC6  0E05               	movlw	5
  9851  002AC8  26F3               	addwf	243,f,c
  9852  002ACA  0E00               	movlw	0
  9853  002ACC  22F4               	addwfc	244,f,c
  9854  002ACE  0EAC               	movlw	low _dict
  9855  002AD0  24F3               	addwf	243,w,c
  9856  002AD2  6EF6               	movwf	tblptrl,c
  9857  002AD4  0E7E               	movlw	high _dict
  9858  002AD6  20F4               	addwfc	244,w,c
  9859  002AD8  6EF7               	movwf	tblptrh,c
  9860  002ADA                     	if	0	;There are less than 3 active tblptr bytes
  9861  002ADA                     	endif
  9862  002ADA  0009               	tblrd		*+
  9863  002ADC  CFF5 F0CB          	movff	tablat,??_read_dict+1
  9864  002AE0  0009               	tblrd		*+
  9865  002AE2  CFF5 F0CC          	movff	tablat,??_read_dict+2
  9866  002AE6  C0CB  FFF6         	movff	??_read_dict+1,tblptrl
  9867  002AEA  C0CC  FFF7         	movff	??_read_dict+2,tblptrh
  9868  002AEE  6AF8               	clrf	tblptru,c
  9869  002AF0  0E0E               	movlw	(high __ramtop+-1)
  9870  002AF2  64F7               	cpfsgt	tblptrh,c
  9871  002AF4  D003               	bra	u11867
  9872  002AF6  0008               	tblrd		*
  9873  002AF8  50F5               	movf	tablat,w,c
  9874  002AFA  D005               	bra	u11860
  9875  002AFC                     u11867:
  9876  002AFC  CFF6 FFE1          	movff	tblptrl,fsr1l
  9877  002B00  CFF7 FFE2          	movff	tblptrh,fsr1h
  9878  002B04  50E7               	movf	indf1,w,c
  9879  002B06                     u11860:
  9880  002B06  0100               	movlb	0	; () banked
  9881  002B08  6FCD               	movwf	(??_read_dict+3)& (0+255),b
  9882  002B0A  2BCA               	incf	??_read_dict& (0+255),f,b
  9883  002B0C  D002               	goto	u11874
  9884  002B0E                     u11875:
  9885  002B0E  90D8               	bcf	status,0,c
  9886  002B10  33CD               	rrcf	(??_read_dict+3)& (0+255),f,b
  9887  002B12                     u11874:
  9888  002B12  2FCA               	decfsz	??_read_dict& (0+255),f,b
  9889  002B14  D7FC               	goto	u11875
  9890  002B16  0E01               	movlw	1
  9891  002B18  0100               	movlb	0	; () banked
  9892  002B1A  17CD               	andwf	(??_read_dict+3)& (0+255),f,b
  9893  002B1C  C0CD  F0CE         	movff	??_read_dict+3,??_read_dict+4
  9894  002B20  6BCF               	clrf	(??_read_dict+5)& (0+255),b
  9895  002B22  6BD0               	clrf	(??_read_dict+6)& (0+255),b
  9896  002B24  6BD1               	clrf	(??_read_dict+7)& (0+255),b
  9897  002B26  0E0F               	movlw	15
  9898  002B28                     u11885:
  9899  002B28  90D8               	bcf	status,0,c
  9900  002B2A  37CE               	rlcf	(??_read_dict+4)& (0+255),f,b
  9901  002B2C  37CF               	rlcf	(??_read_dict+5)& (0+255),f,b
  9902  002B2E  37D0               	rlcf	(??_read_dict+6)& (0+255),f,b
  9903  002B30  37D1               	rlcf	(??_read_dict+7)& (0+255),f,b
  9904  002B32  2EE8               	decfsz	wreg,f,c
  9905  002B34  D7F9               	goto	u11885
  9906  002B36  C0CE  F0C6         	movff	??_read_dict+4,?_read_dict
  9907  002B3A  C0CF  F0C7         	movff	??_read_dict+5,?_read_dict+1
  9908  002B3E  C0D0  F0C8         	movff	??_read_dict+6,?_read_dict+2
  9909  002B42  C0D1  F0C9         	movff	??_read_dict+7,?_read_dict+3
  9910  002B46  0012               	return	
  9911  002B48                     l9515:
  9912                           
  9913                           ; BSR set to: 0
  9914                           ;dict.c: 59: return (*((BYTE *)dict[pos].pointer + (subindex - 1) * 7));
  9915  002B48  0EF9               	movlw	249
  9916  002B4A  6FCA               	movwf	??_read_dict& (0+255),b
  9917  002B4C  0EFF               	movlw	255
  9918  002B4E  6FCB               	movwf	(??_read_dict+1)& (0+255),b
  9919  002B50  51D9               	movf	read_dict@pos& (0+255),w,b
  9920  002B52  0D07               	mullw	7
  9921  002B54  0E05               	movlw	5
  9922  002B56  26F3               	addwf	243,f,c
  9923  002B58  0E00               	movlw	0
  9924  002B5A  22F4               	addwfc	244,f,c
  9925  002B5C  0EAC               	movlw	low _dict
  9926  002B5E  24F3               	addwf	243,w,c
  9927  002B60  6EF6               	movwf	tblptrl,c
  9928  002B62  0E7E               	movlw	high _dict
  9929  002B64  20F4               	addwfc	244,w,c
  9930  002B66  6EF7               	movwf	tblptrh,c
  9931  002B68                     	if	0	;There are less than 3 active tblptr bytes
  9932  002B68                     	endif
  9933  002B68  0009               	tblrd		*+
  9934  002B6A  CFF5 F0CC          	movff	tablat,??_read_dict+2
  9935  002B6E  0009               	tblrd		*+
  9936  002B70  CFF5 F0CD          	movff	tablat,??_read_dict+3
  9937  002B74  51C6               	movf	read_dict@subindex& (0+255),w,b
  9938  002B76  0D07               	mullw	7
  9939  002B78  50F3               	movf	243,w,c
  9940  002B7A  27CC               	addwf	(??_read_dict+2)& (0+255),f,b
  9941  002B7C  50F4               	movf	244,w,c
  9942  002B7E  23CD               	addwfc	(??_read_dict+3)& (0+255),f,b
  9943  002B80  51CA               	movf	??_read_dict& (0+255),w,b
  9944  002B82  27CC               	addwf	(??_read_dict+2)& (0+255),f,b
  9945  002B84  51CB               	movf	(??_read_dict+1)& (0+255),w,b
  9946  002B86  23CD               	addwfc	(??_read_dict+3)& (0+255),f,b
  9947  002B88  C0CC  FFF6         	movff	??_read_dict+2,tblptrl
  9948  002B8C  C0CD  FFF7         	movff	??_read_dict+3,tblptrh
  9949  002B90  6AF8               	clrf	tblptru,c
  9950  002B92  0E0E               	movlw	(high __ramtop+-1)
  9951  002B94  64F7               	cpfsgt	tblptrh,c
  9952  002B96  D003               	bra	u11897
  9953  002B98  0008               	tblrd		*
  9954  002B9A  50F5               	movf	tablat,w,c
  9955  002B9C  D005               	bra	u11890
  9956  002B9E                     u11897:
  9957  002B9E  CFF6 FFE1          	movff	tblptrl,fsr1l
  9958  002BA2  CFF7 FFE2          	movff	tblptrh,fsr1h
  9959  002BA6  50E7               	movf	indf1,w,c
  9960  002BA8                     u11890:
  9961  002BA8  0100               	movlb	0	; () banked
  9962  002BAA  6FCE               	movwf	(??_read_dict+4)& (0+255),b
  9963  002BAC  51CE               	movf	(??_read_dict+4)& (0+255),w,b
  9964  002BAE  6FC6               	movwf	?_read_dict& (0+255),b
  9965  002BB0  6BC7               	clrf	(?_read_dict+1)& (0+255),b
  9966  002BB2  6BC8               	clrf	(?_read_dict+2)& (0+255),b
  9967  002BB4  6BC9               	clrf	(?_read_dict+3)& (0+255),b
  9968  002BB6  0012               	return	
  9969  002BB8                     l9519:
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;dict.c: 62: return (*((BYTE *)dict[pos].pointer + (subindex - 1) * (7 + 1)));
  9973  002BB8  0EF8               	movlw	248
  9974  002BBA  6FCA               	movwf	??_read_dict& (0+255),b
  9975  002BBC  0EFF               	movlw	255
  9976  002BBE  6FCB               	movwf	(??_read_dict+1)& (0+255),b
  9977  002BC0  51C6               	movf	read_dict@subindex& (0+255),w,b
  9978  002BC2  6FCC               	movwf	(??_read_dict+2)& (0+255),b
  9979  002BC4  6BCD               	clrf	(??_read_dict+3)& (0+255),b
  9980  002BC6  90D8               	bcf	status,0,c
  9981  002BC8  37CC               	rlcf	(??_read_dict+2)& (0+255),f,b
  9982  002BCA  37CD               	rlcf	(??_read_dict+3)& (0+255),f,b
  9983  002BCC  90D8               	bcf	status,0,c
  9984  002BCE  37CC               	rlcf	(??_read_dict+2)& (0+255),f,b
  9985  002BD0  37CD               	rlcf	(??_read_dict+3)& (0+255),f,b
  9986  002BD2  90D8               	bcf	status,0,c
  9987  002BD4  37CC               	rlcf	(??_read_dict+2)& (0+255),f,b
  9988  002BD6  37CD               	rlcf	(??_read_dict+3)& (0+255),f,b
  9989  002BD8  51D9               	movf	read_dict@pos& (0+255),w,b
  9990  002BDA  0D07               	mullw	7
  9991  002BDC  0E05               	movlw	5
  9992  002BDE  26F3               	addwf	243,f,c
  9993  002BE0  0E00               	movlw	0
  9994  002BE2  22F4               	addwfc	244,f,c
  9995  002BE4  0EAC               	movlw	low _dict
  9996  002BE6  24F3               	addwf	243,w,c
  9997  002BE8  6EF6               	movwf	tblptrl,c
  9998  002BEA  0E7E               	movlw	high _dict
  9999  002BEC  20F4               	addwfc	244,w,c
 10000  002BEE  6EF7               	movwf	tblptrh,c
 10001  002BF0                     	if	0	;There are less than 3 active tblptr bytes
 10002  002BF0                     	endif
 10003  002BF0  0009               	tblrd		*+
 10004  002BF2  CFF5 F0CE          	movff	tablat,??_read_dict+4
 10005  002BF6  0009               	tblrd		*+
 10006  002BF8  CFF5 F0CF          	movff	tablat,??_read_dict+5
 10007  002BFC  51CC               	movf	(??_read_dict+2)& (0+255),w,b
 10008  002BFE  27CE               	addwf	(??_read_dict+4)& (0+255),f,b
 10009  002C00  51CD               	movf	(??_read_dict+3)& (0+255),w,b
 10010  002C02  23CF               	addwfc	(??_read_dict+5)& (0+255),f,b
 10011  002C04  51CA               	movf	??_read_dict& (0+255),w,b
 10012  002C06  27CE               	addwf	(??_read_dict+4)& (0+255),f,b
 10013  002C08  51CB               	movf	(??_read_dict+1)& (0+255),w,b
 10014  002C0A  23CF               	addwfc	(??_read_dict+5)& (0+255),f,b
 10015  002C0C  C0CE  FFF6         	movff	??_read_dict+4,tblptrl
 10016  002C10  C0CF  FFF7         	movff	??_read_dict+5,tblptrh
 10017  002C14  6AF8               	clrf	tblptru,c
 10018  002C16  0E0E               	movlw	(high __ramtop+-1)
 10019  002C18  64F7               	cpfsgt	tblptrh,c
 10020  002C1A  D003               	bra	u11907
 10021  002C1C  0008               	tblrd		*
 10022  002C1E  50F5               	movf	tablat,w,c
 10023  002C20  D005               	bra	u11900
 10024  002C22                     u11907:
 10025  002C22  CFF6 FFE1          	movff	tblptrl,fsr1l
 10026  002C26  CFF7 FFE2          	movff	tblptrh,fsr1h
 10027  002C2A  50E7               	movf	indf1,w,c
 10028  002C2C                     u11900:
 10029  002C2C  0100               	movlb	0	; () banked
 10030  002C2E  6FD0               	movwf	(??_read_dict+6)& (0+255),b
 10031  002C30  51D0               	movf	(??_read_dict+6)& (0+255),w,b
 10032  002C32  6FC6               	movwf	?_read_dict& (0+255),b
 10033  002C34  6BC7               	clrf	(?_read_dict+1)& (0+255),b
 10034  002C36  6BC8               	clrf	(?_read_dict+2)& (0+255),b
 10035  002C38  6BC9               	clrf	(?_read_dict+3)& (0+255),b
 10036  002C3A  0012               	return	
 10037  002C3C                     l9523:
 10038                           
 10039                           ; BSR set to: 0
 10040                           ;dict.c: 65: return ((((DWORD)subindex) << 16) + (50 * 500));
 10041  002C3C  C0C6  F0CA         	movff	read_dict@subindex,??_read_dict
 10042  002C40  6BCB               	clrf	(??_read_dict+1)& (0+255),b
 10043  002C42  6BCC               	clrf	(??_read_dict+2)& (0+255),b
 10044  002C44  6BCD               	clrf	(??_read_dict+3)& (0+255),b
 10045  002C46  C0CB  F0CD         	movff	??_read_dict+1,??_read_dict+3
 10046  002C4A  C0CA  F0CC         	movff	??_read_dict,??_read_dict+2
 10047  002C4E  6BCB               	clrf	(??_read_dict+1)& (0+255),b
 10048  002C50  6BCA               	clrf	??_read_dict& (0+255),b
 10049  002C52  0EA8               	movlw	168
 10050  002C54  25CA               	addwf	??_read_dict& (0+255),w,b
 10051  002C56  6FC6               	movwf	?_read_dict& (0+255),b
 10052  002C58  0E61               	movlw	97
 10053  002C5A  21CB               	addwfc	(??_read_dict+1)& (0+255),w,b
 10054  002C5C  6FC7               	movwf	(?_read_dict+1)& (0+255),b
 10055  002C5E  0E00               	movlw	0
 10056  002C60  21CC               	addwfc	(??_read_dict+2)& (0+255),w,b
 10057  002C62  6FC8               	movwf	(?_read_dict+2)& (0+255),b
 10058  002C64  0E00               	movlw	0
 10059  002C66  21CD               	addwfc	(??_read_dict+3)& (0+255),w,b
 10060  002C68  6FC9               	movwf	(?_read_dict+3)& (0+255),b
 10061  002C6A  0012               	return	
 10062  002C6C                     l9527:
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;dict.c: 67: *(DWORD *)value = 0;
 10066  002C6C  0E00               	movlw	0
 10067  002C6E  6FD2               	movwf	read_dict@value& (0+255),b
 10068  002C70  0E00               	movlw	0
 10069  002C72  6FD3               	movwf	(read_dict@value+1)& (0+255),b
 10070  002C74  0E00               	movlw	0
 10071  002C76  6FD4               	movwf	(read_dict@value+2)& (0+255),b
 10072  002C78  0E00               	movlw	0
 10073  002C7A  6FD5               	movwf	(read_dict@value+3)& (0+255),b
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;dict.c: 68: if (dict[pos].pointer)
 10077  002C7C  51D9               	movf	read_dict@pos& (0+255),w,b
 10078  002C7E  0D07               	mullw	7
 10079  002C80  0E05               	movlw	5
 10080  002C82  26F3               	addwf	243,f,c
 10081  002C84  0E00               	movlw	0
 10082  002C86  22F4               	addwfc	244,f,c
 10083  002C88  0EAC               	movlw	low _dict
 10084  002C8A  24F3               	addwf	243,w,c
 10085  002C8C  6EF6               	movwf	tblptrl,c
 10086  002C8E  0E7E               	movlw	high _dict
 10087  002C90  20F4               	addwfc	244,w,c
 10088  002C92  6EF7               	movwf	tblptrh,c
 10089  002C94                     	if	0	;There are less than 3 active tblptr bytes
 10090  002C94                     	endif
 10091  002C94  0009               	tblrd		*+
 10092  002C96  50F5               	movf	tablat,w,c
 10093  002C98  0009               	tblrd		*+
 10094  002C9A  10F5               	iorwf	tablat,w,c
 10095  002C9C  B4D8               	btfsc	status,2,c
 10096  002C9E  D041               	goto	l9541
 10097                           
 10098                           ; BSR set to: 0
 10099                           ;dict.c: 69: {;dict.c: 70: for (i = 0; i < size; i++)
 10100  002CA0  0E00               	movlw	0
 10101  002CA2  6FD8               	movwf	read_dict@i& (0+255),b
 10102  002CA4  D031               	goto	l9537
 10103  002CA6                     l9533:
 10104                           
 10105                           ; BSR set to: 0
 10106                           ;dict.c: 71: value[i] = *((BYTE *)dict[pos].pointer + address + i);
 10107  002CA6  51D9               	movf	read_dict@pos& (0+255),w,b
 10108  002CA8  0D07               	mullw	7
 10109  002CAA  0E05               	movlw	5
 10110  002CAC  26F3               	addwf	243,f,c
 10111  002CAE  0E00               	movlw	0
 10112  002CB0  22F4               	addwfc	244,f,c
 10113  002CB2  0EAC               	movlw	low _dict
 10114  002CB4  24F3               	addwf	243,w,c
 10115  002CB6  6EF6               	movwf	tblptrl,c
 10116  002CB8  0E7E               	movlw	high _dict
 10117  002CBA  20F4               	addwfc	244,w,c
 10118  002CBC  6EF7               	movwf	tblptrh,c
 10119  002CBE                     	if	0	;There are less than 3 active tblptr bytes
 10120  002CBE                     	endif
 10121  002CBE  0009               	tblrd		*+
 10122  002CC0  CFF5 F0CA          	movff	tablat,??_read_dict
 10123  002CC4  0009               	tblrd		*+
 10124  002CC6  CFF5 F0CB          	movff	tablat,??_read_dict+1
 10125  002CCA  51D6               	movf	read_dict@address& (0+255),w,b
 10126  002CCC  27CA               	addwf	??_read_dict& (0+255),f,b
 10127  002CCE  0E00               	movlw	0
 10128  002CD0  23CB               	addwfc	(??_read_dict+1)& (0+255),f,b
 10129  002CD2  51D8               	movf	read_dict@i& (0+255),w,b
 10130  002CD4  27CA               	addwf	??_read_dict& (0+255),f,b
 10131  002CD6  0E00               	movlw	0
 10132  002CD8  23CB               	addwfc	(??_read_dict+1)& (0+255),f,b
 10133  002CDA  C0CA  FFF6         	movff	??_read_dict,tblptrl
 10134  002CDE  C0CB  FFF7         	movff	??_read_dict+1,tblptrh
 10135  002CE2  6AF8               	clrf	tblptru,c
 10136  002CE4  51D8               	movf	read_dict@i& (0+255),w,b
 10137  002CE6  0FD2               	addlw	low read_dict@value
 10138  002CE8  6ED9               	movwf	fsr2l,c
 10139  002CEA  6ADA               	clrf	fsr2h,c
 10140  002CEC  0E0E               	movlw	(high __ramtop+-1)
 10141  002CEE  64F7               	cpfsgt	tblptrh,c
 10142  002CF0  D003               	bra	u11927
 10143  002CF2  0008               	tblrd		*
 10144  002CF4  50F5               	movf	tablat,w,c
 10145  002CF6  D005               	bra	u11920
 10146  002CF8                     u11927:
 10147  002CF8  CFF6 FFE1          	movff	tblptrl,fsr1l
 10148  002CFC  CFF7 FFE2          	movff	tblptrh,fsr1h
 10149  002D00  50E7               	movf	indf1,w,c
 10150  002D02                     u11920:
 10151  002D02  6EDF               	movwf	indf2,c
 10152  002D04  0100               	movlb	0	; () banked
 10153  002D06  2BD8               	incf	read_dict@i& (0+255),f,b
 10154  002D08                     l9537:
 10155                           
 10156                           ; BSR set to: 0
 10157  002D08  51D7               	movf	read_dict@size& (0+255),w,b
 10158  002D0A  5DD8               	subwf	read_dict@i& (0+255),w,b
 10159  002D0C  A0D8               	btfss	status,0,c
 10160  002D0E  D7CB               	goto	l9533
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;dict.c: 72: return (*(DWORD *)value);
 10164  002D10  C0D2  F0C6         	movff	read_dict@value,?_read_dict
 10165  002D14  C0D3  F0C7         	movff	read_dict@value+1,?_read_dict+1
 10166  002D18  C0D4  F0C8         	movff	read_dict@value+2,?_read_dict+2
 10167  002D1C  C0D5  F0C9         	movff	read_dict@value+3,?_read_dict+3
 10168  002D20  0012               	return	
 10169  002D22                     l9541:
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;dict.c: 74: else return (0);
 10173  002D22  0E00               	movlw	0
 10174  002D24  6FC6               	movwf	?_read_dict& (0+255),b
 10175  002D26  0E00               	movlw	0
 10176  002D28  6FC7               	movwf	(?_read_dict+1)& (0+255),b
 10177  002D2A  0E00               	movlw	0
 10178  002D2C  6FC8               	movwf	(?_read_dict+2)& (0+255),b
 10179  002D2E  0E00               	movlw	0
 10180  002D30  6FC9               	movwf	(?_read_dict+3)& (0+255),b
 10181  002D32  0012               	return	
 10182  002D34                     l9545:
 10183                           
 10184                           ; BSR set to: 0
 10185  002D34  51D9               	movf	read_dict@pos& (0+255),w,b
 10186  002D36  0D07               	mullw	7
 10187  002D38  0EAC               	movlw	low _dict
 10188  002D3A  24F3               	addwf	243,w,c
 10189  002D3C  6EF6               	movwf	tblptrl,c
 10190  002D3E  0E7E               	movlw	high _dict
 10191  002D40  20F4               	addwfc	244,w,c
 10192  002D42  6EF7               	movwf	tblptrh,c
 10193  002D44                     	if	0	;There are less than 3 active tblptr bytes
 10194  002D44                     	endif
 10195  002D44  0009               	tblrd		*+
 10196  002D46  CFF5 F0CA          	movff	tablat,??_read_dict
 10197  002D4A  0009               	tblrd		*+
 10198  002D4C  CFF5 F0CB          	movff	tablat,??_read_dict+1
 10199                           
 10200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 10201                           ; Switch size 1, requested type "simple"
 10202                           ; Number of cases is 3, Range of values is 16 to 98
 10203                           ; switch strategies available:
 10204                           ; Name         Instructions Cycles
 10205                           ; simple_byte           10     6 (average)
 10206                           ;	Chosen strategy is simple_byte
 10207  002D50  51CB               	movf	(??_read_dict+1)& (0+255),w,b
 10208  002D52  0A10               	xorlw	16	; case 16
 10209  002D54  B4D8               	btfsc	status,2,c
 10210  002D56  D007               	goto	l11611
 10211  002D58  0A71               	xorlw	113	; case 97
 10212  002D5A  B4D8               	btfsc	status,2,c
 10213  002D5C  D009               	goto	l11613
 10214  002D5E  0A03               	xorlw	3	; case 98
 10215  002D60  B4D8               	btfsc	status,2,c
 10216  002D62  D00E               	goto	l11615
 10217  002D64  D783               	goto	l9527
 10218  002D66                     l11611:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ; Switch size 1, requested type "simple"
 10222                           ; Number of cases is 1, Range of values is 22 to 22
 10223                           ; switch strategies available:
 10224                           ; Name         Instructions Cycles
 10225                           ; simple_byte            4     3 (average)
 10226                           ;	Chosen strategy is simple_byte
 10227  002D66  51CA               	movf	??_read_dict& (0+255),w,b
 10228  002D68  0A16               	xorlw	22	; case 22
 10229  002D6A  B4D8               	btfsc	status,2,c
 10230  002D6C  D767               	goto	l9523
 10231  002D6E  D77E               	goto	l9527
 10232  002D70                     l11613:
 10233                           
 10234                           ; BSR set to: 0
 10235                           ; Switch size 1, requested type "simple"
 10236                           ; Number of cases is 2, Range of values is 96 to 128
 10237                           ; switch strategies available:
 10238                           ; Name         Instructions Cycles
 10239                           ; simple_byte            7     4 (average)
 10240                           ;	Chosen strategy is simple_byte
 10241  002D70  51CA               	movf	??_read_dict& (0+255),w,b
 10242  002D72  0A60               	xorlw	96	; case 96
 10243  002D74  B4D8               	btfsc	status,2,c
 10244  002D76  D6A1               	goto	l9511
 10245  002D78  0AE0               	xorlw	224	; case 128
 10246  002D7A  B4D8               	btfsc	status,2,c
 10247  002D7C  D6E5               	goto	l9515
 10248  002D7E  D776               	goto	l9527
 10249  002D80                     l11615:
 10250                           
 10251                           ; BSR set to: 0
 10252                           ; Switch size 1, requested type "simple"
 10253                           ; Number of cases is 2, Range of values is 96 to 128
 10254                           ; switch strategies available:
 10255                           ; Name         Instructions Cycles
 10256                           ; simple_byte            7     4 (average)
 10257                           ;	Chosen strategy is simple_byte
 10258  002D80  51CA               	movf	??_read_dict& (0+255),w,b
 10259  002D82  0A60               	xorlw	96	; case 96
 10260  002D84  B4D8               	btfsc	status,2,c
 10261  002D86  D699               	goto	l9511
 10262  002D88  0AE0               	xorlw	224	; case 128
 10263  002D8A  B4D8               	btfsc	status,2,c
 10264  002D8C  D715               	goto	l9519
 10265  002D8E  D76E               	goto	l9527
 10266  002D90                     __end_of_read_dict:
 10267                           	callstack 0
 10268                           
 10269 ;; *************** function _abort_sdo *****************
 10270 ;; Defined at:
 10271 ;;		line 309 in file "../../src/can.c"
 10272 ;; Parameters:    Size  Location     Type
 10273 ;;  errorcode       4   16[BANK0 ] unsigned long 
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;		None
 10276 ;; Return value:  Size  Location     Type
 10277 ;;                  1    wreg      void 
 10278 ;; Registers used:
 10279 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10280 ;; Tracked objects:
 10281 ;;		On entry : 3E/0
 10282 ;;		On exit  : 30/0
 10283 ;;		Unchanged: 0/0
 10284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10285 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10288 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10289 ;;Total ram usage:        4 bytes
 10290 ;; Hardware stack levels used:    1
 10291 ;; Hardware stack levels required when called:    4
 10292 ;; This function calls:
 10293 ;;		_can_transmit
 10294 ;; This function is called by:
 10295 ;;		_main
 10296 ;;		_read_rx
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           	psect	text12
 10301  003B66                     __ptext12:
 10302                           	callstack 0
 10303  003B66                     _abort_sdo:
 10304                           	callstack 25
 10305                           
 10306                           ;can.c: 310: while (tc == 30);
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;incstack = 0
 10310  003B66  0E1E               	movlw	30
 10311  003B68  180D               	xorwf	_tc^0,w,c	;volatile
 10312  003B6A  B4D8               	btfsc	status,2,c
 10313  003B6C  D7FC               	goto	_abort_sdo
 10314                           
 10315                           ;can.c: 311: tx[ti][0] = 0xB0 + 8;
 10316  003B6E  500A               	movf	_ti^0,w,c	;volatile
 10317  003B70  0D0A               	mullw	10
 10318  003B72  0E8B               	movlw	low _tx
 10319  003B74  24F3               	addwf	243,w,c
 10320  003B76  6ED9               	movwf	fsr2l,c
 10321  003B78  0E01               	movlw	high _tx
 10322  003B7A  20F4               	addwfc	prodh,w,c
 10323  003B7C  6EDA               	movwf	fsr2h,c
 10324  003B7E  0EB8               	movlw	184
 10325  003B80  6EDF               	movwf	indf2,c
 10326                           
 10327                           ;can.c: 312: tx[ti][1] = node_id;
 10328  003B82  500A               	movf	_ti^0,w,c	;volatile
 10329  003B84  0D0A               	mullw	10
 10330  003B86  0E8C               	movlw	low (_tx+1)
 10331  003B88  24F3               	addwf	243,w,c
 10332  003B8A  6ED9               	movwf	fsr2l,c
 10333  003B8C  0E01               	movlw	high (_tx+1)
 10334  003B8E  20F4               	addwfc	prodh,w,c
 10335  003B90  6EDA               	movwf	fsr2h,c
 10336  003B92  C09D  FFDF         	movff	_node_id,indf2
 10337                           
 10338                           ;can.c: 313: tx[ti][2] = 0x80;
 10339  003B96  500A               	movf	_ti^0,w,c	;volatile
 10340  003B98  0D0A               	mullw	10
 10341  003B9A  0E8D               	movlw	low (_tx+2)
 10342  003B9C  24F3               	addwf	243,w,c
 10343  003B9E  6ED9               	movwf	fsr2l,c
 10344  003BA0  0E01               	movlw	high (_tx+2)
 10345  003BA2  20F4               	addwfc	prodh,w,c
 10346  003BA4  6EDA               	movwf	fsr2h,c
 10347  003BA6  0E80               	movlw	128
 10348  003BA8  6EDF               	movwf	indf2,c
 10349                           
 10350                           ;can.c: 314: tx[ti][3] = sdo_index;
 10351  003BAA  500A               	movf	_ti^0,w,c	;volatile
 10352  003BAC  0D0A               	mullw	10
 10353  003BAE  0E8E               	movlw	low (_tx+3)
 10354  003BB0  24F3               	addwf	243,w,c
 10355  003BB2  6ED9               	movwf	fsr2l,c
 10356  003BB4  0E01               	movlw	high (_tx+3)
 10357  003BB6  20F4               	addwfc	prodh,w,c
 10358  003BB8  6EDA               	movwf	fsr2h,c
 10359  003BBA  C07C  FFDF         	movff	_sdo_index,indf2	;volatile
 10360                           
 10361                           ;can.c: 315: tx[ti][4] = sdo_index >> 8;
 10362  003BBE  500A               	movf	_ti^0,w,c	;volatile
 10363  003BC0  0D0A               	mullw	10
 10364  003BC2  0E8F               	movlw	low (_tx+4)
 10365  003BC4  24F3               	addwf	243,w,c
 10366  003BC6  6ED9               	movwf	fsr2l,c
 10367  003BC8  0E01               	movlw	high (_tx+4)
 10368  003BCA  20F4               	addwfc	prodh,w,c
 10369  003BCC  6EDA               	movwf	fsr2h,c
 10370  003BCE  C07D  FFDF         	movff	_sdo_index+1,indf2	;volatile
 10371                           
 10372                           ;can.c: 316: tx[ti][5] = sdo_subindex;
 10373  003BD2  500A               	movf	_ti^0,w,c	;volatile
 10374  003BD4  0D0A               	mullw	10
 10375  003BD6  0E90               	movlw	low (_tx+5)
 10376  003BD8  24F3               	addwf	243,w,c
 10377  003BDA  6ED9               	movwf	fsr2l,c
 10378  003BDC  0E01               	movlw	high (_tx+5)
 10379  003BDE  20F4               	addwfc	prodh,w,c
 10380  003BE0  6EDA               	movwf	fsr2h,c
 10381  003BE2  C08F  FFDF         	movff	_sdo_subindex,indf2	;volatile
 10382                           
 10383                           ;can.c: 317: tx[ti][6] = errorcode;
 10384  003BE6  500A               	movf	_ti^0,w,c	;volatile
 10385  003BE8  0D0A               	mullw	10
 10386  003BEA  0E91               	movlw	low (_tx+6)
 10387  003BEC  24F3               	addwf	243,w,c
 10388  003BEE  6ED9               	movwf	fsr2l,c
 10389  003BF0  0E01               	movlw	high (_tx+6)
 10390  003BF2  20F4               	addwfc	prodh,w,c
 10391  003BF4  6EDA               	movwf	fsr2h,c
 10392  003BF6  C0CC  FFDF         	movff	abort_sdo@errorcode,indf2
 10393                           
 10394                           ;can.c: 318: tx[ti][7] = errorcode >> 8;
 10395  003BFA  500A               	movf	_ti^0,w,c	;volatile
 10396  003BFC  0D0A               	mullw	10
 10397  003BFE  0E92               	movlw	low (_tx+7)
 10398  003C00  24F3               	addwf	243,w,c
 10399  003C02  6ED9               	movwf	fsr2l,c
 10400  003C04  0E01               	movlw	high (_tx+7)
 10401  003C06  20F4               	addwfc	prodh,w,c
 10402  003C08  6EDA               	movwf	fsr2h,c
 10403  003C0A  C0CD  FFDF         	movff	abort_sdo@errorcode+1,indf2
 10404                           
 10405                           ;can.c: 319: tx[ti][8] = errorcode >> 16;
 10406  003C0E  500A               	movf	_ti^0,w,c	;volatile
 10407  003C10  0D0A               	mullw	10
 10408  003C12  0E93               	movlw	low (_tx+8)
 10409  003C14  24F3               	addwf	243,w,c
 10410  003C16  6ED9               	movwf	fsr2l,c
 10411  003C18  0E01               	movlw	high (_tx+8)
 10412  003C1A  20F4               	addwfc	prodh,w,c
 10413  003C1C  6EDA               	movwf	fsr2h,c
 10414  003C1E  C0CE  FFDF         	movff	abort_sdo@errorcode+2,indf2
 10415                           
 10416                           ;can.c: 320: tx[ti][9] = errorcode >> 24;
 10417  003C22  500A               	movf	_ti^0,w,c	;volatile
 10418  003C24  0D0A               	mullw	10
 10419  003C26  0E94               	movlw	low (_tx+9)
 10420  003C28  24F3               	addwf	243,w,c
 10421  003C2A  6ED9               	movwf	fsr2l,c
 10422  003C2C  0E01               	movlw	high (_tx+9)
 10423  003C2E  20F4               	addwfc	prodh,w,c
 10424  003C30  6EDA               	movwf	fsr2h,c
 10425  003C32  C0CF  FFDF         	movff	abort_sdo@errorcode+3,indf2
 10426                           
 10427                           ;can.c: 321: can_transmit ();
 10428  003C36  ECBC  F01C         	call	_can_transmit	;wreg free
 10429  003C3A  0012               	return		;funcret
 10430  003C3C                     __end_of_abort_sdo:
 10431                           	callstack 0
 10432                           
 10433 ;; *************** function _init_userpara *****************
 10434 ;; Defined at:
 10435 ;;		line 232 in file "../../src/Main.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;		None
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;  i               1   10[BANK0 ] unsigned char 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  1    wreg      void 
 10442 ;; Registers used:
 10443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10444 ;; Tracked objects:
 10445 ;;		On entry : 3F/0
 10446 ;;		On exit  : 3F/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10453 ;;Total ram usage:        1 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    3
 10456 ;; This function calls:
 10457 ;;		Nothing
 10458 ;; This function is called by:
 10459 ;;		_main
 10460 ;; This function uses a non-reentrant model
 10461 ;;
 10462                           
 10463                           	psect	text13
 10464  00371A                     __ptext13:
 10465                           	callstack 0
 10466  00371A                     _init_userpara:
 10467                           	callstack 27
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;Main.c: 233: BYTE i;;Main.c: 235: display[0] = 85;
 10471                           
 10472                           ;incstack = 0
 10473  00371A  0E55               	movlw	85
 10474  00371C  6F68               	movwf	_display& (0+255),b	;volatile
 10475                           
 10476                           ;Main.c: 236: display[1] = 37;
 10477  00371E  0E25               	movlw	37
 10478  003720  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 10479                           
 10480                           ;Main.c: 237: display[2] = 37;
 10481  003722  0E25               	movlw	37
 10482  003724  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 10483                           
 10484                           ;Main.c: 238: display[3] = 0;
 10485  003726  0E00               	movlw	0
 10486  003728  6F6B               	movwf	(_display+3)& (0+255),b	;volatile
 10487                           
 10488                           ;Main.c: 240: heartbeat = 4;
 10489  00372A  0E04               	movlw	4
 10490  00372C  6F8C               	movwf	_heartbeat& (0+255),b
 10491                           
 10492                           ;Main.c: 241: display_timer = 0;
 10493  00372E  0E00               	movlw	0
 10494  003730  6F97               	movwf	_display_timer& (0+255),b
 10495                           
 10496                           ;Main.c: 242: keytimer = 0;
 10497  003732  0E00               	movlw	0
 10498  003734  6E1D               	movwf	_keytimer^0,c
 10499                           
 10500                           ;Main.c: 243: hsetime = 50;
 10501  003736  0E32               	movlw	50
 10502  003738  6E17               	movwf	_hsetime^0,c	;volatile
 10503                           
 10504                           ;Main.c: 244: nmtwait = 0;
 10505  00373A  0E00               	movlw	0
 10506  00373C  6F7F               	movwf	(_nmtwait+1)& (0+255),b	;volatile
 10507  00373E  0E00               	movlw	0
 10508  003740  6F7E               	movwf	_nmtwait& (0+255),b	;volatile
 10509                           
 10510                           ;Main.c: 245: hsecheck = 0;
 10511  003742  0E00               	movlw	0
 10512  003744  6F88               	movwf	_hsecheck& (0+255),b	;volatile
 10513                           
 10514                           ;Main.c: 246: setid_mode = 0;
 10515  003746  0E00               	movlw	0
 10516  003748  6F9B               	movwf	_setid_mode& (0+255),b
 10517                           
 10518                           ;Main.c: 247: setid_mode_old = 0;
 10519  00374A  0E00               	movlw	0
 10520  00374C  6F9C               	movwf	_setid_mode_old& (0+255),b
 10521                           
 10522                           ;Main.c: 249: arrowtype = 0;
 10523  00374E  0E00               	movlw	0
 10524  003750  6FB8               	movwf	_arrowtype& (0+255),b
 10525                           
 10526                           ;Main.c: 250: if(hardware_version == 0)
 10527  003752  519A               	movf	_hardware_version& (0+255),w,b
 10528  003754  A4D8               	btfss	status,2,c
 10529  003756  D002               	goto	l10013
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;Main.c: 251: arrowflash = 0x01;
 10533  003758  0E01               	movlw	1
 10534  00375A  D001               	goto	L19
 10535  00375C                     l10013:
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;Main.c: 252: else;Main.c: 253: arrowflash = 0x00;
 10539  00375C  0E00               	movlw	0
 10540  00375E                     L19:
 10541  00375E  6F95               	movwf	_arrowflash& (0+255),b
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;Main.c: 254: flashcontent = 85;
 10545  003760  0E55               	movlw	85
 10546  003762  6E24               	movwf	_flashcontent^0,c
 10547                           
 10548                           ;Main.c: 256: disp_lift = 1;
 10549  003764  0E01               	movlw	1
 10550  003766  6E2A               	movwf	_disp_lift^0,c
 10551                           
 10552                           ;Main.c: 257: device_type = 0x000001A1;
 10553  003768  0EA1               	movlw	161
 10554  00376A  6FB3               	movwf	_device_type& (0+255),b
 10555  00376C  0E01               	movlw	1
 10556  00376E  6FB4               	movwf	(_device_type+1)& (0+255),b
 10557  003770  0E00               	movlw	0
 10558  003772  6FB5               	movwf	(_device_type+2)& (0+255),b
 10559  003774  0E00               	movlw	0
 10560  003776  6FB6               	movwf	(_device_type+3)& (0+255),b
 10561                           
 10562                           ;Main.c: 258: virtual_device[0] = 0x020001A1 >> 16;
 10563  003778  0E02               	movlw	2
 10564  00377A  6FAE               	movwf	(_virtual_device+1)& (0+255),b
 10565  00377C  0E00               	movlw	0
 10566  00377E  6FAD               	movwf	_virtual_device& (0+255),b
 10567                           
 10568                           ;Main.c: 259: virtual_device[1] = 0x030001A1 >> 16;
 10569  003780  0E03               	movlw	3
 10570  003782  6FB0               	movwf	(_virtual_device+3)& (0+255),b
 10571  003784  0E00               	movlw	0
 10572  003786  6FAF               	movwf	(_virtual_device+2)& (0+255),b
 10573                           
 10574                           ;Main.c: 261: inpush = 0;
 10575  003788  0E00               	movlw	0
 10576  00378A  6E1C               	movwf	_inpush^0,c	;volatile
 10577                           
 10578                           ;Main.c: 262: outpush = 0;
 10579  00378C  0E00               	movlw	0
 10580  00378E  6E1B               	movwf	_outpush^0,c	;volatile
 10581                           
 10582                           ;Main.c: 263: backlight_mode = 0;
 10583  003790  0E00               	movlw	0
 10584  003792  6E26               	movwf	_backlight_mode^0,c
 10585                           
 10586                           ;Main.c: 265: for (i = 0; i < 8; i++)
 10587  003794  0E00               	movlw	0
 10588  003796  6FC6               	movwf	init_userpara@i& (0+255),b
 10589  003798                     l10019:
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;Main.c: 266: {;Main.c: 267: inpar[i][5] = 0;
 10593  003798  51C6               	movf	init_userpara@i& (0+255),w,b
 10594  00379A  0D07               	mullw	7
 10595  00379C  0E45               	movlw	low (_inpar+5)
 10596  00379E  24F3               	addwf	243,w,c
 10597  0037A0  6ED9               	movwf	fsr2l,c
 10598  0037A2  0E01               	movlw	high (_inpar+5)
 10599  0037A4  20F4               	addwfc	prodh,w,c
 10600  0037A6  6EDA               	movwf	fsr2h,c
 10601  0037A8  0E00               	movlw	0
 10602  0037AA  6EDF               	movwf	indf2,c
 10603                           
 10604                           ;Main.c: 268: outpar[i][5] = 0;
 10605  0037AC  51C6               	movf	init_userpara@i& (0+255),w,b
 10606  0037AE  0D08               	mullw	8
 10607  0037B0  0E05               	movlw	low (_outpar+5)
 10608  0037B2  24F3               	addwf	243,w,c
 10609  0037B4  6ED9               	movwf	fsr2l,c
 10610  0037B6  0E01               	movlw	high (_outpar+5)
 10611  0037B8  20F4               	addwfc	prodh,w,c
 10612  0037BA  6EDA               	movwf	fsr2h,c
 10613  0037BC  0E00               	movlw	0
 10614  0037BE  6EDF               	movwf	indf2,c
 10615                           
 10616                           ;Main.c: 269: inpar[i][0] = 0;
 10617  0037C0  51C6               	movf	init_userpara@i& (0+255),w,b
 10618  0037C2  0D07               	mullw	7
 10619  0037C4  0E40               	movlw	low _inpar
 10620  0037C6  24F3               	addwf	243,w,c
 10621  0037C8  6ED9               	movwf	fsr2l,c
 10622  0037CA  0E01               	movlw	high _inpar
 10623  0037CC  20F4               	addwfc	prodh,w,c
 10624  0037CE  6EDA               	movwf	fsr2h,c
 10625  0037D0  0E00               	movlw	0
 10626  0037D2  6EDF               	movwf	indf2,c
 10627                           
 10628                           ;Main.c: 270: outpar[i][0] = 0;
 10629  0037D4  51C6               	movf	init_userpara@i& (0+255),w,b
 10630  0037D6  0D08               	mullw	8
 10631  0037D8  0E00               	movlw	low _outpar
 10632  0037DA  24F3               	addwf	243,w,c
 10633  0037DC  6ED9               	movwf	fsr2l,c
 10634  0037DE  0E01               	movlw	high _outpar
 10635  0037E0  20F4               	addwfc	prodh,w,c
 10636  0037E2  6EDA               	movwf	fsr2h,c
 10637  0037E4  0E00               	movlw	0
 10638  0037E6  6EDF               	movwf	indf2,c
 10639                           
 10640                           ;Main.c: 271: outpar[i][7] = 0;
 10641  0037E8  51C6               	movf	init_userpara@i& (0+255),w,b
 10642  0037EA  0D08               	mullw	8
 10643  0037EC  0E07               	movlw	low (_outpar+7)
 10644  0037EE  24F3               	addwf	243,w,c
 10645  0037F0  6ED9               	movwf	fsr2l,c
 10646  0037F2  0E01               	movlw	high (_outpar+7)
 10647  0037F4  20F4               	addwfc	prodh,w,c
 10648  0037F6  6EDA               	movwf	fsr2h,c
 10649  0037F8  0E00               	movlw	0
 10650  0037FA  6EDF               	movwf	indf2,c
 10651                           
 10652                           ; BSR set to: 0
 10653  0037FC  2BC6               	incf	init_userpara@i& (0+255),f,b
 10654                           
 10655                           ; BSR set to: 0
 10656  0037FE  0E07               	movlw	7
 10657  003800  65C6               	cpfsgt	init_userpara@i& (0+255),b
 10658  003802  D7CA               	goto	l10019
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;Main.c: 272: };Main.c: 273: for (i = 0; i < 7; i++)
 10662  003804  0E00               	movlw	0
 10663  003806  6FC6               	movwf	init_userpara@i& (0+255),b
 10664  003808                     l10031:
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;Main.c: 274: {;Main.c: 275: virt_in[i] = 0;
 10668  003808  51C6               	movf	init_userpara@i& (0+255),w,b
 10669  00380A  0FA6               	addlw	low _virt_in
 10670  00380C  6ED9               	movwf	fsr2l,c
 10671  00380E  6ADA               	clrf	fsr2h,c
 10672  003810  0E00               	movlw	0
 10673  003812  6EDF               	movwf	indf2,c
 10674                           
 10675                           ;Main.c: 276: virt_out[i] = 0;
 10676  003814  51C6               	movf	init_userpara@i& (0+255),w,b
 10677  003816  0F9F               	addlw	low _virt_out
 10678  003818  6ED9               	movwf	fsr2l,c
 10679  00381A  6ADA               	clrf	fsr2h,c
 10680  00381C  0E00               	movlw	0
 10681  00381E  6EDF               	movwf	indf2,c
 10682                           
 10683                           ; BSR set to: 0
 10684  003820  2BC6               	incf	init_userpara@i& (0+255),f,b
 10685                           
 10686                           ; BSR set to: 0
 10687  003822  0E06               	movlw	6
 10688  003824  65C6               	cpfsgt	init_userpara@i& (0+255),b
 10689  003826  D7F0               	goto	l10031
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;Main.c: 277: };Main.c: 278: in_polarity = 0;
 10693  003828  0E00               	movlw	0
 10694  00382A  6FB9               	movwf	_in_polarity& (0+255),b
 10695                           
 10696                           ;Main.c: 279: out_polarity = 0;
 10697  00382C  0E00               	movlw	0
 10698  00382E  6E29               	movwf	_out_polarity^0,c
 10699                           
 10700                           ;Main.c: 281: out = 0;
 10701  003830  0E00               	movlw	0
 10702  003832  6E2B               	movwf	_out^0,c	;volatile
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;Main.c: 282: in = PORTC & 0x0F;
 10706  003834  5082               	movf	130,w,c	;volatile
 10707  003836  0B0F               	andlw	15
 10708  003838  6FBB               	movwf	_in& (0+255),b	;volatile
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;Main.c: 283: input[0] = in;
 10712  00383A  C0BB  F001         	movff	_in,_input	;volatile
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;Main.c: 284: input[1] = in;
 10716  00383E  C0BB  F002         	movff	_in,_input+1	;volatile
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;Main.c: 285: input[2] = in;
 10720  003842  C0BB  F003         	movff	_in,_input+2	;volatile
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;Main.c: 286: inold = 0;
 10724  003846  0E00               	movlw	0
 10725  003848  6F8D               	movwf	_inold& (0+255),b
 10726                           
 10727                           ; BSR set to: 0
 10728  00384A  0012               	return		;funcret
 10729  00384C                     __end_of_init_userpara:
 10730                           	callstack 0
 10731                           
 10732 ;; *************** function _init_timer2 *****************
 10733 ;; Defined at:
 10734 ;;		line 141 in file "../../src/Main.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;		None
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;		None
 10739 ;; Return value:  Size  Location     Type
 10740 ;;                  1    wreg      void 
 10741 ;; Registers used:
 10742 ;;		wreg, status,2
 10743 ;; Tracked objects:
 10744 ;;		On entry : 3F/0
 10745 ;;		On exit  : 3F/0
 10746 ;;		Unchanged: 3F/0
 10747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10752 ;;Total ram usage:        0 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:    3
 10755 ;; This function calls:
 10756 ;;		Nothing
 10757 ;; This function is called by:
 10758 ;;		_main
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           	psect	text14
 10763  004432                     __ptext14:
 10764                           	callstack 0
 10765  004432                     _init_timer2:
 10766                           	callstack 27
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;Main.c: 142: PIR1bits.TMR2IF = 0;
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;incstack = 0
 10773  004432  929E               	bcf	158,1,c	;volatile
 10774                           
 10775                           ;Main.c: 143: IPR1bits.TMR2IP = 0;
 10776  004434  929F               	bcf	159,1,c	;volatile
 10777                           
 10778                           ;Main.c: 144: PIE1bits.TMR2IE = 1;
 10779  004436  829D               	bsf	157,1,c	;volatile
 10780                           
 10781                           ;Main.c: 145: PR2 = 0xFF;
 10782  004438  68CB               	setf	203,c	;volatile
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;Main.c: 146: TMR2 = 0;
 10786  00443A  0E00               	movlw	0
 10787  00443C  6ECC               	movwf	204,c	;volatile
 10788                           
 10789                           ;Main.c: 147: T2CON = 0x16;
 10790  00443E  0E16               	movlw	22
 10791  004440  6ECA               	movwf	202,c	;volatile
 10792                           
 10793                           ; BSR set to: 0
 10794  004442  0012               	return		;funcret
 10795  004444                     __end_of_init_timer2:
 10796                           	callstack 0
 10797                           
 10798 ;; *************** function _init_timer1 *****************
 10799 ;; Defined at:
 10800 ;;		line 119 in file "../../src/Main.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;		None
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;		None
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  1    wreg      void 
 10807 ;; Registers used:
 10808 ;;		wreg, status,2, status,0
 10809 ;; Tracked objects:
 10810 ;;		On entry : 3F/0
 10811 ;;		On exit  : 3F/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10818 ;;Total ram usage:        0 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    3
 10821 ;; This function calls:
 10822 ;;		Nothing
 10823 ;; This function is called by:
 10824 ;;		_main
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           	psect	text15
 10829  004384                     __ptext15:
 10830                           	callstack 0
 10831  004384                     _init_timer1:
 10832                           	callstack 27
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;Main.c: 120: PIR1bits.TMR1IF = 0;
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;incstack = 0
 10839  004384  909E               	bcf	158,0,c	;volatile
 10840                           
 10841                           ;Main.c: 121: IPR1bits.TMR1IP = 0;
 10842  004386  909F               	bcf	159,0,c	;volatile
 10843                           
 10844                           ;Main.c: 122: PIE1bits.TMR1IE = 1;
 10845  004388  809D               	bsf	157,0,c	;volatile
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;Main.c: 123: if(hardware_version == 0)
 10849  00438A  519A               	movf	_hardware_version& (0+255),w,b
 10850  00438C  A4D8               	btfss	status,2,c
 10851  00438E  D005               	goto	l9915
 10852  004390                     u12550:
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;Main.c: 124: {;Main.c: 125: timer1_countH = 0xE0;
 10856  004390  0EE0               	movlw	224
 10857  004392  6E15               	movwf	_timer1_countH^0,c
 10858                           
 10859                           ;Main.c: 126: timer1_countL = 0xC0;
 10860  004394  0EC0               	movlw	192
 10861  004396  6E14               	movwf	_timer1_countL^0,c
 10862                           
 10863                           ;Main.c: 127: }
 10864  004398  D003               	goto	l9919
 10865  00439A                     l9915:
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;Main.c: 128: else if(hardware_version == 1)
 10869  00439A  059A               	decf	_hardware_version& (0+255),w,b
 10870  00439C  B4D8               	btfsc	status,2,c
 10871  00439E  D7F8               	goto	u12550
 10872  0043A0                     l9919:
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;Main.c: 132: };Main.c: 133: TMR1H = timer1_countH;
 10876  0043A0  C015  FFCF         	movff	_timer1_countH,4047	;volatile
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;Main.c: 134: TMR1L = timer1_countL;
 10880  0043A4  C014  FFCE         	movff	_timer1_countL,4046	;volatile
 10881                           
 10882                           ;Main.c: 135: T1CON = 0x03;
 10883  0043A8  0E03               	movlw	3
 10884  0043AA  6ECD               	movwf	205,c	;volatile
 10885                           
 10886                           ; BSR set to: 0
 10887  0043AC  0012               	return		;funcret
 10888  0043AE                     __end_of_init_timer1:
 10889                           	callstack 0
 10890                           
 10891 ;; *************** function _init_timer0 *****************
 10892 ;; Defined at:
 10893 ;;		line 107 in file "../../src/Main.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;		None
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;		None
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  1    wreg      void 
 10900 ;; Registers used:
 10901 ;;		wreg, status,2
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10911 ;;Total ram usage:        0 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    3
 10914 ;; This function calls:
 10915 ;;		Nothing
 10916 ;; This function is called by:
 10917 ;;		_main
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text16
 10922  00441E                     __ptext16:
 10923                           	callstack 0
 10924  00441E                     _init_timer0:
 10925                           	callstack 27
 10926                           
 10927                           ;Main.c: 108: INTCONbits.TMR0IE = 1;
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;incstack = 0
 10931  00441E  8AF2               	bsf	242,5,c	;volatile
 10932                           
 10933                           ;Main.c: 109: INTCONbits.TMR0IF = 0;
 10934  004420  94F2               	bcf	242,2,c	;volatile
 10935                           
 10936                           ;Main.c: 110: INTCON2bits.TMR0IP = 0;
 10937  004422  94F1               	bcf	241,2,c	;volatile
 10938                           
 10939                           ;Main.c: 111: TMR0H = 0x0C;
 10940  004424  0E0C               	movlw	12
 10941  004426  6ED7               	movwf	215,c	;volatile
 10942                           
 10943                           ;Main.c: 112: TMR0L = 0x00;
 10944  004428  0E00               	movlw	0
 10945  00442A  6ED6               	movwf	214,c	;volatile
 10946                           
 10947                           ;Main.c: 113: T0CON = 0x84;
 10948  00442C  0E84               	movlw	132
 10949  00442E  6ED5               	movwf	213,c	;volatile
 10950  004430  0012               	return		;funcret
 10951  004432                     __end_of_init_timer0:
 10952                           	callstack 0
 10953                           
 10954 ;; *************** function _init_can *****************
 10955 ;; Defined at:
 10956 ;;		line 8 in file "../../src/can.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;  baudrate        1    wreg     unsigned char 
 10959 ;; Auto vars:     Size  Location     Type
 10960 ;;  baudrate        1   12[BANK0 ] unsigned char 
 10961 ;;  j               1   14[BANK0 ] unsigned char 
 10962 ;;  i               1   13[BANK0 ] unsigned char 
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  1    wreg      void 
 10965 ;; Registers used:
 10966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10967 ;; Tracked objects:
 10968 ;;		On entry : 3F/0
 10969 ;;		On exit  : 3F/F
 10970 ;;		Unchanged: 0/0
 10971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10973 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10975 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10976 ;;Total ram usage:        5 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; Hardware stack levels required when called:    3
 10979 ;; This function calls:
 10980 ;;		Nothing
 10981 ;; This function is called by:
 10982 ;;		_main
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           	psect	text17
 10987  0031C4                     __ptext17:
 10988                           	callstack 0
 10989  0031C4                     _init_can:
 10990                           	callstack 27
 10991                           
 10992                           ;incstack = 0
 10993                           ;init_can@baudrate stored from wreg
 10994  0031C4  6FC8               	movwf	init_can@baudrate& (0+255),b
 10995                           
 10996                           ;can.c: 9: BYTE i, j;;can.c: 10: INTCONbits.GIEH = 0;
 10997  0031C6  9EF2               	bcf	242,7,c	;volatile
 10998                           
 10999                           ;can.c: 11: rc = 0;
 11000  0031C8  0E00               	movlw	0
 11001  0031CA  0100               	movlb	0	; () banked
 11002  0031CC  6F92               	movwf	_rc& (0+255),b	;volatile
 11003                           
 11004                           ;can.c: 12: ri = 0;
 11005  0031CE  0E00               	movlw	0
 11006  0031D0  6E0C               	movwf	_ri^0,c	;volatile
 11007                           
 11008                           ;can.c: 13: ro = 0;
 11009  0031D2  0E00               	movlw	0
 11010  0031D4  6F83               	movwf	_ro& (0+255),b	;volatile
 11011                           
 11012                           ;can.c: 14: tc = 0;
 11013  0031D6  0E00               	movlw	0
 11014  0031D8  6E0D               	movwf	_tc^0,c	;volatile
 11015                           
 11016                           ;can.c: 15: ti = 0;
 11017  0031DA  0E00               	movlw	0
 11018  0031DC  6E0A               	movwf	_ti^0,c	;volatile
 11019                           
 11020                           ;can.c: 16: to = 0;
 11021  0031DE  0E00               	movlw	0
 11022  0031E0  6E0B               	movwf	_to^0,c	;volatile
 11023                           
 11024                           ;can.c: 17: tr = 1;
 11025  0031E2  0E01               	movlw	1
 11026  0031E4  6E09               	movwf	_tr^0,c	;volatile
 11027                           
 11028                           ;can.c: 18: for (i = 0; i < 30; i++)
 11029  0031E6  0E00               	movlw	0
 11030  0031E8  6FC9               	movwf	init_can@i& (0+255),b
 11031  0031EA                     l10057:
 11032                           
 11033                           ; BSR set to: 0
 11034                           ;can.c: 19: {;can.c: 20: for (j = 0; j < 10; j++)
 11035  0031EA  0E00               	movlw	0
 11036  0031EC  6FCA               	movwf	init_can@j& (0+255),b
 11037  0031EE                     l10063:
 11038                           
 11039                           ; BSR set to: 0
 11040                           ;can.c: 21: rx[i][j] = 0;
 11041  0031EE  51C9               	movf	init_can@i& (0+255),w,b
 11042  0031F0  0D0A               	mullw	10
 11043  0031F2  0EB7               	movlw	low _rx
 11044  0031F4  6FC6               	movwf	??_init_can& (0+255),b
 11045  0031F6  0E02               	movlw	high _rx
 11046  0031F8  6FC7               	movwf	(??_init_can+1)& (0+255),b
 11047  0031FA  50F3               	movf	243,w,c
 11048  0031FC  27C6               	addwf	??_init_can& (0+255),f,b
 11049  0031FE  50F4               	movf	244,w,c
 11050  003200  23C7               	addwfc	(??_init_can+1)& (0+255),f,b
 11051  003202  51CA               	movf	init_can@j& (0+255),w,b
 11052  003204  25C6               	addwf	??_init_can& (0+255),w,b
 11053  003206  6ED9               	movwf	fsr2l,c
 11054  003208  0E00               	movlw	0
 11055  00320A  21C7               	addwfc	(??_init_can+1)& (0+255),w,b
 11056  00320C  6EDA               	movwf	fsr2h,c
 11057  00320E  0E00               	movlw	0
 11058  003210  6EDF               	movwf	indf2,c
 11059                           
 11060                           ; BSR set to: 0
 11061  003212  2BCA               	incf	init_can@j& (0+255),f,b
 11062                           
 11063                           ; BSR set to: 0
 11064  003214  0E09               	movlw	9
 11065  003216  65CA               	cpfsgt	init_can@j& (0+255),b
 11066  003218  D7EA               	goto	l10063
 11067                           
 11068                           ; BSR set to: 0
 11069  00321A  2BC9               	incf	init_can@i& (0+255),f,b
 11070                           
 11071                           ; BSR set to: 0
 11072  00321C  0E1D               	movlw	29
 11073  00321E  65C9               	cpfsgt	init_can@i& (0+255),b
 11074  003220  D7E4               	goto	l10057
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;can.c: 22: };can.c: 23: for (i = 0; i < 30; i++)
 11078  003222  0E00               	movlw	0
 11079  003224  6FC9               	movwf	init_can@i& (0+255),b
 11080  003226                     l10079:
 11081                           
 11082                           ; BSR set to: 0
 11083                           ;can.c: 24: {;can.c: 25: for (j = 0; j < 10; j++)
 11084  003226  0E00               	movlw	0
 11085  003228  6FCA               	movwf	init_can@j& (0+255),b
 11086  00322A                     l10085:
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;can.c: 26: tx[i][j] = 0;
 11090  00322A  51C9               	movf	init_can@i& (0+255),w,b
 11091  00322C  0D0A               	mullw	10
 11092  00322E  0E8B               	movlw	low _tx
 11093  003230  6FC6               	movwf	??_init_can& (0+255),b
 11094  003232  0E01               	movlw	high _tx
 11095  003234  6FC7               	movwf	(??_init_can+1)& (0+255),b
 11096  003236  50F3               	movf	243,w,c
 11097  003238  27C6               	addwf	??_init_can& (0+255),f,b
 11098  00323A  50F4               	movf	244,w,c
 11099  00323C  23C7               	addwfc	(??_init_can+1)& (0+255),f,b
 11100  00323E  51CA               	movf	init_can@j& (0+255),w,b
 11101  003240  25C6               	addwf	??_init_can& (0+255),w,b
 11102  003242  6ED9               	movwf	fsr2l,c
 11103  003244  0E00               	movlw	0
 11104  003246  21C7               	addwfc	(??_init_can+1)& (0+255),w,b
 11105  003248  6EDA               	movwf	fsr2h,c
 11106  00324A  0E00               	movlw	0
 11107  00324C  6EDF               	movwf	indf2,c
 11108                           
 11109                           ; BSR set to: 0
 11110  00324E  2BCA               	incf	init_can@j& (0+255),f,b
 11111                           
 11112                           ; BSR set to: 0
 11113  003250  0E09               	movlw	9
 11114  003252  65CA               	cpfsgt	init_can@j& (0+255),b
 11115  003254  D7EA               	goto	l10085
 11116                           
 11117                           ; BSR set to: 0
 11118  003256  2BC9               	incf	init_can@i& (0+255),f,b
 11119                           
 11120                           ; BSR set to: 0
 11121  003258  0E1D               	movlw	29
 11122  00325A  65C9               	cpfsgt	init_can@i& (0+255),b
 11123  00325C  D7E4               	goto	l10079
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;can.c: 27: };can.c: 28: TRISBbits.TRISB2 = 0;
 11127  00325E  9493               	bcf	147,2,c	;volatile
 11128                           
 11129                           ;can.c: 29: TRISBbits.TRISB3 = 1;
 11130  003260  8693               	bsf	147,3,c	;volatile
 11131                           
 11132                           ;can.c: 30: CIOCONbits.ENDRHI = 1;
 11133  003262  8A70               	bsf	112,5,c	;volatile
 11134                           
 11135                           ;can.c: 31: CIOCONbits.CANCAP = 0;
 11136  003264  9870               	bcf	112,4,c	;volatile
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;can.c: 32: CANCON = 0x80;
 11140  003266  0E80               	movlw	128
 11141  003268  6E6F               	movwf	111,c	;volatile
 11142  00326A                     l10097:
 11143  00326A  506E               	movf	110,w,c	;volatile
 11144  00326C  0BE0               	andlw	224
 11145  00326E  0A80               	xorlw	128
 11146  003270  A4D8               	btfss	status,2,c
 11147  003272  D7FB               	goto	l10097
 11148                           
 11149                           ;can.c: 43: if (baudrate == 2)
 11150  003274  0E02               	movlw	2
 11151  003276  0100               	movlb	0	; () banked
 11152  003278  19C8               	xorwf	init_can@baudrate& (0+255),w,b
 11153  00327A  A4D8               	btfss	status,2,c
 11154  00327C  D002               	goto	l10103
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;can.c: 44: BRGCON1 = 0x13;
 11158  00327E  0E13               	movlw	19
 11159  003280  D009               	goto	L20
 11160  003282                     l10103:
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;can.c: 45: else if (baudrate == 1)
 11164  003282  05C8               	decf	init_can@baudrate& (0+255),w,b
 11165  003284  A4D8               	btfss	status,2,c
 11166  003286  D002               	goto	l10107
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;can.c: 46: BRGCON1 = 0x89;
 11170  003288  0E89               	movlw	137
 11171  00328A  D004               	goto	L20
 11172  00328C                     l10107:
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;can.c: 47: else if (baudrate == 0)
 11176  00328C  51C8               	movf	init_can@baudrate& (0+255),w,b
 11177  00328E  A4D8               	btfss	status,2,c
 11178  003290  D003               	goto	l840
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;can.c: 48: BRGCON1 = 0x83;
 11182  003292  0E83               	movlw	131
 11183  003294                     L20:
 11184  003294  010E               	movlb	14	; () banked
 11185  003296  6F43               	movwf	67,b	;volatile
 11186  003298                     l840:
 11187                           
 11188                           ;can.c: 49: BRGCON2 = 0xF4;
 11189  003298  0EF4               	movlw	244
 11190  00329A  010E               	movlb	14	; () banked
 11191  00329C  6F44               	movwf	68,b	;volatile
 11192                           
 11193                           ;can.c: 50: BRGCON3 = 0x02;
 11194  00329E  0E02               	movlw	2
 11195  0032A0  6F45               	movwf	69,b	;volatile
 11196                           
 11197                           ;can.c: 51: RXB0CON = 0x20;
 11198  0032A2  0E20               	movlw	32
 11199  0032A4  6E60               	movwf	96,c	;volatile
 11200                           
 11201                           ;can.c: 52: RXB1CON = 0x20;
 11202  0032A6  0E20               	movlw	32
 11203  0032A8  010F               	movlb	15	; () banked
 11204  0032AA  6F30               	movwf	48,b	;volatile
 11205                           
 11206                           ;can.c: 53: RXF0SIDL = 0x01 << 5;
 11207  0032AC  0E20               	movlw	32
 11208  0032AE  010E               	movlb	14	; () banked
 11209  0032B0  6FE1               	movwf	225,b	;volatile
 11210                           
 11211                           ;can.c: 54: RXF0SIDH = 0xE0;
 11212  0032B2  0EE0               	movlw	224
 11213  0032B4  6FE0               	movwf	224,b	;volatile
 11214                           
 11215                           ;can.c: 55: RXF1SIDL = 0x0B << 5;
 11216  0032B6  0E60               	movlw	96
 11217  0032B8  6FE5               	movwf	229,b	;volatile
 11218                           
 11219                           ;can.c: 56: RXF1SIDH = 0xA0;
 11220  0032BA  0EA0               	movlw	160
 11221  0032BC  6FE4               	movwf	228,b	;volatile
 11222                           
 11223                           ;can.c: 57: RXM0SIDL = 0x00;
 11224  0032BE  0E00               	movlw	0
 11225  0032C0  6FF9               	movwf	249,b	;volatile
 11226                           
 11227                           ;can.c: 58: RXM0SIDH = 0xF0;
 11228  0032C2  0EF0               	movlw	240
 11229  0032C4  6FF8               	movwf	248,b	;volatile
 11230                           
 11231                           ;can.c: 60: RXF2SIDL = 0x00;
 11232  0032C6  0E00               	movlw	0
 11233  0032C8  6FE9               	movwf	233,b	;volatile
 11234                           
 11235                           ;can.c: 61: RXF2SIDH = 0x80;
 11236  0032CA  0E80               	movlw	128
 11237  0032CC  6FE8               	movwf	232,b	;volatile
 11238                           
 11239                           ;can.c: 62: RXF3SIDL = 0x00;
 11240  0032CE  0E00               	movlw	0
 11241  0032D0  6FED               	movwf	237,b	;volatile
 11242                           
 11243                           ;can.c: 63: RXF3SIDH = 0xC0;
 11244  0032D2  0EC0               	movlw	192
 11245  0032D4  6FEC               	movwf	236,b	;volatile
 11246                           
 11247                           ;can.c: 64: RXF4SIDL = 0x00;
 11248  0032D6  0E00               	movlw	0
 11249  0032D8  6FF1               	movwf	241,b	;volatile
 11250                           
 11251                           ;can.c: 65: RXF4SIDH = 0x00;
 11252  0032DA  0E00               	movlw	0
 11253  0032DC  6FF0               	movwf	240,b	;volatile
 11254                           
 11255                           ;can.c: 66: RXF5SIDL = 0x00;
 11256  0032DE  0E00               	movlw	0
 11257  0032E0  6FF5               	movwf	245,b	;volatile
 11258                           
 11259                           ;can.c: 67: RXF5SIDH = 0xF0;
 11260  0032E2  0EF0               	movlw	240
 11261  0032E4  6FF4               	movwf	244,b	;volatile
 11262                           
 11263                           ;can.c: 69: RXM1SIDL = 0x00;
 11264  0032E6  0E00               	movlw	0
 11265  0032E8  6FFD               	movwf	253,b	;volatile
 11266                           
 11267                           ;can.c: 70: RXM1SIDH = 0xF0;
 11268  0032EA  0EF0               	movlw	240
 11269  0032EC  6FFC               	movwf	252,b	;volatile
 11270                           
 11271                           ;can.c: 71: CANCON = 0x00;
 11272  0032EE  0E00               	movlw	0
 11273  0032F0  6E6F               	movwf	111,c	;volatile
 11274  0032F2                     l10111:
 11275  0032F2  CF6E F0C6          	movff	3950,??_init_can	;volatile
 11276  0032F6  0EE0               	movlw	224
 11277  0032F8  0100               	movlb	0	; () banked
 11278  0032FA  17C6               	andwf	??_init_can& (0+255),f,b
 11279  0032FC  A4D8               	btfss	status,2,c
 11280  0032FE  D7F9               	goto	l10111
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;can.c: 73: TXB1SIDH = 0xE0 + (node_id >> 3);
 11284  003300  399D               	swapf	_node_id& (0+255),w,b
 11285  003302  46E8               	rlncf	wreg,f,c
 11286  003304  0B1F               	andlw	31
 11287  003306  0FE0               	addlw	224
 11288  003308  010F               	movlb	15	; () banked
 11289  00330A  6F11               	movwf	17,b	;volatile
 11290                           
 11291                           ;can.c: 74: TXB1SIDL = node_id << 5;
 11292  00330C  0100               	movlb	0	; () banked
 11293  00330E  399D               	swapf	_node_id& (0+255),w,b
 11294  003310  46E8               	rlncf	wreg,f,c
 11295  003312  0BE0               	andlw	224
 11296  003314  010F               	movlb	15	; () banked
 11297  003316  6F12               	movwf	18,b	;volatile
 11298                           
 11299                           ; BSR set to: 15
 11300                           ;can.c: 75: TXB1DLC = 1;
 11301  003318  0E01               	movlw	1
 11302  00331A  6F15               	movwf	21,b	;volatile
 11303                           
 11304                           ; BSR set to: 15
 11305                           ;can.c: 76: TXB1D0 = nmtstate;
 11306  00331C  C090  FF16         	movff	_nmtstate,3862	;volatile
 11307                           
 11308                           ; BSR set to: 15
 11309                           ;can.c: 77: PIR5 = 0;
 11310  003320  0E00               	movlw	0
 11311  003322  6E77               	movwf	119,c	;volatile
 11312                           
 11313                           ; BSR set to: 15
 11314                           ;can.c: 78: PIE5 = 0x27;
 11315  003324  0E27               	movlw	39
 11316  003326  6E76               	movwf	118,c	;volatile
 11317                           
 11318                           ; BSR set to: 15
 11319                           ;can.c: 79: IPR5 = 0xFF;
 11320  003328  6878               	setf	120,c	;volatile
 11321                           
 11322                           ; BSR set to: 15
 11323                           ;can.c: 80: INTCONbits.GIEH = 1;
 11324  00332A  8EF2               	bsf	242,7,c	;volatile
 11325                           
 11326                           ; BSR set to: 15
 11327  00332C  0012               	return		;funcret
 11328  00332E                     __end_of_init_can:
 11329                           	callstack 0
 11330                           
 11331 ;; *************** function _check_version *****************
 11332 ;; Defined at:
 11333 ;;		line 213 in file "../../src/Main.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;  buf0            2   10[BANK0 ] PTR unsigned char 
 11336 ;;		 -> rx(300), 
 11337 ;;  buf1            2   12[BANK0 ] PTR unsigned char 
 11338 ;;		 -> rx(300), 
 11339 ;; Auto vars:     Size  Location     Type
 11340 ;;  i               1   17[BANK0 ] unsigned char 
 11341 ;;  version         1   16[BANK0 ] unsigned char 
 11342 ;;  k               1   15[BANK0 ] unsigned char 
 11343 ;;  m               1   14[BANK0 ] unsigned char 
 11344 ;; Return value:  Size  Location     Type
 11345 ;;                  1    wreg      unsigned char 
 11346 ;; Registers used:
 11347 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11348 ;; Tracked objects:
 11349 ;;		On entry : 3F/0
 11350 ;;		On exit  : 3F/0
 11351 ;;		Unchanged: 0/0
 11352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11353 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11354 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11356 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11357 ;;Total ram usage:        8 bytes
 11358 ;; Hardware stack levels used:    1
 11359 ;; Hardware stack levels required when called:    3
 11360 ;; This function calls:
 11361 ;;		Nothing
 11362 ;; This function is called by:
 11363 ;;		_main
 11364 ;; This function uses a non-reentrant model
 11365 ;;
 11366                           
 11367                           	psect	text18
 11368  004134                     __ptext18:
 11369                           	callstack 0
 11370  004134                     _check_version:
 11371                           	callstack 27
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;Main.c: 214: BYTE i = 0;
 11375                           
 11376                           ; BSR set to: 15
 11377                           ;incstack = 0
 11378  004134  0E00               	movlw	0
 11379  004136  6FCD               	movwf	check_version@i& (0+255),b
 11380                           
 11381                           ;Main.c: 215: BYTE m = 0, k = 0;
 11382  004138  0E00               	movlw	0
 11383  00413A  6FCA               	movwf	check_version@m& (0+255),b
 11384  00413C  0E00               	movlw	0
 11385  00413E  6FCB               	movwf	check_version@k& (0+255),b
 11386                           
 11387                           ;Main.c: 216: BYTE version = 0;
 11388  004140  0E00               	movlw	0
 11389  004142  6FCC               	movwf	check_version@version& (0+255),b
 11390                           
 11391                           ;Main.c: 218: for(i = 0; i < 10; i++)
 11392  004144  0E00               	movlw	0
 11393  004146  6FCD               	movwf	check_version@i& (0+255),b
 11394  004148                     l9987:
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;Main.c: 219: {;Main.c: 220: if(buf0[i])
 11398  004148  51CD               	movf	check_version@i& (0+255),w,b
 11399  00414A  25C6               	addwf	check_version@buf0& (0+255),w,b
 11400  00414C  6ED9               	movwf	fsr2l,c
 11401  00414E  0E00               	movlw	0
 11402  004150  21C7               	addwfc	(check_version@buf0+1)& (0+255),w,b
 11403  004152  6EDA               	movwf	fsr2h,c
 11404  004154  50DF               	movf	indf2,w,c
 11405  004156  A4D8               	btfss	status,2,c
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;Main.c: 221: m++;
 11409  004158  2BCA               	incf	check_version@m& (0+255),f,b
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;Main.c: 222: if(buf1[i])
 11413  00415A  51CD               	movf	check_version@i& (0+255),w,b
 11414  00415C  25C8               	addwf	check_version@buf1& (0+255),w,b
 11415  00415E  6ED9               	movwf	fsr2l,c
 11416  004160  0E00               	movlw	0
 11417  004162  21C9               	addwfc	(check_version@buf1+1)& (0+255),w,b
 11418  004164  6EDA               	movwf	fsr2h,c
 11419  004166  50DF               	movf	indf2,w,c
 11420  004168  A4D8               	btfss	status,2,c
 11421                           
 11422                           ; BSR set to: 0
 11423                           ;Main.c: 223: k++;
 11424  00416A  2BCB               	incf	check_version@k& (0+255),f,b
 11425                           
 11426                           ; BSR set to: 0
 11427  00416C  2BCD               	incf	check_version@i& (0+255),f,b
 11428                           
 11429                           ; BSR set to: 0
 11430  00416E  0E09               	movlw	9
 11431  004170  65CD               	cpfsgt	check_version@i& (0+255),b
 11432  004172  D7EA               	goto	l9987
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;Main.c: 224: };Main.c: 225: if(m > 7)
 11436  004174  0E07               	movlw	7
 11437  004176  65CA               	cpfsgt	check_version@m& (0+255),b
 11438  004178  D001               	goto	l10001
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;Main.c: 226: version |= 0X01;
 11442  00417A  81CC               	bsf	check_version@version& (0+255),0,b
 11443  00417C                     l10001:
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;Main.c: 227: if(k > 7)
 11447  00417C  0E07               	movlw	7
 11448  00417E  65CB               	cpfsgt	check_version@k& (0+255),b
 11449  004180  D001               	goto	l10005
 11450                           
 11451                           ; BSR set to: 0
 11452                           ;Main.c: 228: version |= 0X02;
 11453  004182  83CC               	bsf	check_version@version& (0+255),1,b
 11454  004184                     l10005:
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;Main.c: 229: return version;
 11458  004184  51CC               	movf	check_version@version& (0+255),w,b
 11459                           
 11460                           ; BSR set to: 0
 11461  004186  0012               	return		;funcret
 11462  004188                     __end_of_check_version:
 11463                           	callstack 0
 11464                           
 11465 ;; *************** function _check_hse *****************
 11466 ;; Defined at:
 11467 ;;		line 154 in file "../../src/Main.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;  mode            1    wreg     unsigned char 
 11470 ;; Auto vars:     Size  Location     Type
 11471 ;;  mode            1   13[BANK0 ] unsigned char 
 11472 ;;  i               1   15[BANK0 ] unsigned char 
 11473 ;;  help            1   14[BANK0 ] unsigned char 
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  1    wreg      void 
 11476 ;; Registers used:
 11477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11478 ;; Tracked objects:
 11479 ;;		On entry : 3F/0
 11480 ;;		On exit  : 3F/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11484 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11486 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11487 ;;Total ram usage:        5 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    4
 11490 ;; This function calls:
 11491 ;;		_check_for_call
 11492 ;; This function is called by:
 11493 ;;		_main
 11494 ;; This function uses a non-reentrant model
 11495 ;;
 11496                           
 11497                           	psect	text19
 11498  003488                     __ptext19:
 11499                           	callstack 0
 11500  003488                     _check_hse:
 11501                           	callstack 26
 11502                           
 11503                           ; BSR set to: 0
 11504                           ;incstack = 0
 11505                           ;check_hse@mode stored from wreg
 11506  003488  6FC9               	movwf	check_hse@mode& (0+255),b
 11507                           
 11508                           ;Main.c: 155: BYTE help;;Main.c: 156: BYTE i;;Main.c: 157: help = 0;
 11509  00348A  0E00               	movlw	0
 11510  00348C  0100               	movlb	0	; () banked
 11511  00348E  6FCA               	movwf	check_hse@help& (0+255),b
 11512                           
 11513                           ; BSR set to: 0
 11514                           ;Main.c: 159: if (!hsetime)
 11515  003490  5017               	movf	_hsetime^0,w,c	;volatile
 11516  003492  A4D8               	btfss	status,2,c
 11517  003494  D01D               	goto	l500
 11518                           
 11519                           ; BSR set to: 0
 11520                           ;Main.c: 160: {;Main.c: 161: help = 1;
 11521  003496  0E01               	movlw	1
 11522  003498  6FCA               	movwf	check_hse@help& (0+255),b
 11523                           
 11524                           ;Main.c: 162: hsetime = 50;
 11525  00349A  0E32               	movlw	50
 11526  00349C  6E17               	movwf	_hsetime^0,c	;volatile
 11527                           
 11528                           ;Main.c: 163: if ((!setid_mode) && (!mSwitch_code))
 11529  00349E  519B               	movf	_setid_mode& (0+255),w,b
 11530  0034A0  A4D8               	btfss	status,2,c
 11531  0034A2  D014               	goto	l501
 11532                           
 11533                           ; BSR set to: 0
 11534  0034A4  501F               	movf	_mSwitch_code^0,w,c
 11535  0034A6  A4D8               	btfss	status,2,c
 11536  0034A8  D011               	goto	l501
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;Main.c: 164: {;Main.c: 165: PIE1bits.TMR1IE = 0;
 11540  0034AA  909D               	bcf	157,0,c	;volatile
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;Main.c: 166: display[0] = 85;
 11544  0034AC  0E55               	movlw	85
 11545  0034AE  6F68               	movwf	_display& (0+255),b	;volatile
 11546                           
 11547                           ;Main.c: 167: display[1] = 23;
 11548  0034B0  0E17               	movlw	23
 11549  0034B2  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 11550                           
 11551                           ;Main.c: 168: display[2] = 12;
 11552  0034B4  0E0C               	movlw	12
 11553  0034B6  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 11554                           
 11555                           ; BSR set to: 0
 11556                           ;Main.c: 169: PIE1bits.TMR1IE = 1;
 11557  0034B8  809D               	bsf	157,0,c	;volatile
 11558                           
 11559                           ;Main.c: 171: if(hardware_version == 0)
 11560  0034BA  519A               	movf	_hardware_version& (0+255),w,b
 11561  0034BC  A4D8               	btfss	status,2,c
 11562  0034BE  D002               	goto	l9943
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;Main.c: 172: arrowflash = 0x01;
 11566  0034C0  0E01               	movlw	1
 11567  0034C2  D001               	goto	L21
 11568  0034C4                     l9943:
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;Main.c: 173: else;Main.c: 174: arrowflash = 0x00;
 11572  0034C4  0E00               	movlw	0
 11573  0034C6                     L21:
 11574  0034C6  6F95               	movwf	_arrowflash& (0+255),b
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;Main.c: 175: flashcontent = display[0];
 11578  0034C8  C068  F024         	movff	_display,_flashcontent	;volatile
 11579  0034CC                     l501:
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;Main.c: 176: };Main.c: 177: hse_heartbeat = 0;
 11583  0034CC  0E00               	movlw	0
 11584  0034CE  6F87               	movwf	_hse_heartbeat& (0+255),b	;volatile
 11585  0034D0                     l500:
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;Main.c: 178: };Main.c: 179: if (help && mode)
 11589  0034D0  51CA               	movf	check_hse@help& (0+255),w,b
 11590  0034D2  B4D8               	btfsc	status,2,c
 11591  0034D4  0012               	return	
 11592                           
 11593                           ; BSR set to: 0
 11594  0034D6  51C9               	movf	check_hse@mode& (0+255),w,b
 11595  0034D8  B4D8               	btfsc	status,2,c
 11596  0034DA  0012               	return	
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;Main.c: 180: {;Main.c: 181: for (i = 0; i < 8; i++)
 11600  0034DC  0E00               	movlw	0
 11601  0034DE  6FCB               	movwf	check_hse@i& (0+255),b
 11602  0034E0                     l9955:
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;Main.c: 182: {;Main.c: 183: if (check_for_call (outpar[i][0]))
 11606  0034E0  51CB               	movf	check_hse@i& (0+255),w,b
 11607  0034E2  0D08               	mullw	8
 11608  0034E4  0E00               	movlw	low _outpar
 11609  0034E6  24F3               	addwf	243,w,c
 11610  0034E8  6ED9               	movwf	fsr2l,c
 11611  0034EA  0E01               	movlw	high _outpar
 11612  0034EC  20F4               	addwfc	prodh,w,c
 11613  0034EE  6EDA               	movwf	fsr2h,c
 11614  0034F0  50DF               	movf	indf2,w,c
 11615  0034F2  EC93  F021         	call	_check_for_call
 11616  0034F6  0900               	iorlw	0
 11617  0034F8  B4D8               	btfsc	status,2,c
 11618  0034FA  D030               	goto	l9963
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;Main.c: 184: {;Main.c: 185: outpar[i][7] &= ~help;
 11622  0034FC  51CA               	movf	check_hse@help& (0+255),w,b
 11623  0034FE  0AFF               	xorlw	255
 11624  003500  6FC7               	movwf	??_check_hse& (0+255),b
 11625  003502  51CB               	movf	check_hse@i& (0+255),w,b
 11626  003504  0D08               	mullw	8
 11627  003506  0E07               	movlw	low (_outpar+7)
 11628  003508  24F3               	addwf	243,w,c
 11629  00350A  6ED9               	movwf	fsr2l,c
 11630  00350C  0E01               	movlw	high (_outpar+7)
 11631  00350E  20F4               	addwfc	prodh,w,c
 11632  003510  6EDA               	movwf	fsr2h,c
 11633  003512  51C7               	movf	??_check_hse& (0+255),w,b
 11634  003514  16DF               	andwf	indf2,f,c
 11635                           
 11636                           ;Main.c: 186: if (!outpar[i][7])
 11637  003516  51CB               	movf	check_hse@i& (0+255),w,b
 11638  003518  0D08               	mullw	8
 11639  00351A  0E07               	movlw	low (_outpar+7)
 11640  00351C  24F3               	addwf	243,w,c
 11641  00351E  6ED9               	movwf	fsr2l,c
 11642  003520  0E01               	movlw	high (_outpar+7)
 11643  003522  20F4               	addwfc	prodh,w,c
 11644  003524  6EDA               	movwf	fsr2h,c
 11645  003526  50DF               	movf	indf2,w,c
 11646  003528  A4D8               	btfss	status,2,c
 11647  00352A  D054               	goto	l9977
 11648  00352C                     u12640:
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;Main.c: 187: {;Main.c: 188: (out &= ~(1 << i));
 11652  00352C  C0CB  F0C7         	movff	check_hse@i,??_check_hse
 11653  003530  0E01               	movlw	1
 11654  003532  6FC8               	movwf	(??_check_hse+1)& (0+255),b
 11655  003534  2BC7               	incf	??_check_hse& (0+255),f,b
 11656  003536  D002               	goto	u12654
 11657  003538                     u12655:
 11658  003538  90D8               	bcf	status,0,c
 11659  00353A  37C8               	rlcf	(??_check_hse+1)& (0+255),f,b
 11660  00353C                     u12654:
 11661  00353C  2FC7               	decfsz	??_check_hse& (0+255),f,b
 11662  00353E  D7FC               	goto	u12655
 11663  003540  0100               	movlb	0	; () banked
 11664  003542  51C8               	movf	(??_check_hse+1)& (0+255),w,b
 11665  003544  0AFF               	xorlw	255
 11666  003546  162B               	andwf	_out^0,f,c	;volatile
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;Main.c: 189: outpar[i][5] = 0;
 11670  003548  51CB               	movf	check_hse@i& (0+255),w,b
 11671  00354A  0D08               	mullw	8
 11672  00354C  0E05               	movlw	low (_outpar+5)
 11673  00354E  24F3               	addwf	243,w,c
 11674  003550  6ED9               	movwf	fsr2l,c
 11675  003552  0E01               	movlw	high (_outpar+5)
 11676  003554  20F4               	addwfc	prodh,w,c
 11677  003556  6EDA               	movwf	fsr2h,c
 11678  003558  0E00               	movlw	0
 11679  00355A  D03B               	goto	L22
 11680  00355C                     l9963:
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;Main.c: 192: else;Main.c: 193: {;Main.c: 194: if (outpar[i][2] & help)
 11684  00355C  51CB               	movf	check_hse@i& (0+255),w,b
 11685  00355E  0D08               	mullw	8
 11686  003560  0E02               	movlw	low (_outpar+2)
 11687  003562  24F3               	addwf	243,w,c
 11688  003564  6ED9               	movwf	fsr2l,c
 11689  003566  0E01               	movlw	high (_outpar+2)
 11690  003568  20F4               	addwfc	prodh,w,c
 11691  00356A  6EDA               	movwf	fsr2h,c
 11692  00356C  50DF               	movf	indf2,w,c
 11693  00356E  15CA               	andwf	check_hse@help& (0+255),w,b
 11694  003570  0900               	iorlw	0
 11695  003572  B4D8               	btfsc	status,2,c
 11696  003574  D02F               	goto	l9977
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;Main.c: 195: {;Main.c: 196: if ((outpar[i][0] == 0x0E) &&;Main.c: 197: (outpar[i][1] ==
      +                           0x10))
 11700  003576  51CB               	movf	check_hse@i& (0+255),w,b
 11701  003578  0D08               	mullw	8
 11702  00357A  0E00               	movlw	low _outpar
 11703  00357C  24F3               	addwf	243,w,c
 11704  00357E  6ED9               	movwf	fsr2l,c
 11705  003580  0E01               	movlw	high _outpar
 11706  003582  20F4               	addwfc	prodh,w,c
 11707  003584  6EDA               	movwf	fsr2h,c
 11708  003586  0E0E               	movlw	14
 11709  003588  18DE               	xorwf	postinc2,w,c
 11710  00358A  A4D8               	btfss	status,2,c
 11711  00358C  D7CF               	goto	u12640
 11712                           
 11713                           ; BSR set to: 0
 11714  00358E  51CB               	movf	check_hse@i& (0+255),w,b
 11715  003590  0D08               	mullw	8
 11716  003592  0E01               	movlw	low (_outpar+1)
 11717  003594  24F3               	addwf	243,w,c
 11718  003596  6ED9               	movwf	fsr2l,c
 11719  003598  0E01               	movlw	high (_outpar+1)
 11720  00359A  20F4               	addwfc	prodh,w,c
 11721  00359C  6EDA               	movwf	fsr2h,c
 11722  00359E  0E10               	movlw	16
 11723  0035A0  18DE               	xorwf	postinc2,w,c
 11724  0035A2  A4D8               	btfss	status,2,c
 11725  0035A4  D7C3               	goto	u12640
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;Main.c: 198: {;Main.c: 199: (out |= (1 << i));
 11729  0035A6  C0CB  F0C7         	movff	check_hse@i,??_check_hse
 11730  0035AA  0E01               	movlw	1
 11731  0035AC  6FC8               	movwf	(??_check_hse+1)& (0+255),b
 11732  0035AE  2BC7               	incf	??_check_hse& (0+255),f,b
 11733  0035B0  D002               	goto	u12694
 11734  0035B2                     u12695:
 11735  0035B2  90D8               	bcf	status,0,c
 11736  0035B4  37C8               	rlcf	(??_check_hse+1)& (0+255),f,b
 11737  0035B6                     u12694:
 11738  0035B6  2FC7               	decfsz	??_check_hse& (0+255),f,b
 11739  0035B8  D7FC               	goto	u12695
 11740  0035BA  0100               	movlb	0	; () banked
 11741  0035BC  51C8               	movf	(??_check_hse+1)& (0+255),w,b
 11742  0035BE  122B               	iorwf	_out^0,f,c	;volatile
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;Main.c: 200: outpar[i][5] = 1;
 11746  0035C0  51CB               	movf	check_hse@i& (0+255),w,b
 11747  0035C2  0D08               	mullw	8
 11748  0035C4  0E05               	movlw	low (_outpar+5)
 11749  0035C6  24F3               	addwf	243,w,c
 11750  0035C8  6ED9               	movwf	fsr2l,c
 11751  0035CA  0E01               	movlw	high (_outpar+5)
 11752  0035CC  20F4               	addwfc	prodh,w,c
 11753  0035CE  6EDA               	movwf	fsr2h,c
 11754  0035D0  0E01               	movlw	1
 11755  0035D2                     L22:
 11756  0035D2  6EDF               	movwf	indf2,c
 11757  0035D4                     l9977:
 11758                           
 11759                           ; BSR set to: 0
 11760  0035D4  2BCB               	incf	check_hse@i& (0+255),f,b
 11761                           
 11762                           ; BSR set to: 0
 11763  0035D6  0E07               	movlw	7
 11764  0035D8  65CB               	cpfsgt	check_hse@i& (0+255),b
 11765  0035DA  D782               	goto	l9955
 11766  0035DC  0012               	return	
 11767  0035DE                     __end_of_check_hse:
 11768                           	callstack 0
 11769                           
 11770 ;; *************** function _check_for_call *****************
 11771 ;; Defined at:
 11772 ;;		line 733 in file "../../src/can.c"
 11773 ;; Parameters:    Size  Location     Type
 11774 ;;  value           1    wreg     unsigned char 
 11775 ;; Auto vars:     Size  Location     Type
 11776 ;;  value           1   10[BANK0 ] unsigned char 
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  1    wreg      unsigned char 
 11779 ;; Registers used:
 11780 ;;		wreg, status,2, status,0
 11781 ;; Tracked objects:
 11782 ;;		On entry : 3F/0
 11783 ;;		On exit  : 3F/0
 11784 ;;		Unchanged: 0/0
 11785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11789 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11790 ;;Total ram usage:        1 bytes
 11791 ;; Hardware stack levels used:    1
 11792 ;; Hardware stack levels required when called:    3
 11793 ;; This function calls:
 11794 ;;		Nothing
 11795 ;; This function is called by:
 11796 ;;		_check_hse
 11797 ;;		_set_output
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801                           	psect	text20
 11802  004326                     __ptext20:
 11803                           	callstack 0
 11804  004326                     _check_for_call:
 11805                           	callstack 25
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;incstack = 0
 11809                           ;check_for_call@value stored from wreg
 11810  004326  6FC6               	movwf	check_for_call@value& (0+255),b
 11811                           
 11812                           ;can.c: 734: switch (value)
 11813  004328  D004               	goto	l8589
 11814  00432A                     l1097:
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;can.c: 737: case (0x8F) :;can.c: 738: case (0x90) :;can.c: 739: case (0x91):;can.c: 740
      +                          : case (0x05) : return (1);
 11818                           
 11819                           ; BSR set to: 0
 11820  00432A  0E01               	movlw	1
 11821  00432C  0012               	return	
 11822  00432E                     l8583:
 11823                           
 11824                           ; BSR set to: 0
 11825  00432E  0E00               	movlw	0
 11826  004330  0012               	return	
 11827  004332                     l8589:
 11828  004332  0100               	movlb	0	; () banked
 11829  004334  51C6               	movf	check_for_call@value& (0+255),w,b
 11830                           
 11831                           ; Switch size 1, requested type "simple"
 11832                           ; Number of cases is 5, Range of values is 2 to 145
 11833                           ; switch strategies available:
 11834                           ; Name         Instructions Cycles
 11835                           ; simple_byte           16     9 (average)
 11836                           ;	Chosen strategy is simple_byte
 11837  004336  0A02               	xorlw	2	; case 2
 11838  004338  B4D8               	btfsc	status,2,c
 11839  00433A  D7F7               	goto	l1097
 11840  00433C  0A07               	xorlw	7	; case 5
 11841  00433E  B4D8               	btfsc	status,2,c
 11842  004340  D7F4               	goto	l1097
 11843  004342  0A8A               	xorlw	138	; case 143
 11844  004344  B4D8               	btfsc	status,2,c
 11845  004346  D7F1               	goto	l1097
 11846  004348  0A1F               	xorlw	31	; case 144
 11847  00434A  B4D8               	btfsc	status,2,c
 11848  00434C  D7EE               	goto	l1097
 11849  00434E  0A01               	xorlw	1	; case 145
 11850  004350  B4D8               	btfsc	status,2,c
 11851  004352  D7EB               	goto	l1097
 11852  004354  D7EC               	goto	l8583
 11853  004356                     __end_of_check_for_call:
 11854                           	callstack 0
 11855                           
 11856 ;; *************** function ___wmul *****************
 11857 ;; Defined at:
 11858 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul16.c"
 11859 ;; Parameters:    Size  Location     Type
 11860 ;;  multiplier      2   10[BANK0 ] unsigned int 
 11861 ;;  multiplicand    2   12[BANK0 ] unsigned int 
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;  product         2   14[BANK0 ] unsigned int 
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  2   10[BANK0 ] unsigned int 
 11866 ;; Registers used:
 11867 ;;		wreg, status,2, status,0, prodl, prodh
 11868 ;; Tracked objects:
 11869 ;;		On entry : 3F/0
 11870 ;;		On exit  : 3F/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11873 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11876 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11877 ;;Total ram usage:        6 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    3
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		_main
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           	psect	text21
 11888  0043D8                     __ptext21:
 11889                           	callstack 0
 11890  0043D8                     ___wmul:
 11891                           	callstack 27
 11892                           
 11893                           ; BSR set to: 0
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;incstack = 0
 11897  0043D8  51C6               	movf	___wmul@multiplier& (0+255),w,b
 11898  0043DA  03C8               	mulwf	___wmul@multiplicand& (0+255),b
 11899  0043DC  CFF3 F0CA          	movff	prodl,___wmul@product
 11900  0043E0  CFF4 F0CB          	movff	prodh,___wmul@product+1
 11901  0043E4  51C6               	movf	___wmul@multiplier& (0+255),w,b
 11902  0043E6  03C9               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11903  0043E8  50F3               	movf	243,w,c
 11904  0043EA  27CB               	addwf	(___wmul@product+1)& (0+255),f,b
 11905  0043EC  51C7               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11906  0043EE  03C8               	mulwf	___wmul@multiplicand& (0+255),b
 11907  0043F0  50F3               	movf	243,w,c
 11908  0043F2  27CB               	addwf	(___wmul@product+1)& (0+255),f,b
 11909                           
 11910                           ; BSR set to: 0
 11911  0043F4  C0CA  F0C6         	movff	___wmul@product,?___wmul
 11912  0043F8  C0CB  F0C7         	movff	___wmul@product+1,?___wmul+1
 11913                           
 11914                           ; BSR set to: 0
 11915  0043FC  0012               	return		;funcret
 11916  0043FE                     __end_of___wmul:
 11917                           	callstack 0
 11918                           
 11919 ;; *************** function ___lwdiv *****************
 11920 ;; Defined at:
 11921 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwdiv.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;  dividend        2   16[BANK0 ] unsigned int 
 11924 ;;  divisor         2   18[BANK0 ] unsigned int 
 11925 ;; Auto vars:     Size  Location     Type
 11926 ;;  quotient        2   21[BANK0 ] unsigned int 
 11927 ;;  counter         1   20[BANK0 ] unsigned char 
 11928 ;; Return value:  Size  Location     Type
 11929 ;;                  2   16[BANK0 ] unsigned int 
 11930 ;; Registers used:
 11931 ;;		wreg, status,2, status,0
 11932 ;; Tracked objects:
 11933 ;;		On entry : 3F/0
 11934 ;;		On exit  : 3F/0
 11935 ;;		Unchanged: 0/0
 11936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11937 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11938 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11940 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11941 ;;Total ram usage:        7 bytes
 11942 ;; Hardware stack levels used:    1
 11943 ;; Hardware stack levels required when called:    3
 11944 ;; This function calls:
 11945 ;;		Nothing
 11946 ;; This function is called by:
 11947 ;;		_main
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           	psect	text22
 11952  004188                     __ptext22:
 11953                           	callstack 0
 11954  004188                     ___lwdiv:
 11955                           	callstack 27
 11956                           
 11957                           ; BSR set to: 0
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;incstack = 0
 11961  004188  0E00               	movlw	0
 11962  00418A  6FD2               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11963  00418C  0E00               	movlw	0
 11964  00418E  6FD1               	movwf	___lwdiv@quotient& (0+255),b
 11965                           
 11966                           ; BSR set to: 0
 11967  004190  51CE               	movf	___lwdiv@divisor& (0+255),w,b
 11968  004192  11CF               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 11969  004194  B4D8               	btfsc	status,2,c
 11970  004196  D01C               	goto	l2137
 11971                           
 11972                           ; BSR set to: 0
 11973  004198  0E01               	movlw	1
 11974  00419A  6FD0               	movwf	___lwdiv@counter& (0+255),b
 11975  00419C  D004               	goto	l10617
 11976  00419E                     l10615:
 11977                           
 11978                           ; BSR set to: 0
 11979  00419E  90D8               	bcf	status,0,c
 11980  0041A0  37CE               	rlcf	___lwdiv@divisor& (0+255),f,b
 11981  0041A2  37CF               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11982  0041A4  2BD0               	incf	___lwdiv@counter& (0+255),f,b
 11983  0041A6                     l10617:
 11984                           
 11985                           ; BSR set to: 0
 11986  0041A6  AFCF               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11987  0041A8  D7FA               	goto	l10615
 11988  0041AA                     u13440:
 11989                           
 11990                           ; BSR set to: 0
 11991  0041AA  90D8               	bcf	status,0,c
 11992  0041AC  37D1               	rlcf	___lwdiv@quotient& (0+255),f,b
 11993  0041AE  37D2               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11994                           
 11995                           ; BSR set to: 0
 11996  0041B0  51CE               	movf	___lwdiv@divisor& (0+255),w,b
 11997  0041B2  5DCC               	subwf	___lwdiv@dividend& (0+255),w,b
 11998  0041B4  51CF               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11999  0041B6  59CD               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12000  0041B8  A0D8               	btfss	status,0,c
 12001  0041BA  D005               	goto	l10627
 12002                           
 12003                           ; BSR set to: 0
 12004  0041BC  51CE               	movf	___lwdiv@divisor& (0+255),w,b
 12005  0041BE  5FCC               	subwf	___lwdiv@dividend& (0+255),f,b
 12006  0041C0  51CF               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12007  0041C2  5BCD               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12008                           
 12009                           ; BSR set to: 0
 12010  0041C4  81D1               	bsf	___lwdiv@quotient& (0+255),0,b
 12011  0041C6                     l10627:
 12012                           
 12013                           ; BSR set to: 0
 12014  0041C6  90D8               	bcf	status,0,c
 12015  0041C8  33CF               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12016  0041CA  33CE               	rrcf	___lwdiv@divisor& (0+255),f,b
 12017                           
 12018                           ; BSR set to: 0
 12019  0041CC  2FD0               	decfsz	___lwdiv@counter& (0+255),f,b
 12020  0041CE  D7ED               	goto	u13440
 12021  0041D0                     l2137:
 12022                           
 12023                           ; BSR set to: 0
 12024  0041D0  C0D1  F0CC         	movff	___lwdiv@quotient,?___lwdiv
 12025  0041D4  C0D2  F0CD         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12026                           
 12027                           ; BSR set to: 0
 12028  0041D8  0012               	return		;funcret
 12029  0041DA                     __end_of___lwdiv:
 12030                           	callstack 0
 12031                           
 12032 ;; *************** function _TestMode *****************
 12033 ;; Defined at:
 12034 ;;		line 94 in file "../../src/Display.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;		None
 12037 ;; Auto vars:     Size  Location     Type
 12038 ;;  i               1   37[BANK0 ] unsigned char 
 12039 ;; Return value:  Size  Location     Type
 12040 ;;                  1    wreg      void 
 12041 ;; Registers used:
 12042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12043 ;; Tracked objects:
 12044 ;;		On entry : 3F/0
 12045 ;;		On exit  : 3F/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12050 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12051 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12052 ;;Total ram usage:        3 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; Hardware stack levels required when called:    5
 12055 ;; This function calls:
 12056 ;;		_Display_test
 12057 ;; This function is called by:
 12058 ;;		_main
 12059 ;; This function uses a non-reentrant model
 12060 ;;
 12061                           
 12062                           	psect	text23
 12063  00332E                     __ptext23:
 12064                           	callstack 0
 12065  00332E                     _TestMode:
 12066                           	callstack 25
 12067                           
 12068                           ; BSR set to: 0
 12069                           ;Display.c: 95: BYTE i;;Display.c: 96: static BYTE oldin = 0;;Display.c: 98: if(timer_1S
      +                          5)
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;incstack = 0
 12073  00332E  5198               	movf	_timer_1S5& (0+255),w,b
 12074  003330  B4D8               	btfsc	status,2,c
 12075  003332  0012               	return	
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;Display.c: 99: {;Display.c: 100: if (PORTCbits.RC4)
 12079  003334  A882               	btfss	130,4,c	;volatile
 12080  003336  D025               	goto	l9671
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;Display.c: 101: {;Display.c: 102: if(hardware_version == 0)
 12084  003338  519A               	movf	_hardware_version& (0+255),w,b
 12085  00333A  A4D8               	btfss	status,2,c
 12086  00333C  D00C               	goto	l9663
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;Display.c: 103: {;Display.c: 104: display[1] = version_uea_G741[1] - '0';
 12090  00333E  0EF9               	movlw	low (_version_uea_G741+1)
 12091  003340  6EF6               	movwf	tblptrl,c
 12092  003342  0E7F               	movlw	high (_version_uea_G741+1)
 12093  003344  6EF7               	movwf	tblptrh,c
 12094  003346                     	if	0	;tblptru may be non-zero
 12095  003346                     	endif
 12096  003346                     	if	0	;tblptru may be non-zero
 12097  003346                     	endif
 12098  003346  0008               	tblrd		*
 12099  003348  50F5               	movf	tablat,w,c
 12100  00334A  0FD0               	addlw	208
 12101  00334C  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12102                           
 12103                           ;Display.c: 105: display[2] = version_uea_G741[3] - '0';
 12104  00334E  0EFB               	movlw	low (_version_uea_G741+3)
 12105  003350  6EF6               	movwf	tblptrl,c
 12106  003352  0E7F               	movlw	high (_version_uea_G741+3)
 12107  003354  D00B               	goto	L23
 12108  003356                     l9663:
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;Display.c: 107: else;Display.c: 108: {;Display.c: 109: display[1] = version_uea_G742[1]
      +                           - '0';
 12112  003356  0EDC               	movlw	low (_version_uea_G742+1)
 12113  003358  6EF6               	movwf	tblptrl,c
 12114  00335A  0E7F               	movlw	high (_version_uea_G742+1)
 12115  00335C  6EF7               	movwf	tblptrh,c
 12116  00335E                     	if	0	;tblptru may be non-zero
 12117  00335E                     	endif
 12118  00335E                     	if	0	;tblptru may be non-zero
 12119  00335E                     	endif
 12120  00335E  0008               	tblrd		*
 12121  003360  50F5               	movf	tablat,w,c
 12122  003362  0FD0               	addlw	208
 12123  003364  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12124                           
 12125                           ;Display.c: 110: display[2] = version_uea_G742[3] - '0';
 12126  003366  0EDE               	movlw	low (_version_uea_G742+3)
 12127  003368  6EF6               	movwf	tblptrl,c
 12128  00336A  0E7F               	movlw	high (_version_uea_G742+3)
 12129  00336C                     L23:
 12130  00336C  6EF7               	movwf	tblptrh,c
 12131  00336E                     	if	0	;tblptru may be non-zero
 12132  00336E                     	endif
 12133  00336E                     	if	0	;tblptru may be non-zero
 12134  00336E                     	endif
 12135  00336E  0008               	tblrd		*
 12136  003370  50F5               	movf	tablat,w,c
 12137  003372  0FD0               	addlw	208
 12138  003374  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;Display.c: 111: };Display.c: 112: display[0] = 85;
 12142  003376  0E55               	movlw	85
 12143  003378  6F68               	movwf	_display& (0+255),b	;volatile
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;Display.c: 113: scroll = 0;
 12147  00337A  0E00               	movlw	0
 12148  00337C  6E25               	movwf	_scroll^0,c
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;Display.c: 114: display_timer = 10;
 12152  00337E  0E0A               	movlw	10
 12153  003380  6F97               	movwf	_display_timer& (0+255),b
 12154  003382                     l9671:
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;Display.c: 115: };Display.c: 116: if (!display_timer)
 12158  003382  5197               	movf	_display_timer& (0+255),w,b
 12159  003384  B4D8               	btfsc	status,2,c
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;Display.c: 117: Display_test();
 12163  003386  ECC8  F016         	call	_Display_test	;wreg free
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;Display.c: 118: if (in != oldin)
 12167  00338A  5193               	movf	TestMode@oldin& (0+255),w,b
 12168  00338C  19BB               	xorwf	_in& (0+255),w,b	;volatile
 12169  00338E  B4D8               	btfsc	status,2,c
 12170  003390  D078               	goto	l9717
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;Display.c: 119: {;Display.c: 120: if ((in & 0x0f) != 0x0f)
 12174  003392  51BB               	movf	_in& (0+255),w,b	;volatile
 12175  003394  0B0F               	andlw	15
 12176  003396  0A0F               	xorlw	15
 12177  003398  B4D8               	btfsc	status,2,c
 12178  00339A  D071               	goto	l125
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;Display.c: 121: {;Display.c: 122: for (i=0; i<4; ++i)
 12182  00339C  0E00               	movlw	0
 12183  00339E  6FE1               	movwf	TestMode@i& (0+255),b
 12184  0033A0                     l9681:
 12185                           
 12186                           ; BSR set to: 0
 12187  0033A0  0E03               	movlw	3
 12188  0033A2  65E1               	cpfsgt	TestMode@i& (0+255),b
 12189  0033A4  D001               	goto	l9685
 12190  0033A6  D06B               	goto	l125
 12191  0033A8                     l9685:
 12192                           
 12193                           ; BSR set to: 0
 12194                           ;Display.c: 123: {;Display.c: 124: if (in & (1 << i))
 12195  0033A8  C0E1  F0DF         	movff	TestMode@i,??_TestMode
 12196  0033AC  0E01               	movlw	1
 12197  0033AE  6FE0               	movwf	(??_TestMode+1)& (0+255),b
 12198  0033B0  2BDF               	incf	??_TestMode& (0+255),f,b
 12199  0033B2  D002               	goto	u12154
 12200  0033B4                     u12155:
 12201  0033B4  90D8               	bcf	status,0,c
 12202  0033B6  37E0               	rlcf	(??_TestMode+1)& (0+255),f,b
 12203  0033B8                     u12154:
 12204  0033B8  2FDF               	decfsz	??_TestMode& (0+255),f,b
 12205  0033BA  D7FC               	goto	u12155
 12206  0033BC  0100               	movlb	0	; () banked
 12207  0033BE  51E0               	movf	(??_TestMode+1)& (0+255),w,b
 12208  0033C0  15BB               	andwf	_in& (0+255),w,b	;volatile
 12209  0033C2  0900               	iorlw	0
 12210  0033C4  B4D8               	btfsc	status,2,c
 12211  0033C6  D040               	goto	l9705
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;Display.c: 125: {;Display.c: 126: PIE1bits.TMR1IE = 0;
 12215  0033C8  909D               	bcf	157,0,c	;volatile
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;Display.c: 127: scroll = 0;
 12219  0033CA  0E00               	movlw	0
 12220  0033CC  6E25               	movwf	_scroll^0,c
 12221                           
 12222                           ;Display.c: 128: display_timer = 10;
 12223  0033CE  0E0A               	movlw	10
 12224  0033D0  6F97               	movwf	_display_timer& (0+255),b
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;Display.c: 129: out = 1 << i;
 12228  0033D2  C0E1  F0DF         	movff	TestMode@i,??_TestMode
 12229  0033D6  0E01               	movlw	1
 12230  0033D8  6FE0               	movwf	(??_TestMode+1)& (0+255),b
 12231  0033DA  2BDF               	incf	??_TestMode& (0+255),f,b
 12232  0033DC  D002               	goto	u12174
 12233  0033DE                     u12175:
 12234  0033DE  90D8               	bcf	status,0,c
 12235  0033E0  37E0               	rlcf	(??_TestMode+1)& (0+255),f,b
 12236  0033E2                     u12174:
 12237  0033E2  2FDF               	decfsz	??_TestMode& (0+255),f,b
 12238  0033E4  D7FC               	goto	u12175
 12239  0033E6  0100               	movlb	0	; () banked
 12240  0033E8  51E0               	movf	(??_TestMode+1)& (0+255),w,b
 12241  0033EA  6E2B               	movwf	_out^0,c	;volatile
 12242                           
 12243                           ;Display.c: 130: switch(i)
 12244  0033EC  D01E               	goto	l9703
 12245  0033EE                     l9693:
 12246                           
 12247                           ; BSR set to: 0
 12248                           ;Display.c: 133: display[0] = 86;
 12249  0033EE  0E56               	movlw	86
 12250  0033F0  6F68               	movwf	_display& (0+255),b	;volatile
 12251                           
 12252                           ;Display.c: 134: display[1] = 'U' - '7';
 12253  0033F2  0E1E               	movlw	30
 12254  0033F4  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12255                           
 12256                           ;Display.c: 135: display[2] = 'P' - '7';
 12257  0033F6  0E19               	movlw	25
 12258  0033F8  D005               	goto	L24
 12259  0033FA                     l9695:
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;Display.c: 139: display[0] = 87;
 12263  0033FA  0E57               	movlw	87
 12264  0033FC  6F68               	movwf	_display& (0+255),b	;volatile
 12265                           
 12266                           ;Display.c: 140: display[1] = 'D' - '7';
 12267  0033FE  0E0D               	movlw	13
 12268  003400  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12269                           
 12270                           ;Display.c: 141: display[2] = 'N' - '7';
 12271  003402  0E17               	movlw	23
 12272  003404                     L24:
 12273  003404  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 12274                           
 12275                           ;Display.c: 142: break;
 12276  003406  D01E               	goto	l131
 12277  003408                     l9697:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;Display.c: 145: display[0] = 85;
 12281  003408  0E55               	movlw	85
 12282  00340A  6F68               	movwf	_display& (0+255),b	;volatile
 12283                           
 12284                           ;Display.c: 146: display[1] = 'F' - '7';
 12285  00340C  0E0F               	movlw	15
 12286  00340E  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12287                           
 12288                           ;Display.c: 147: display[2] = 'F' - '7';
 12289  003410  0E0F               	movlw	15
 12290  003412  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 12291                           
 12292                           ;Display.c: 148: out = 8;
 12293  003414  0E08               	movlw	8
 12294  003416  D007               	goto	L25
 12295  003418                     l9699:
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;Display.c: 152: display[0] = 85;
 12299  003418  0E55               	movlw	85
 12300  00341A  6F68               	movwf	_display& (0+255),b	;volatile
 12301                           
 12302                           ;Display.c: 153: display[1] = 'L' - '7';
 12303  00341C  0E15               	movlw	21
 12304  00341E  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12305                           
 12306                           ;Display.c: 154: display[2] = 'L' - '7';
 12307  003420  0E15               	movlw	21
 12308  003422  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 12309                           
 12310                           ;Display.c: 155: out = 4;
 12311  003424  0E04               	movlw	4
 12312  003426                     L25:
 12313  003426  6E2B               	movwf	_out^0,c	;volatile
 12314                           
 12315                           ;Display.c: 156: break;
 12316  003428  D00D               	goto	l131
 12317  00342A                     l9703:
 12318                           
 12319                           ; BSR set to: 0
 12320  00342A  51E1               	movf	TestMode@i& (0+255),w,b
 12321                           
 12322                           ; Switch size 1, requested type "simple"
 12323                           ; Number of cases is 4, Range of values is 0 to 3
 12324                           ; switch strategies available:
 12325                           ; Name         Instructions Cycles
 12326                           ; simple_byte           13     7 (average)
 12327                           ;	Chosen strategy is simple_byte
 12328  00342C  0A00               	xorlw	0	; case 0
 12329  00342E  B4D8               	btfsc	status,2,c
 12330  003430  D7DE               	goto	l9693
 12331  003432  0A01               	xorlw	1	; case 1
 12332  003434  B4D8               	btfsc	status,2,c
 12333  003436  D7E1               	goto	l9695
 12334  003438  0A03               	xorlw	3	; case 2
 12335  00343A  B4D8               	btfsc	status,2,c
 12336  00343C  D7E5               	goto	l9697
 12337  00343E  0A01               	xorlw	1	; case 3
 12338  003440  B4D8               	btfsc	status,2,c
 12339  003442  D7EA               	goto	l9699
 12340  003444                     l131:
 12341                           
 12342                           ; BSR set to: 0
 12343                           ;Display.c: 158: PIE1bits.TMR1IE = 1;
 12344  003444  809D               	bsf	157,0,c	;volatile
 12345                           
 12346                           ;Display.c: 159: }
 12347  003446  D019               	goto	l135
 12348  003448                     l9705:
 12349                           
 12350                           ; BSR set to: 0
 12351                           ;Display.c: 160: else;Display.c: 161: {;Display.c: 162: if(i < 2)
 12352  003448  0E02               	movlw	2
 12353  00344A  61E1               	cpfslt	TestMode@i& (0+255),b
 12354  00344C  D00F               	goto	l9709
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;Display.c: 163: (out &= ~(1 << i));
 12358  00344E  C0E1  F0DF         	movff	TestMode@i,??_TestMode
 12359  003452  0E01               	movlw	1
 12360  003454  6FE0               	movwf	(??_TestMode+1)& (0+255),b
 12361  003456  2BDF               	incf	??_TestMode& (0+255),f,b
 12362  003458  D002               	goto	u12194
 12363  00345A                     u12195:
 12364  00345A  90D8               	bcf	status,0,c
 12365  00345C  37E0               	rlcf	(??_TestMode+1)& (0+255),f,b
 12366  00345E                     u12194:
 12367  00345E  2FDF               	decfsz	??_TestMode& (0+255),f,b
 12368  003460  D7FC               	goto	u12195
 12369  003462  0100               	movlb	0	; () banked
 12370  003464  51E0               	movf	(??_TestMode+1)& (0+255),w,b
 12371  003466  0AFF               	xorlw	255
 12372  003468  162B               	andwf	_out^0,f,c	;volatile
 12373  00346A  D007               	goto	l135
 12374  00346C                     l9709:
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;Display.c: 164: else if(i == 2)
 12378  00346C  0E02               	movlw	2
 12379  00346E  19E1               	xorwf	TestMode@i& (0+255),w,b
 12380  003470  A4D8               	btfss	status,2,c
 12381  003472  D002               	goto	l9713
 12382                           
 12383                           ; BSR set to: 0
 12384                           ;Display.c: 165: (out &= ~(1 << 3));
 12385  003474  962B               	bcf	_out^0,3,c	;volatile
 12386  003476  D001               	goto	l135
 12387  003478                     l9713:
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;Display.c: 166: else;Display.c: 167: (out &= ~(1 << 2));
 12391  003478  942B               	bcf	_out^0,2,c	;volatile
 12392  00347A                     l135:
 12393                           
 12394                           ; BSR set to: 0
 12395  00347A  2BE1               	incf	TestMode@i& (0+255),f,b
 12396  00347C  D791               	goto	l9681
 12397  00347E                     l125:
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;Display.c: 168: };Display.c: 169: };Display.c: 170: };Display.c: 171: oldin = in;
 12401  00347E  C0BB  F093         	movff	_in,TestMode@oldin	;volatile
 12402  003482                     l9717:
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;Display.c: 172: };Display.c: 173: timer_1S5 = 0;
 12406  003482  0E00               	movlw	0
 12407  003484  6F98               	movwf	_timer_1S5& (0+255),b
 12408                           
 12409                           ; BSR set to: 0
 12410  003486  0012               	return		;funcret
 12411  003488                     __end_of_TestMode:
 12412                           	callstack 0
 12413                           
 12414 ;; *************** function _Display_test *****************
 12415 ;; Defined at:
 12416 ;;		line 177 in file "../../src/Display.c"
 12417 ;; Parameters:    Size  Location     Type
 12418 ;;		None
 12419 ;; Auto vars:     Size  Location     Type
 12420 ;;  buf             4   30[BANK0 ] unsigned char [4]
 12421 ;;  number          1   34[BANK0 ] unsigned char 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;                  1    wreg      void 
 12424 ;; Registers used:
 12425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 3F/0
 12428 ;;		On exit  : 3F/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12432 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12433 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12434 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12435 ;;Total ram usage:       11 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    4
 12438 ;; This function calls:
 12439 ;;		___awdiv
 12440 ;;		___awmod
 12441 ;;		___lbmod
 12442 ;; This function is called by:
 12443 ;;		_TestMode
 12444 ;; This function uses a non-reentrant model
 12445 ;;
 12446                           
 12447                           	psect	text24
 12448  002D90                     __ptext24:
 12449                           	callstack 0
 12450  002D90                     _Display_test:
 12451                           	callstack 25
 12452                           
 12453                           ; BSR set to: 0
 12454                           ;Display.c: 179: BYTE buf[4];;Display.c: 181: if(hardware_version == 0)
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;incstack = 0
 12458  002D90  519A               	movf	_hardware_version& (0+255),w,b
 12459  002D92  A4D8               	btfss	status,2,c
 12460  002D94  D002               	goto	l8737
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;Display.c: 182: number = 37;
 12464  002D96  0E25               	movlw	37
 12465  002D98  D001               	goto	L26
 12466  002D9A                     l8737:
 12467                           
 12468                           ; BSR set to: 0
 12469                           ;Display.c: 183: else;Display.c: 184: number = 13;
 12470  002D9A  0E0D               	movlw	13
 12471  002D9C                     L26:
 12472  002D9C  6FDE               	movwf	Display_test@number& (0+255),b
 12473                           
 12474                           ; BSR set to: 0
 12475                           ;Display.c: 186: PIE1bits.TMR1IE = 0;
 12476  002D9E  909D               	bcf	157,0,c	;volatile
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;Display.c: 187: if(testno < number)
 12480  002DA0  51DE               	movf	Display_test@number& (0+255),w,b
 12481  002DA2  5D96               	subwf	_testno& (0+255),w,b
 12482  002DA4  B0D8               	btfsc	status,0,c
 12483  002DA6  D0A4               	goto	l8779
 12484                           
 12485                           ; BSR set to: 0
 12486                           ;Display.c: 188: {;Display.c: 189: if(hardware_version == 0)
 12487  002DA8  519A               	movf	_hardware_version& (0+255),w,b
 12488  002DAA  A4D8               	btfss	status,2,c
 12489  002DAC  D060               	goto	l8773
 12490                           
 12491                           ; BSR set to: 0
 12492                           ;Display.c: 190: {;Display.c: 191: buf[0] = 85;
 12493  002DAE  0E55               	movlw	85
 12494  002DB0  6FDA               	movwf	Display_test@buf& (0+255),b
 12495                           
 12496                           ;Display.c: 192: buf[1] = 85;
 12497  002DB2  0E55               	movlw	85
 12498  002DB4  6FDB               	movwf	(Display_test@buf+1)& (0+255),b
 12499                           
 12500                           ;Display.c: 193: buf[2] = 85;
 12501  002DB6  0E55               	movlw	85
 12502  002DB8  6FDC               	movwf	(Display_test@buf+2)& (0+255),b
 12503                           
 12504                           ;Display.c: 194: buf[3] = 0;
 12505  002DBA  0E00               	movlw	0
 12506  002DBC  6FDD               	movwf	(Display_test@buf+3)& (0+255),b
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;Display.c: 196: if(testno < 32)
 12510  002DBE  0E20               	movlw	32
 12511  002DC0  6196               	cpfslt	_testno& (0+255),b
 12512  002DC2  D00F               	goto	l8751
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;Display.c: 197: buf[(testno / 16) + 1] = 90 + testno;
 12516  002DC4  C096  F0D4         	movff	_testno,??_Display_test
 12517  002DC8  3BD4               	swapf	??_Display_test& (0+255),f,b
 12518  002DCA  0E0F               	movlw	15
 12519  002DCC  17D4               	andwf	??_Display_test& (0+255),f,b
 12520  002DCE  0E01               	movlw	1
 12521  002DD0  27D4               	addwf	??_Display_test& (0+255),f,b
 12522  002DD2  51D4               	movf	??_Display_test& (0+255),w,b
 12523  002DD4  0FDA               	addlw	low Display_test@buf
 12524  002DD6  6ED9               	movwf	fsr2l,c
 12525  002DD8  6ADA               	clrf	fsr2h,c
 12526  002DDA  5196               	movf	_testno& (0+255),w,b
 12527  002DDC  0F5A               	addlw	90
 12528  002DDE  6EDF               	movwf	indf2,c
 12529  002DE0  D01D               	goto	l8759
 12530  002DE2                     l8751:
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;Display.c: 198: else if(testno < 34)
 12534  002DE2  0E22               	movlw	34
 12535  002DE4  6196               	cpfslt	_testno& (0+255),b
 12536  002DE6  D004               	goto	l8755
 12537                           
 12538                           ; BSR set to: 0
 12539                           ;Display.c: 199: buf[0] = 90 + testno - 32;
 12540  002DE8  5196               	movf	_testno& (0+255),w,b
 12541  002DEA  0F3A               	addlw	58
 12542  002DEC  6FDA               	movwf	Display_test@buf& (0+255),b
 12543  002DEE  D016               	goto	l8759
 12544  002DF0                     l8755:
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;Display.c: 200: else if(testno < 36)
 12548  002DF0  0E24               	movlw	36
 12549  002DF2  6196               	cpfslt	_testno& (0+255),b
 12550  002DF4  D013               	goto	l8759
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;Display.c: 201: buf[3] = tFloor_Tab[88 + testno - 34];
 12554  002DF6  5196               	movf	_testno& (0+255),w,b
 12555  002DF8  6FD4               	movwf	??_Display_test& (0+255),b
 12556  002DFA  6BD5               	clrf	(??_Display_test+1)& (0+255),b
 12557  002DFC  90D8               	bcf	status,0,c
 12558  002DFE  37D4               	rlcf	??_Display_test& (0+255),f,b
 12559  002E00  37D5               	rlcf	(??_Display_test+1)& (0+255),f,b
 12560  002E02  0E6C               	movlw	108
 12561  002E04  27D4               	addwf	??_Display_test& (0+255),f,b
 12562  002E06  0E00               	movlw	0
 12563  002E08  23D5               	addwfc	(??_Display_test+1)& (0+255),f,b
 12564  002E0A  0EBC               	movlw	low _tFloor_Tab
 12565  002E0C  25D4               	addwf	??_Display_test& (0+255),w,b
 12566  002E0E  6EF6               	movwf	tblptrl,c
 12567  002E10  0E7C               	movlw	high _tFloor_Tab
 12568  002E12  21D5               	addwfc	(??_Display_test+1)& (0+255),w,b
 12569  002E14  6EF7               	movwf	tblptrh,c
 12570  002E16                     	if	0	;There are less than 3 active tblptr bytes
 12571  002E16                     	endif
 12572  002E16  0008               	tblrd		*
 12573  002E18  CFF5 F0DD          	movff	tablat,Display_test@buf+3
 12574  002E1C                     l8759:
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;Display.c: 202: if (testno == number - 1)
 12578  002E1C  5196               	movf	_testno& (0+255),w,b
 12579  002E1E  6FD4               	movwf	??_Display_test& (0+255),b
 12580  002E20  6BD5               	clrf	(??_Display_test+1)& (0+255),b
 12581  002E22  0EFF               	movlw	255
 12582  002E24  6FD6               	movwf	(??_Display_test+2)& (0+255),b
 12583  002E26  0EFF               	movlw	255
 12584  002E28  6FD7               	movwf	(??_Display_test+3)& (0+255),b
 12585  002E2A  51DE               	movf	Display_test@number& (0+255),w,b
 12586  002E2C  6FD8               	movwf	(??_Display_test+4)& (0+255),b
 12587  002E2E  6BD9               	clrf	(??_Display_test+5)& (0+255),b
 12588  002E30  51D6               	movf	(??_Display_test+2)& (0+255),w,b
 12589  002E32  27D8               	addwf	(??_Display_test+4)& (0+255),f,b
 12590  002E34  51D7               	movf	(??_Display_test+3)& (0+255),w,b
 12591  002E36  23D9               	addwfc	(??_Display_test+5)& (0+255),f,b
 12592  002E38  51D4               	movf	??_Display_test& (0+255),w,b
 12593  002E3A  19D8               	xorwf	(??_Display_test+4)& (0+255),w,b
 12594  002E3C  E10F               	bnz	l8765
 12595  002E3E  51D5               	movf	(??_Display_test+1)& (0+255),w,b
 12596  002E40  19D9               	xorwf	(??_Display_test+5)& (0+255),w,b
 12597  002E42  A4D8               	btfss	status,2,c
 12598  002E44  D00B               	goto	l8765
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;Display.c: 203: {;Display.c: 204: buf[0] = 90 + testno;
 12602  002E46  5196               	movf	_testno& (0+255),w,b
 12603  002E48  0F5A               	addlw	90
 12604  002E4A  6FDA               	movwf	Display_test@buf& (0+255),b
 12605                           
 12606                           ;Display.c: 205: buf[1] = 90 + testno + 1;
 12607  002E4C  5196               	movf	_testno& (0+255),w,b
 12608  002E4E  0F5B               	addlw	91
 12609  002E50  6FDB               	movwf	(Display_test@buf+1)& (0+255),b
 12610                           
 12611                           ;Display.c: 206: buf[2] = 90 + testno + 1;
 12612  002E52  5196               	movf	_testno& (0+255),w,b
 12613  002E54  0F5B               	addlw	91
 12614  002E56  6FDC               	movwf	(Display_test@buf+2)& (0+255),b
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;Display.c: 207: buf[3] = 0x10 + 0x08;
 12618  002E58  0E18               	movlw	24
 12619  002E5A  6FDD               	movwf	(Display_test@buf+3)& (0+255),b
 12620  002E5C                     l8765:
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;Display.c: 208: };Display.c: 209: display[1] = buf[1];
 12624  002E5C  C0DB  F069         	movff	Display_test@buf+1,_display+1	;volatile
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;Display.c: 210: display[2] = buf[2];
 12628  002E60  C0DC  F06A         	movff	Display_test@buf+2,_display+2	;volatile
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;Display.c: 211: display[0] = buf[0];
 12632  002E64  C0DA  F068         	movff	Display_test@buf,_display	;volatile
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;Display.c: 212: display[3] = buf[3];
 12636  002E68  C0DD  F06B         	movff	Display_test@buf+3,_display+3	;volatile
 12637                           
 12638                           ;Display.c: 213: }
 12639  002E6C  D029               	goto	l8775
 12640  002E6E                     l8773:
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;Display.c: 214: else;Display.c: 215: {;Display.c: 216: display[0] = testdisplay[testno]
      +                          [2];
 12644  002E6E  5196               	movf	_testno& (0+255),w,b
 12645  002E70  0D03               	mullw	3
 12646  002E72  0E02               	movlw	2
 12647  002E74  26F3               	addwf	243,f,c
 12648  002E76  0E00               	movlw	0
 12649  002E78  22F4               	addwfc	244,f,c
 12650  002E7A  0EBC               	movlw	low _testdisplay
 12651  002E7C  24F3               	addwf	243,w,c
 12652  002E7E  6EF6               	movwf	tblptrl,c
 12653  002E80  0E7D               	movlw	high _testdisplay
 12654  002E82  20F4               	addwfc	244,w,c
 12655  002E84  6EF7               	movwf	tblptrh,c
 12656  002E86                     	if	0	;There are less than 3 active tblptr bytes
 12657  002E86                     	endif
 12658  002E86  0008               	tblrd		*
 12659  002E88  CFF5 F068          	movff	tablat,_display	;volatile
 12660                           
 12661                           ;Display.c: 217: display[1] = testdisplay[testno][0];
 12662  002E8C  5196               	movf	_testno& (0+255),w,b
 12663  002E8E  0D03               	mullw	3
 12664  002E90  0EBC               	movlw	low _testdisplay
 12665  002E92  24F3               	addwf	243,w,c
 12666  002E94  6EF6               	movwf	tblptrl,c
 12667  002E96  0E7D               	movlw	high _testdisplay
 12668  002E98  20F4               	addwfc	244,w,c
 12669  002E9A  6EF7               	movwf	tblptrh,c
 12670  002E9C                     	if	0	;There are less than 3 active tblptr bytes
 12671  002E9C                     	endif
 12672  002E9C  0008               	tblrd		*
 12673  002E9E  CFF5 F069          	movff	tablat,_display+1	;volatile
 12674                           
 12675                           ;Display.c: 218: display[2] = testdisplay[testno][1];
 12676  002EA2  5196               	movf	_testno& (0+255),w,b
 12677  002EA4  0D03               	mullw	3
 12678  002EA6  0E01               	movlw	1
 12679  002EA8  26F3               	addwf	243,f,c
 12680  002EAA  0E00               	movlw	0
 12681  002EAC  22F4               	addwfc	244,f,c
 12682  002EAE  0EBC               	movlw	low _testdisplay
 12683  002EB0  24F3               	addwf	243,w,c
 12684  002EB2  6EF6               	movwf	tblptrl,c
 12685  002EB4  0E7D               	movlw	high _testdisplay
 12686  002EB6  20F4               	addwfc	244,w,c
 12687  002EB8  6EF7               	movwf	tblptrh,c
 12688  002EBA                     	if	0	;There are less than 3 active tblptr bytes
 12689  002EBA                     	endif
 12690  002EBA  0008               	tblrd		*
 12691  002EBC  CFF5 F06A          	movff	tablat,_display+2	;volatile
 12692  002EC0                     l8775:
 12693                           
 12694                           ; BSR set to: 0
 12695                           ;Display.c: 219: };Display.c: 220: if (testno == number - 1)
 12696  002EC0  5196               	movf	_testno& (0+255),w,b
 12697  002EC2  6FD4               	movwf	??_Display_test& (0+255),b
 12698  002EC4  6BD5               	clrf	(??_Display_test+1)& (0+255),b
 12699  002EC6  0EFF               	movlw	255
 12700  002EC8  6FD6               	movwf	(??_Display_test+2)& (0+255),b
 12701  002ECA  0EFF               	movlw	255
 12702  002ECC  6FD7               	movwf	(??_Display_test+3)& (0+255),b
 12703  002ECE  51DE               	movf	Display_test@number& (0+255),w,b
 12704  002ED0  6FD8               	movwf	(??_Display_test+4)& (0+255),b
 12705  002ED2  6BD9               	clrf	(??_Display_test+5)& (0+255),b
 12706  002ED4  51D6               	movf	(??_Display_test+2)& (0+255),w,b
 12707  002ED6  27D8               	addwf	(??_Display_test+4)& (0+255),f,b
 12708  002ED8  51D7               	movf	(??_Display_test+3)& (0+255),w,b
 12709  002EDA  23D9               	addwfc	(??_Display_test+5)& (0+255),f,b
 12710  002EDC  51D4               	movf	??_Display_test& (0+255),w,b
 12711  002EDE  19D8               	xorwf	(??_Display_test+4)& (0+255),w,b
 12712  002EE0  E103               	bnz	u10231
 12713  002EE2  51D5               	movf	(??_Display_test+1)& (0+255),w,b
 12714  002EE4  19D9               	xorwf	(??_Display_test+5)& (0+255),w,b
 12715  002EE6  A4D8               	btfss	status,2,c
 12716  002EE8                     u10231:
 12717  002EE8  D09D               	goto	l8809
 12718                           
 12719                           ; BSR set to: 0
 12720                           ;Display.c: 221: display_timer = 10;
 12721  002EEA  0E0A               	movlw	10
 12722  002EEC  6F97               	movwf	_display_timer& (0+255),b
 12723  002EEE  D09A               	goto	l8809
 12724  002EF0                     l8779:
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;Display.c: 223: else if(testno < number + 64)
 12728  002EF0  51DE               	movf	Display_test@number& (0+255),w,b
 12729  002EF2  6FD4               	movwf	??_Display_test& (0+255),b
 12730  002EF4  6BD5               	clrf	(??_Display_test+1)& (0+255),b
 12731  002EF6  0E40               	movlw	64
 12732  002EF8  27D4               	addwf	??_Display_test& (0+255),f,b
 12733  002EFA  0E00               	movlw	0
 12734  002EFC  23D5               	addwfc	(??_Display_test+1)& (0+255),f,b
 12735  002EFE  5196               	movf	_testno& (0+255),w,b
 12736  002F00  6FD6               	movwf	(??_Display_test+2)& (0+255),b
 12737  002F02  6BD7               	clrf	(??_Display_test+3)& (0+255),b
 12738  002F04  51D4               	movf	??_Display_test& (0+255),w,b
 12739  002F06  5DD6               	subwf	(??_Display_test+2)& (0+255),w,b
 12740  002F08  51D7               	movf	(??_Display_test+3)& (0+255),w,b
 12741  002F0A  0A80               	xorlw	128
 12742  002F0C  6FD8               	movwf	(??_Display_test+4)& (0+255),b
 12743  002F0E  51D5               	movf	(??_Display_test+1)& (0+255),w,b
 12744  002F10  0A80               	xorlw	128
 12745  002F12  59D8               	subwfb	(??_Display_test+4)& (0+255),w,b
 12746  002F14  B0D8               	btfsc	status,0,c
 12747  002F16  D032               	goto	l8793
 12748                           
 12749                           ; BSR set to: 0
 12750                           ;Display.c: 224: {;Display.c: 225: if(testno % 3)
 12751  002F18  0E03               	movlw	3
 12752  002F1A  6FC6               	movwf	___lbmod@divisor& (0+255),b
 12753  002F1C  5196               	movf	_testno& (0+255),w,b
 12754  002F1E  ECAB  F021         	call	___lbmod
 12755  002F22  0900               	iorlw	0
 12756  002F24  B4D8               	btfsc	status,2,c
 12757  002F26  D004               	goto	l8785
 12758                           
 12759                           ; BSR set to: 0
 12760                           ;Display.c: 226: {;Display.c: 227: display[0] = 86;
 12761  002F28  0E56               	movlw	86
 12762  002F2A  6F68               	movwf	_display& (0+255),b	;volatile
 12763                           
 12764                           ;Display.c: 228: scroll = 1;
 12765  002F2C  0E01               	movlw	1
 12766  002F2E  D003               	goto	L27
 12767  002F30                     l8785:
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;Display.c: 230: else;Display.c: 231: {;Display.c: 232: display[0] = 85;
 12771  002F30  0E55               	movlw	85
 12772  002F32  6F68               	movwf	_display& (0+255),b	;volatile
 12773                           
 12774                           ;Display.c: 233: scroll = 0;
 12775  002F34  0E00               	movlw	0
 12776  002F36                     L27:
 12777  002F36  6E25               	movwf	_scroll^0,c
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;Display.c: 234: };Display.c: 236: display[1] = ((testno - number) / 10);
 12781  002F38  51DE               	movf	Display_test@number& (0+255),w,b
 12782  002F3A  5D96               	subwf	_testno& (0+255),w,b
 12783  002F3C  6FC6               	movwf	___awdiv@dividend& (0+255),b
 12784  002F3E  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
 12785  002F40  A0D8               	btfss	status,0,c
 12786  002F42  07C7               	decf	(___awdiv@dividend+1)& (0+255),f,b
 12787  002F44  0E00               	movlw	0
 12788  002F46  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
 12789  002F48  0E0A               	movlw	10
 12790  002F4A  6FC8               	movwf	___awdiv@divisor& (0+255),b
 12791  002F4C  ECE5  F01F         	call	___awdiv	;wreg free
 12792  002F50  51C6               	movf	?___awdiv& (0+255),w,b
 12793  002F52  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12794                           
 12795                           ; BSR set to: 0
 12796                           ;Display.c: 237: display[2] = ((testno - number) % 10);
 12797  002F54  51DE               	movf	Display_test@number& (0+255),w,b
 12798  002F56  5D96               	subwf	_testno& (0+255),w,b
 12799  002F58  6FCE               	movwf	___awmod@dividend& (0+255),b
 12800  002F5A  6BCF               	clrf	(___awmod@dividend+1)& (0+255),b
 12801  002F5C  A0D8               	btfss	status,0,c
 12802  002F5E  07CF               	decf	(___awmod@dividend+1)& (0+255),f,b
 12803  002F60  0E00               	movlw	0
 12804  002F62  6FD1               	movwf	(___awmod@divisor+1)& (0+255),b
 12805  002F64  0E0A               	movlw	10
 12806  002F66  6FD0               	movwf	___awmod@divisor& (0+255),b
 12807  002F68  EC62  F020         	call	___awmod	;wreg free
 12808  002F6C  51CE               	movf	?___awmod& (0+255),w,b
 12809  002F6E  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 12810                           
 12811                           ;Display.c: 238: if(display[1] == 0)
 12812  002F70  5169               	movf	(_display+1)& (0+255),w,b	;volatile
 12813  002F72  A4D8               	btfss	status,2,c
 12814  002F74  D057               	goto	l8809
 12815  002F76                     u10260:
 12816                           
 12817                           ; BSR set to: 0
 12818                           ;Display.c: 239: display[1] = 85;
 12819  002F76  0E55               	movlw	85
 12820  002F78  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12821  002F7A  D054               	goto	l8809
 12822  002F7C                     l8793:
 12823                           
 12824                           ; BSR set to: 0
 12825                           ;Display.c: 241: else if(testno < number + 64 + 64)
 12826  002F7C  51DE               	movf	Display_test@number& (0+255),w,b
 12827  002F7E  6FD4               	movwf	??_Display_test& (0+255),b
 12828  002F80  6BD5               	clrf	(??_Display_test+1)& (0+255),b
 12829  002F82  0E80               	movlw	128
 12830  002F84  27D4               	addwf	??_Display_test& (0+255),f,b
 12831  002F86  0E00               	movlw	0
 12832  002F88  23D5               	addwfc	(??_Display_test+1)& (0+255),f,b
 12833  002F8A  5196               	movf	_testno& (0+255),w,b
 12834  002F8C  6FD6               	movwf	(??_Display_test+2)& (0+255),b
 12835  002F8E  6BD7               	clrf	(??_Display_test+3)& (0+255),b
 12836  002F90  51D4               	movf	??_Display_test& (0+255),w,b
 12837  002F92  5DD6               	subwf	(??_Display_test+2)& (0+255),w,b
 12838  002F94  51D7               	movf	(??_Display_test+3)& (0+255),w,b
 12839  002F96  0A80               	xorlw	128
 12840  002F98  6FD8               	movwf	(??_Display_test+4)& (0+255),b
 12841  002F9A  51D5               	movf	(??_Display_test+1)& (0+255),w,b
 12842  002F9C  0A80               	xorlw	128
 12843  002F9E  59D8               	subwfb	(??_Display_test+4)& (0+255),w,b
 12844  002FA0  B0D8               	btfsc	status,0,c
 12845  002FA2  D03E               	goto	l8807
 12846                           
 12847                           ; BSR set to: 0
 12848                           ;Display.c: 242: {;Display.c: 243: if(testno % 3)
 12849  002FA4  0E03               	movlw	3
 12850  002FA6  6FC6               	movwf	___lbmod@divisor& (0+255),b
 12851  002FA8  5196               	movf	_testno& (0+255),w,b
 12852  002FAA  ECAB  F021         	call	___lbmod
 12853  002FAE  0900               	iorlw	0
 12854  002FB0  B4D8               	btfsc	status,2,c
 12855  002FB2  D004               	goto	l8799
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;Display.c: 244: {;Display.c: 245: display[0] = 87;
 12859  002FB4  0E57               	movlw	87
 12860  002FB6  6F68               	movwf	_display& (0+255),b	;volatile
 12861                           
 12862                           ;Display.c: 246: scroll = 2;
 12863  002FB8  0E02               	movlw	2
 12864  002FBA  D003               	goto	L28
 12865  002FBC                     l8799:
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;Display.c: 248: else;Display.c: 249: {;Display.c: 250: display[0] = 85;
 12869  002FBC  0E55               	movlw	85
 12870  002FBE  6F68               	movwf	_display& (0+255),b	;volatile
 12871                           
 12872                           ;Display.c: 251: scroll = 0;
 12873  002FC0  0E00               	movlw	0
 12874  002FC2                     L28:
 12875  002FC2  6E25               	movwf	_scroll^0,c
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;Display.c: 252: };Display.c: 254: display[1] = ((64 - (testno - number - 64)) / 10);
 12879  002FC4  5196               	movf	_testno& (0+255),w,b
 12880  002FC6  C0DE  F0D4         	movff	Display_test@number,??_Display_test
 12881  002FCA  6BD5               	clrf	(??_Display_test+1)& (0+255),b
 12882  002FCC  5FD4               	subwf	??_Display_test& (0+255),f,b
 12883  002FCE  0E00               	movlw	0
 12884  002FD0  5BD5               	subwfb	(??_Display_test+1)& (0+255),f,b
 12885  002FD2  0E80               	movlw	128
 12886  002FD4  25D4               	addwf	??_Display_test& (0+255),w,b
 12887  002FD6  6FC6               	movwf	___awdiv@dividend& (0+255),b
 12888  002FD8  0E00               	movlw	0
 12889  002FDA  21D5               	addwfc	(??_Display_test+1)& (0+255),w,b
 12890  002FDC  6FC7               	movwf	(___awdiv@dividend+1)& (0+255),b
 12891  002FDE  0E00               	movlw	0
 12892  002FE0  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
 12893  002FE2  0E0A               	movlw	10
 12894  002FE4  6FC8               	movwf	___awdiv@divisor& (0+255),b
 12895  002FE6  ECE5  F01F         	call	___awdiv	;wreg free
 12896  002FEA  51C6               	movf	?___awdiv& (0+255),w,b
 12897  002FEC  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;Display.c: 255: display[2] = ((64 - (testno - number - 64)) % 10);
 12901  002FEE  5196               	movf	_testno& (0+255),w,b
 12902  002FF0  C0DE  F0D4         	movff	Display_test@number,??_Display_test
 12903  002FF4  6BD5               	clrf	(??_Display_test+1)& (0+255),b
 12904  002FF6  5FD4               	subwf	??_Display_test& (0+255),f,b
 12905  002FF8  0E00               	movlw	0
 12906  002FFA  5BD5               	subwfb	(??_Display_test+1)& (0+255),f,b
 12907  002FFC  0E80               	movlw	128
 12908  002FFE  25D4               	addwf	??_Display_test& (0+255),w,b
 12909  003000  6FCE               	movwf	___awmod@dividend& (0+255),b
 12910  003002  0E00               	movlw	0
 12911  003004  21D5               	addwfc	(??_Display_test+1)& (0+255),w,b
 12912  003006  6FCF               	movwf	(___awmod@dividend+1)& (0+255),b
 12913  003008  0E00               	movlw	0
 12914  00300A  6FD1               	movwf	(___awmod@divisor+1)& (0+255),b
 12915  00300C  0E0A               	movlw	10
 12916  00300E  6FD0               	movwf	___awmod@divisor& (0+255),b
 12917  003010  EC62  F020         	call	___awmod	;wreg free
 12918  003014  51CE               	movf	?___awmod& (0+255),w,b
 12919  003016  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 12920                           
 12921                           ;Display.c: 256: if(display[1] == 0)
 12922  003018  5169               	movf	(_display+1)& (0+255),w,b	;volatile
 12923  00301A  B4D8               	btfsc	status,2,c
 12924  00301C  D7AC               	goto	u10260
 12925  00301E  D002               	goto	l8809
 12926  003020                     l8807:
 12927                           
 12928                           ; BSR set to: 0
 12929                           ;Display.c: 259: else;Display.c: 260: testno = number - 1;
 12930  003020  05DE               	decf	Display_test@number& (0+255),w,b
 12931  003022  6F96               	movwf	_testno& (0+255),b
 12932  003024                     l8809:
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;Display.c: 261: testno++;
 12936  003024  2B96               	incf	_testno& (0+255),f,b
 12937                           
 12938                           ; BSR set to: 0
 12939                           ;Display.c: 262: flashcontent = display[0];
 12940  003026  C068  F024         	movff	_display,_flashcontent	;volatile
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;Display.c: 263: PIE1bits.TMR1IE = 1;
 12944  00302A  809D               	bsf	157,0,c	;volatile
 12945                           
 12946                           ; BSR set to: 0
 12947  00302C  0012               	return		;funcret
 12948  00302E                     __end_of_Display_test:
 12949                           	callstack 0
 12950                           
 12951 ;; *************** function ___lbmod *****************
 12952 ;; Defined at:
 12953 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbmod.c"
 12954 ;; Parameters:    Size  Location     Type
 12955 ;;  dividend        1    wreg     unsigned char 
 12956 ;;  divisor         1   10[BANK0 ] unsigned char 
 12957 ;; Auto vars:     Size  Location     Type
 12958 ;;  dividend        1   11[BANK0 ] unsigned char 
 12959 ;;  rem             1   13[BANK0 ] unsigned char 
 12960 ;;  counter         1   12[BANK0 ] unsigned char 
 12961 ;; Return value:  Size  Location     Type
 12962 ;;                  1    wreg      unsigned char 
 12963 ;; Registers used:
 12964 ;;		wreg, status,2, status,0
 12965 ;; Tracked objects:
 12966 ;;		On entry : 3E/1
 12967 ;;		On exit  : 3F/0
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12970 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12971 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12973 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12974 ;;Total ram usage:        4 bytes
 12975 ;; Hardware stack levels used:    1
 12976 ;; Hardware stack levels required when called:    3
 12977 ;; This function calls:
 12978 ;;		Nothing
 12979 ;; This function is called by:
 12980 ;;		_Display_test
 12981 ;;		_read_rx
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           	psect	text25
 12986  004356                     __ptext25:
 12987                           	callstack 0
 12988  004356                     ___lbmod:
 12989                           	callstack 26
 12990                           
 12991                           ; BSR set to: 0
 12992                           ;incstack = 0
 12993                           ;___lbmod@dividend stored from wreg
 12994  004356  0100               	movlb	0	; () banked
 12995  004358  6FC7               	movwf	___lbmod@dividend& (0+255),b
 12996  00435A  0E08               	movlw	8
 12997  00435C  0100               	movlb	0	; () banked
 12998  00435E  6FC8               	movwf	___lbmod@counter& (0+255),b
 12999  004360  0E00               	movlw	0
 13000  004362  6FC9               	movwf	___lbmod@rem& (0+255),b
 13001  004364                     l8719:
 13002                           
 13003                           ; BSR set to: 0
 13004  004364  90D8               	bcf	status,0,c
 13005  004366  35C7               	rlcf	___lbmod@dividend& (0+255),w,b
 13006  004368  35C9               	rlcf	___lbmod@rem& (0+255),w,b
 13007  00436A  6FC9               	movwf	___lbmod@rem& (0+255),b
 13008                           
 13009                           ; BSR set to: 0
 13010  00436C  90D8               	bcf	status,0,c
 13011  00436E  37C7               	rlcf	___lbmod@dividend& (0+255),f,b
 13012                           
 13013                           ; BSR set to: 0
 13014  004370  51C6               	movf	___lbmod@divisor& (0+255),w,b
 13015  004372  5DC9               	subwf	___lbmod@rem& (0+255),w,b
 13016  004374  A0D8               	btfss	status,0,c
 13017  004376  D002               	goto	l8727
 13018                           
 13019                           ; BSR set to: 0
 13020  004378  51C6               	movf	___lbmod@divisor& (0+255),w,b
 13021  00437A  5FC9               	subwf	___lbmod@rem& (0+255),f,b
 13022  00437C                     l8727:
 13023                           
 13024                           ; BSR set to: 0
 13025  00437C  2FC8               	decfsz	___lbmod@counter& (0+255),f,b
 13026  00437E  D7F2               	goto	l8719
 13027                           
 13028                           ; BSR set to: 0
 13029  004380  51C9               	movf	___lbmod@rem& (0+255),w,b
 13030                           
 13031                           ; BSR set to: 0
 13032  004382  0012               	return		;funcret
 13033  004384                     __end_of___lbmod:
 13034                           	callstack 0
 13035                           
 13036 ;; *************** function _SetNodeId *****************
 13037 ;; Defined at:
 13038 ;;		line 28 in file "../../src/Display.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;		None
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;		None
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  1    wreg      void 
 13045 ;; Registers used:
 13046 ;;		wreg, status,2, status,0, cstack
 13047 ;; Tracked objects:
 13048 ;;		On entry : 3F/0
 13049 ;;		On exit  : 3F/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13054 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13055 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13056 ;;Total ram usage:        4 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    4
 13059 ;; This function calls:
 13060 ;;		___awdiv
 13061 ;;		___awmod
 13062 ;; This function is called by:
 13063 ;;		_main
 13064 ;; This function uses a non-reentrant model
 13065 ;;
 13066                           
 13067                           	psect	text26
 13068  00384C                     __ptext26:
 13069                           	callstack 0
 13070  00384C                     _SetNodeId:
 13071                           	callstack 26
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;Display.c: 29: static BYTE buffer[3] = {0,0,0};;Display.c: 31: if ((disp_id != node_id)
      +                           || (setid_mode_old != setid_mode))
 13075                           
 13076                           ; BSR set to: 0
 13077                           ;incstack = 0
 13078  00384C  519D               	movf	_node_id& (0+255),w,b
 13079  00384E  199E               	xorwf	_disp_id& (0+255),w,b
 13080  003850  A4D8               	btfss	status,2,c
 13081  003852  D004               	goto	u11970
 13082                           
 13083                           ; BSR set to: 0
 13084  003854  519B               	movf	_setid_mode& (0+255),w,b
 13085  003856  199C               	xorwf	_setid_mode_old& (0+255),w,b
 13086  003858  B4D8               	btfsc	status,2,c
 13087  00385A  D06B               	goto	l9637
 13088  00385C                     u11970:
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;Display.c: 32: {;Display.c: 33: if ((setid_mode == 1) || (setid_mode == 4))
 13092  00385C  059B               	decf	_setid_mode& (0+255),w,b
 13093  00385E  B4D8               	btfsc	status,2,c
 13094  003860  D004               	goto	u11990
 13095                           
 13096                           ; BSR set to: 0
 13097  003862  0E04               	movlw	4
 13098  003864  199B               	xorwf	_setid_mode& (0+255),w,b
 13099  003866  A4D8               	btfss	status,2,c
 13100  003868  D050               	goto	l100
 13101  00386A                     u11990:
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;Display.c: 34: {;Display.c: 35: display[0] = 85;
 13105  00386A  0E55               	movlw	85
 13106  00386C  6F68               	movwf	_display& (0+255),b	;volatile
 13107                           
 13108                           ;Display.c: 36: display[3] = 0;
 13109  00386E  0E00               	movlw	0
 13110  003870  6F6B               	movwf	(_display+3)& (0+255),b	;volatile
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;Display.c: 37: if (node_id >= 0x10 && node_id < 0x10 + 110)
 13114  003872  0E0F               	movlw	15
 13115  003874  659D               	cpfsgt	_node_id& (0+255),b
 13116  003876  D044               	goto	l9621
 13117                           
 13118                           ; BSR set to: 0
 13119  003878  0E7E               	movlw	126
 13120  00387A  619D               	cpfslt	_node_id& (0+255),b
 13121  00387C  D041               	goto	l9621
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;Display.c: 38: {;Display.c: 39: display[1] = (((node_id - 0x10 + 1) / 10) % 10);
 13125  00387E  0E00               	movlw	0
 13126  003880  6FC9               	movwf	(___awdiv@divisor+1)& (0+255),b
 13127  003882  0E0A               	movlw	10
 13128  003884  6FC8               	movwf	___awdiv@divisor& (0+255),b
 13129  003886  0EF1               	movlw	241
 13130  003888  259D               	addwf	_node_id& (0+255),w,b
 13131  00388A  6FC6               	movwf	___awdiv@dividend& (0+255),b
 13132  00388C  6BC7               	clrf	(___awdiv@dividend+1)& (0+255),b
 13133  00388E  0EFF               	movlw	255
 13134  003890  23C7               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
 13135  003892  ECE5  F01F         	call	___awdiv	;wreg free
 13136  003896  C0C6  F0CE         	movff	?___awdiv,___awmod@dividend
 13137  00389A  C0C7  F0CF         	movff	?___awdiv+1,___awmod@dividend+1
 13138  00389E  0E00               	movlw	0
 13139  0038A0  6FD1               	movwf	(___awmod@divisor+1)& (0+255),b
 13140  0038A2  0E0A               	movlw	10
 13141  0038A4  6FD0               	movwf	___awmod@divisor& (0+255),b
 13142  0038A6  EC62  F020         	call	___awmod	;wreg free
 13143  0038AA  51CE               	movf	?___awmod& (0+255),w,b
 13144  0038AC  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 13145                           
 13146                           ;Display.c: 40: display[2] = ((node_id - 0x10 + 1) % 10);
 13147  0038AE  0EF1               	movlw	241
 13148  0038B0  259D               	addwf	_node_id& (0+255),w,b
 13149  0038B2  6FCE               	movwf	___awmod@dividend& (0+255),b
 13150  0038B4  6BCF               	clrf	(___awmod@dividend+1)& (0+255),b
 13151  0038B6  0EFF               	movlw	255
 13152  0038B8  23CF               	addwfc	(___awmod@dividend+1)& (0+255),f,b
 13153  0038BA  0E00               	movlw	0
 13154  0038BC  6FD1               	movwf	(___awmod@divisor+1)& (0+255),b
 13155  0038BE  0E0A               	movlw	10
 13156  0038C0  6FD0               	movwf	___awmod@divisor& (0+255),b
 13157  0038C2  EC62  F020         	call	___awmod	;wreg free
 13158  0038C6  51CE               	movf	?___awmod& (0+255),w,b
 13159  0038C8  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;Display.c: 41: if ((node_id - 0x10 + 1) >= 100)
 13163  0038CA  0EF1               	movlw	241
 13164  0038CC  6FD4               	movwf	??_SetNodeId& (0+255),b
 13165  0038CE  0EFF               	movlw	255
 13166  0038D0  6FD5               	movwf	(??_SetNodeId+1)& (0+255),b
 13167  0038D2  519D               	movf	_node_id& (0+255),w,b
 13168  0038D4  6FD6               	movwf	(??_SetNodeId+2)& (0+255),b
 13169  0038D6  6BD7               	clrf	(??_SetNodeId+3)& (0+255),b
 13170  0038D8  51D4               	movf	??_SetNodeId& (0+255),w,b
 13171  0038DA  27D6               	addwf	(??_SetNodeId+2)& (0+255),f,b
 13172  0038DC  51D5               	movf	(??_SetNodeId+1)& (0+255),w,b
 13173  0038DE  23D7               	addwfc	(??_SetNodeId+3)& (0+255),f,b
 13174  0038E0  BFD7               	btfsc	(??_SetNodeId+3)& (0+255),7,b
 13175  0038E2  D01D               	goto	l9627
 13176  0038E4  51D7               	movf	(??_SetNodeId+3)& (0+255),w,b
 13177  0038E6  E104               	bnz	u12020
 13178  0038E8  0E64               	movlw	100
 13179  0038EA  5DD6               	subwf	(??_SetNodeId+2)& (0+255),w,b
 13180  0038EC  A0D8               	btfss	status,0,c
 13181  0038EE  D017               	goto	l9627
 13182  0038F0                     u12020:
 13183                           
 13184                           ; BSR set to: 0
 13185                           ;Display.c: 42: {;Display.c: 43: if(hardware_version == 0)
 13186  0038F0  519A               	movf	_hardware_version& (0+255),w,b
 13187  0038F2  A4D8               	btfss	status,2,c
 13188  0038F4  D002               	goto	l9619
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;Display.c: 44: display[0] = 86;
 13192  0038F6  0E56               	movlw	86
 13193  0038F8  D001               	goto	L29
 13194  0038FA                     l9619:
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;Display.c: 45: else;Display.c: 46: display[0] = '1' - '0';
 13198  0038FA  0E01               	movlw	1
 13199  0038FC                     L29:
 13200  0038FC  6F68               	movwf	_display& (0+255),b	;volatile
 13201  0038FE  D00F               	goto	l9627
 13202  003900                     l9621:
 13203                           
 13204                           ; BSR set to: 0
 13205                           ;Display.c: 49: else;Display.c: 50: {;Display.c: 51: display[1] = 37;
 13206  003900  0E25               	movlw	37
 13207  003902  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 13208                           
 13209                           ;Display.c: 52: display[2] = 37;
 13210  003904  0E25               	movlw	37
 13211  003906  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 13212  003908  D00A               	goto	l9627
 13213  00390A                     l100:
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;Display.c: 55: else;Display.c: 56: {;Display.c: 57: display[0] = id_buff[0];
 13217  00390A  C06C  F068         	movff	_id_buff,_display	;volatile
 13218                           
 13219                           ; BSR set to: 0
 13220                           ;Display.c: 58: display[1] = id_buff[1] - '0';
 13221  00390E  516D               	movf	(_id_buff+1)& (0+255),w,b
 13222  003910  0FD0               	addlw	208
 13223  003912  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 13224                           
 13225                           ;Display.c: 59: display[2] = id_buff[2] - '0';
 13226  003914  516E               	movf	(_id_buff+2)& (0+255),w,b
 13227  003916  0FD0               	addlw	208
 13228  003918  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;Display.c: 60: display[3] = 0;
 13232  00391A  0E00               	movlw	0
 13233  00391C  6F6B               	movwf	(_display+3)& (0+255),b	;volatile
 13234  00391E                     l9627:
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;Display.c: 61: };Display.c: 62: disp_id = node_id;
 13238  00391E  C09D  F09E         	movff	_node_id,_disp_id
 13239                           
 13240                           ; BSR set to: 0
 13241                           ;Display.c: 63: setid_mode_old = setid_mode;
 13242  003922  C09B  F09C         	movff	_setid_mode,_setid_mode_old
 13243                           
 13244                           ; BSR set to: 0
 13245                           ;Display.c: 64: buffer[0] = display[0];
 13246  003926  C068  F073         	movff	_display,SetNodeId@buffer	;volatile
 13247                           
 13248                           ; BSR set to: 0
 13249                           ;Display.c: 65: buffer[1] = display[1];
 13250  00392A  C069  F074         	movff	_display+1,SetNodeId@buffer+1	;volatile
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;Display.c: 66: buffer[2] = display[2];
 13254  00392E  C06A  F075         	movff	_display+2,SetNodeId@buffer+2	;volatile
 13255  003932                     l9637:
 13256                           
 13257                           ; BSR set to: 0
 13258                           ;Display.c: 67: };Display.c: 69: if (!flashtimer)
 13259  003932  5199               	movf	_flashtimer& (0+255),w,b
 13260  003934  A4D8               	btfss	status,2,c
 13261  003936  0012               	return	
 13262                           
 13263                           ; BSR set to: 0
 13264                           ;Display.c: 70: {;Display.c: 71: INTCONbits.TMR0IE = 0;
 13265  003938  9AF2               	bcf	242,5,c	;volatile
 13266                           
 13267                           ; BSR set to: 0
 13268                           ;Display.c: 72: flashtimer = 3;
 13269  00393A  0E03               	movlw	3
 13270  00393C  6F99               	movwf	_flashtimer& (0+255),b
 13271                           
 13272                           ; BSR set to: 0
 13273                           ;Display.c: 73: if ((display[0] != 85) || (display[1] != 85) || (display[2] != 85))
 13274  00393E  0E55               	movlw	85
 13275  003940  1968               	xorwf	_display& (0+255),w,b	;volatile
 13276  003942  A4D8               	btfss	status,2,c
 13277  003944  D008               	goto	u12070
 13278                           
 13279                           ; BSR set to: 0
 13280  003946  0E55               	movlw	85
 13281  003948  1969               	xorwf	(_display+1)& (0+255),w,b	;volatile
 13282  00394A  A4D8               	btfss	status,2,c
 13283  00394C  D004               	goto	u12070
 13284                           
 13285                           ; BSR set to: 0
 13286  00394E  0E55               	movlw	85
 13287  003950  196A               	xorwf	(_display+2)& (0+255),w,b	;volatile
 13288  003952  B4D8               	btfsc	status,2,c
 13289  003954  D007               	goto	l110
 13290  003956                     u12070:
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;Display.c: 74: {;Display.c: 75: display[0] = 85;
 13294  003956  0E55               	movlw	85
 13295  003958  6F68               	movwf	_display& (0+255),b	;volatile
 13296                           
 13297                           ;Display.c: 76: display[1] = 85;
 13298  00395A  0E55               	movlw	85
 13299  00395C  6F69               	movwf	(_display+1)& (0+255),b	;volatile
 13300                           
 13301                           ;Display.c: 77: display[2] = 85;
 13302  00395E  0E55               	movlw	85
 13303  003960  6F6A               	movwf	(_display+2)& (0+255),b	;volatile
 13304  003962  D006               	goto	l9651
 13305  003964                     l110:
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;Display.c: 80: else;Display.c: 81: {;Display.c: 82: display[0] = buffer[0];
 13309  003964  C073  F068         	movff	SetNodeId@buffer,_display	;volatile
 13310                           
 13311                           ;Display.c: 83: display[1] = buffer[1];
 13312  003968  C074  F069         	movff	SetNodeId@buffer+1,_display+1	;volatile
 13313                           
 13314                           ;Display.c: 84: display[2] = buffer[2];
 13315  00396C  C075  F06A         	movff	SetNodeId@buffer+2,_display+2	;volatile
 13316  003970                     l9651:
 13317                           
 13318                           ; BSR set to: 0
 13319                           ;Display.c: 85: display[3] = 0;
 13320  003970  0E00               	movlw	0
 13321  003972  6F6B               	movwf	(_display+3)& (0+255),b	;volatile
 13322                           
 13323                           ; BSR set to: 0
 13324                           ;Display.c: 86: };Display.c: 87: INTCONbits.TMR0IE = 1;
 13325  003974  8AF2               	bsf	242,5,c	;volatile
 13326                           
 13327                           ; BSR set to: 0
 13328  003976  0012               	return		;funcret
 13329  003978                     __end_of_SetNodeId:
 13330                           	callstack 0
 13331                           
 13332 ;; *************** function ___awmod *****************
 13333 ;; Defined at:
 13334 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
 13335 ;; Parameters:    Size  Location     Type
 13336 ;;  dividend        2   18[BANK0 ] int 
 13337 ;;  divisor         2   20[BANK0 ] int 
 13338 ;; Auto vars:     Size  Location     Type
 13339 ;;  sign            1   23[BANK0 ] unsigned char 
 13340 ;;  counter         1   22[BANK0 ] unsigned char 
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  2   18[BANK0 ] int 
 13343 ;; Registers used:
 13344 ;;		wreg, status,2, status,0
 13345 ;; Tracked objects:
 13346 ;;		On entry : 3F/0
 13347 ;;		On exit  : 3F/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13350 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13351 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13353 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13354 ;;Total ram usage:        6 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; Hardware stack levels required when called:    3
 13357 ;; This function calls:
 13358 ;;		Nothing
 13359 ;; This function is called by:
 13360 ;;		_SetNodeId
 13361 ;;		_Display_test
 13362 ;;		_read_rx
 13363 ;; This function uses a non-reentrant model
 13364 ;;
 13365                           
 13366                           	psect	text27
 13367  0040C4                     __ptext27:
 13368                           	callstack 0
 13369  0040C4                     ___awmod:
 13370                           	callstack 26
 13371                           
 13372                           ; BSR set to: 0
 13373                           
 13374                           ; BSR set to: 0
 13375                           ;incstack = 0
 13376  0040C4  0E00               	movlw	0
 13377  0040C6  6FD3               	movwf	___awmod@sign& (0+255),b
 13378                           
 13379                           ; BSR set to: 0
 13380  0040C8  AFCF               	btfss	(___awmod@dividend+1)& (0+255),7,b
 13381  0040CA  D006               	goto	l8689
 13382                           
 13383                           ; BSR set to: 0
 13384  0040CC  6DCE               	negf	___awmod@dividend& (0+255),b
 13385  0040CE  1FCF               	comf	(___awmod@dividend+1)& (0+255),f,b
 13386  0040D0  B0D8               	btfsc	status,0,c
 13387  0040D2  2BCF               	incf	(___awmod@dividend+1)& (0+255),f,b
 13388                           
 13389                           ; BSR set to: 0
 13390  0040D4  0E01               	movlw	1
 13391  0040D6  6FD3               	movwf	___awmod@sign& (0+255),b
 13392  0040D8                     l8689:
 13393                           
 13394                           ; BSR set to: 0
 13395  0040D8  AFD1               	btfss	(___awmod@divisor+1)& (0+255),7,b
 13396  0040DA  D004               	goto	l8693
 13397                           
 13398                           ; BSR set to: 0
 13399  0040DC  6DD0               	negf	___awmod@divisor& (0+255),b
 13400  0040DE  1FD1               	comf	(___awmod@divisor+1)& (0+255),f,b
 13401  0040E0  B0D8               	btfsc	status,0,c
 13402  0040E2  2BD1               	incf	(___awmod@divisor+1)& (0+255),f,b
 13403  0040E4                     l8693:
 13404                           
 13405                           ; BSR set to: 0
 13406  0040E4  51D0               	movf	___awmod@divisor& (0+255),w,b
 13407  0040E6  11D1               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 13408  0040E8  B4D8               	btfsc	status,2,c
 13409  0040EA  D018               	goto	l8709
 13410                           
 13411                           ; BSR set to: 0
 13412  0040EC  0E01               	movlw	1
 13413  0040EE  6FD2               	movwf	___awmod@counter& (0+255),b
 13414  0040F0  D004               	goto	l8699
 13415  0040F2                     l8697:
 13416                           
 13417                           ; BSR set to: 0
 13418  0040F2  90D8               	bcf	status,0,c
 13419  0040F4  37D0               	rlcf	___awmod@divisor& (0+255),f,b
 13420  0040F6  37D1               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 13421  0040F8  2BD2               	incf	___awmod@counter& (0+255),f,b
 13422  0040FA                     l8699:
 13423                           
 13424                           ; BSR set to: 0
 13425  0040FA  AFD1               	btfss	(___awmod@divisor+1)& (0+255),7,b
 13426  0040FC  D7FA               	goto	l8697
 13427  0040FE                     u10120:
 13428                           
 13429                           ; BSR set to: 0
 13430  0040FE  51D0               	movf	___awmod@divisor& (0+255),w,b
 13431  004100  5DCE               	subwf	___awmod@dividend& (0+255),w,b
 13432  004102  51D1               	movf	(___awmod@divisor+1)& (0+255),w,b
 13433  004104  59CF               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 13434  004106  A0D8               	btfss	status,0,c
 13435  004108  D004               	goto	l8705
 13436                           
 13437                           ; BSR set to: 0
 13438  00410A  51D0               	movf	___awmod@divisor& (0+255),w,b
 13439  00410C  5FCE               	subwf	___awmod@dividend& (0+255),f,b
 13440  00410E  51D1               	movf	(___awmod@divisor+1)& (0+255),w,b
 13441  004110  5BCF               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 13442  004112                     l8705:
 13443                           
 13444                           ; BSR set to: 0
 13445  004112  90D8               	bcf	status,0,c
 13446  004114  33D1               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 13447  004116  33D0               	rrcf	___awmod@divisor& (0+255),f,b
 13448                           
 13449                           ; BSR set to: 0
 13450  004118  2FD2               	decfsz	___awmod@counter& (0+255),f,b
 13451  00411A  D7F1               	goto	u10120
 13452  00411C                     l8709:
 13453                           
 13454                           ; BSR set to: 0
 13455  00411C  51D3               	movf	___awmod@sign& (0+255),w,b
 13456  00411E  B4D8               	btfsc	status,2,c
 13457  004120  D004               	goto	l8713
 13458                           
 13459                           ; BSR set to: 0
 13460  004122  6DCE               	negf	___awmod@dividend& (0+255),b
 13461  004124  1FCF               	comf	(___awmod@dividend+1)& (0+255),f,b
 13462  004126  B0D8               	btfsc	status,0,c
 13463  004128  2BCF               	incf	(___awmod@dividend+1)& (0+255),f,b
 13464  00412A                     l8713:
 13465                           
 13466                           ; BSR set to: 0
 13467  00412A  C0CE  F0CE         	movff	___awmod@dividend,?___awmod
 13468  00412E  C0CF  F0CF         	movff	___awmod@dividend+1,?___awmod+1
 13469                           
 13470                           ; BSR set to: 0
 13471  004132  0012               	return		;funcret
 13472  004134                     __end_of___awmod:
 13473                           	callstack 0
 13474                           
 13475 ;; *************** function ___awdiv *****************
 13476 ;; Defined at:
 13477 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
 13478 ;; Parameters:    Size  Location     Type
 13479 ;;  dividend        2   10[BANK0 ] int 
 13480 ;;  divisor         2   12[BANK0 ] int 
 13481 ;; Auto vars:     Size  Location     Type
 13482 ;;  quotient        2   16[BANK0 ] int 
 13483 ;;  sign            1   15[BANK0 ] unsigned char 
 13484 ;;  counter         1   14[BANK0 ] unsigned char 
 13485 ;; Return value:  Size  Location     Type
 13486 ;;                  2   10[BANK0 ] int 
 13487 ;; Registers used:
 13488 ;;		wreg, status,2, status,0
 13489 ;; Tracked objects:
 13490 ;;		On entry : 3F/0
 13491 ;;		On exit  : 3F/0
 13492 ;;		Unchanged: 0/0
 13493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13494 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13495 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13497 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13498 ;;Total ram usage:        8 bytes
 13499 ;; Hardware stack levels used:    1
 13500 ;; Hardware stack levels required when called:    3
 13501 ;; This function calls:
 13502 ;;		Nothing
 13503 ;; This function is called by:
 13504 ;;		_SetNodeId
 13505 ;;		_Display_test
 13506 ;;		_read_rx
 13507 ;; This function uses a non-reentrant model
 13508 ;;
 13509                           
 13510                           	psect	text28
 13511  003FCA                     __ptext28:
 13512                           	callstack 0
 13513  003FCA                     ___awdiv:
 13514                           	callstack 26
 13515                           
 13516                           ; BSR set to: 0
 13517                           
 13518                           ; BSR set to: 0
 13519                           ;incstack = 0
 13520  003FCA  0E00               	movlw	0
 13521  003FCC  6FCB               	movwf	___awdiv@sign& (0+255),b
 13522                           
 13523                           ; BSR set to: 0
 13524  003FCE  AFC9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 13525  003FD0  D006               	goto	l8645
 13526                           
 13527                           ; BSR set to: 0
 13528  003FD2  6DC8               	negf	___awdiv@divisor& (0+255),b
 13529  003FD4  1FC9               	comf	(___awdiv@divisor+1)& (0+255),f,b
 13530  003FD6  B0D8               	btfsc	status,0,c
 13531  003FD8  2BC9               	incf	(___awdiv@divisor+1)& (0+255),f,b
 13532                           
 13533                           ; BSR set to: 0
 13534  003FDA  0E01               	movlw	1
 13535  003FDC  6FCB               	movwf	___awdiv@sign& (0+255),b
 13536  003FDE                     l8645:
 13537                           
 13538                           ; BSR set to: 0
 13539  003FDE  AFC7               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 13540  003FE0  D006               	goto	l8651
 13541                           
 13542                           ; BSR set to: 0
 13543  003FE2  6DC6               	negf	___awdiv@dividend& (0+255),b
 13544  003FE4  1FC7               	comf	(___awdiv@dividend+1)& (0+255),f,b
 13545  003FE6  B0D8               	btfsc	status,0,c
 13546  003FE8  2BC7               	incf	(___awdiv@dividend+1)& (0+255),f,b
 13547                           
 13548                           ; BSR set to: 0
 13549  003FEA  0E01               	movlw	1
 13550  003FEC  1BCB               	xorwf	___awdiv@sign& (0+255),f,b
 13551  003FEE                     l8651:
 13552                           
 13553                           ; BSR set to: 0
 13554  003FEE  0E00               	movlw	0
 13555  003FF0  6FCD               	movwf	(___awdiv@quotient+1)& (0+255),b
 13556  003FF2  0E00               	movlw	0
 13557  003FF4  6FCC               	movwf	___awdiv@quotient& (0+255),b
 13558                           
 13559                           ; BSR set to: 0
 13560  003FF6  51C8               	movf	___awdiv@divisor& (0+255),w,b
 13561  003FF8  11C9               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 13562  003FFA  B4D8               	btfsc	status,2,c
 13563  003FFC  D01C               	goto	l8673
 13564                           
 13565                           ; BSR set to: 0
 13566  003FFE  0E01               	movlw	1
 13567  004000  6FCA               	movwf	___awdiv@counter& (0+255),b
 13568  004002  D004               	goto	l8659
 13569  004004                     l8657:
 13570                           
 13571                           ; BSR set to: 0
 13572  004004  90D8               	bcf	status,0,c
 13573  004006  37C8               	rlcf	___awdiv@divisor& (0+255),f,b
 13574  004008  37C9               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 13575  00400A  2BCA               	incf	___awdiv@counter& (0+255),f,b
 13576  00400C                     l8659:
 13577                           
 13578                           ; BSR set to: 0
 13579  00400C  AFC9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 13580  00400E  D7FA               	goto	l8657
 13581  004010                     u10060:
 13582                           
 13583                           ; BSR set to: 0
 13584  004010  90D8               	bcf	status,0,c
 13585  004012  37CC               	rlcf	___awdiv@quotient& (0+255),f,b
 13586  004014  37CD               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 13587                           
 13588                           ; BSR set to: 0
 13589  004016  51C8               	movf	___awdiv@divisor& (0+255),w,b
 13590  004018  5DC6               	subwf	___awdiv@dividend& (0+255),w,b
 13591  00401A  51C9               	movf	(___awdiv@divisor+1)& (0+255),w,b
 13592  00401C  59C7               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 13593  00401E  A0D8               	btfss	status,0,c
 13594  004020  D005               	goto	l8669
 13595                           
 13596                           ; BSR set to: 0
 13597  004022  51C8               	movf	___awdiv@divisor& (0+255),w,b
 13598  004024  5FC6               	subwf	___awdiv@dividend& (0+255),f,b
 13599  004026  51C9               	movf	(___awdiv@divisor+1)& (0+255),w,b
 13600  004028  5BC7               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 13601                           
 13602                           ; BSR set to: 0
 13603  00402A  81CC               	bsf	___awdiv@quotient& (0+255),0,b
 13604  00402C                     l8669:
 13605                           
 13606                           ; BSR set to: 0
 13607  00402C  90D8               	bcf	status,0,c
 13608  00402E  33C9               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 13609  004030  33C8               	rrcf	___awdiv@divisor& (0+255),f,b
 13610                           
 13611                           ; BSR set to: 0
 13612  004032  2FCA               	decfsz	___awdiv@counter& (0+255),f,b
 13613  004034  D7ED               	goto	u10060
 13614  004036                     l8673:
 13615                           
 13616                           ; BSR set to: 0
 13617  004036  51CB               	movf	___awdiv@sign& (0+255),w,b
 13618  004038  B4D8               	btfsc	status,2,c
 13619  00403A  D004               	goto	l8677
 13620                           
 13621                           ; BSR set to: 0
 13622  00403C  6DCC               	negf	___awdiv@quotient& (0+255),b
 13623  00403E  1FCD               	comf	(___awdiv@quotient+1)& (0+255),f,b
 13624  004040  B0D8               	btfsc	status,0,c
 13625  004042  2BCD               	incf	(___awdiv@quotient+1)& (0+255),f,b
 13626  004044                     l8677:
 13627                           
 13628                           ; BSR set to: 0
 13629  004044  C0CC  F0C6         	movff	___awdiv@quotient,?___awdiv
 13630  004048  C0CD  F0C7         	movff	___awdiv@quotient+1,?___awdiv+1
 13631                           
 13632                           ; BSR set to: 0
 13633  00404C  0012               	return		;funcret
 13634  00404E                     __end_of___awdiv:
 13635                           	callstack 0
 13636                           
 13637 ;; *************** function _KeyScan *****************
 13638 ;; Defined at:
 13639 ;;		line 266 in file "../../src/Display.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;		None
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;  i               1   17[BANK0 ] unsigned char 
 13644 ;;  key_code        1   16[BANK0 ] unsigned char 
 13645 ;;  value           1   15[BANK0 ] unsigned char 
 13646 ;;  j               1   14[BANK0 ] unsigned char 
 13647 ;; Return value:  Size  Location     Type
 13648 ;;                  1    wreg      void 
 13649 ;; Registers used:
 13650 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13651 ;; Tracked objects:
 13652 ;;		On entry : 3F/0
 13653 ;;		On exit  : 3F/0
 13654 ;;		Unchanged: 0/0
 13655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13657 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13658 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13659 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13660 ;;Total ram usage:        8 bytes
 13661 ;; Hardware stack levels used:    1
 13662 ;; Hardware stack levels required when called:    3
 13663 ;; This function calls:
 13664 ;;		Nothing
 13665 ;; This function is called by:
 13666 ;;		_main
 13667 ;; This function uses a non-reentrant model
 13668 ;;
 13669                           
 13670                           	psect	text29
 13671  003D0E                     __ptext29:
 13672                           	callstack 0
 13673  003D0E                     _KeyScan:
 13674                           	callstack 27
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;Display.c: 267: BYTE i, j = 0x00;
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;incstack = 0
 13681  003D0E  0E00               	movlw	0
 13682  003D10  6FCA               	movwf	KeyScan@j& (0+255),b
 13683                           
 13684                           ; BSR set to: 0
 13685                           ;Display.c: 270: i = PORTC & 0x13;
 13686  003D12  5082               	movf	130,w,c	;volatile
 13687  003D14  0B13               	andlw	19
 13688  003D16  6FCD               	movwf	KeyScan@i& (0+255),b
 13689                           
 13690                           ; BSR set to: 0
 13691                           ;Display.c: 271: key_code = (i >> 2) | (i & 0x03);
 13692  003D18  C0CD  F0C6         	movff	KeyScan@i,??_KeyScan
 13693  003D1C  0E03               	movlw	3
 13694  003D1E  17C6               	andwf	??_KeyScan& (0+255),f,b
 13695  003D20  41CD               	rrncf	KeyScan@i& (0+255),w,b
 13696  003D22  42E8               	rrncf	wreg,f,c
 13697  003D24  0B3F               	andlw	63
 13698  003D26  11C6               	iorwf	??_KeyScan& (0+255),w,b
 13699  003D28  6FCC               	movwf	KeyScan@key_code& (0+255),b
 13700                           
 13701                           ;Display.c: 272: if(!key_code)
 13702  003D2A  51CC               	movf	KeyScan@key_code& (0+255),w,b
 13703  003D2C  A4D8               	btfss	status,2,c
 13704  003D2E  D009               	goto	l169
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;Display.c: 273: {;Display.c: 274: mKeyValue_Back = 0xAA;
 13708  003D30  0EAA               	movlw	170
 13709  003D32  6E23               	movwf	_mKeyValue_Back^0,c
 13710                           
 13711                           ; BSR set to: 0
 13712                           ;Display.c: 275: bKey_Fg.KeyRepeat = bKey_Fg.KeyRepeatEn = bKey_Fg.LongKeyEn = bKey_Fg.K
      +                          eyAnswer = 0;
 13713  003D34  9822               	bcf	_bKey_Fg^0,4,c
 13714  003D36  9622               	bcf	_bKey_Fg^0,3,c
 13715  003D38  9C22               	bcf	_bKey_Fg^0,6,c
 13716  003D3A  9A22               	bcf	_bKey_Fg^0,5,c
 13717                           
 13718                           ;Display.c: 276: mLongKeyTime = 0x00;
 13719  003D3C  0E00               	movlw	0
 13720  003D3E  6E21               	movwf	_mLongKeyTime^0,c
 13721                           
 13722                           ;Display.c: 277: }
 13723  003D40  0012               	return	
 13724  003D42                     l169:
 13725                           
 13726                           ; BSR set to: 0
 13727                           ;Display.c: 278: else;Display.c: 279: {;Display.c: 280: value = key_code;
 13728  003D42  C0CC  F0CB         	movff	KeyScan@key_code,KeyScan@value
 13729                           
 13730                           ; BSR set to: 0
 13731                           ;Display.c: 281: for(i=0; i<3; i++)
 13732  003D46  0E00               	movlw	0
 13733  003D48  6FCD               	movwf	KeyScan@i& (0+255),b
 13734  003D4A                     l171:
 13735                           
 13736                           ; BSR set to: 0
 13737                           ;Display.c: 282: {;Display.c: 283: if(value & 0X01)
 13738  003D4A  B1CB               	btfsc	KeyScan@value& (0+255),0,b
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;Display.c: 284: ++j;
 13742  003D4C  2BCA               	incf	KeyScan@j& (0+255),f,b
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;Display.c: 285: value >>= 1;
 13746  003D4E  90D8               	bcf	status,0,c
 13747  003D50  33CB               	rrcf	KeyScan@value& (0+255),f,b
 13748                           
 13749                           ; BSR set to: 0
 13750  003D52  2BCD               	incf	KeyScan@i& (0+255),f,b
 13751  003D54  0E02               	movlw	2
 13752  003D56  65CD               	cpfsgt	KeyScan@i& (0+255),b
 13753  003D58  D7F8               	goto	l171
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;Display.c: 286: };Display.c: 287: if(j > 3)
 13757  003D5A  0E03               	movlw	3
 13758  003D5C  65CA               	cpfsgt	KeyScan@j& (0+255),b
 13759  003D5E  D002               	goto	l9745
 13760                           
 13761                           ; BSR set to: 0
 13762                           ;Display.c: 288: {;Display.c: 289: bKey_Fg.KeyTrue = 0;
 13763  003D60  9222               	bcf	_bKey_Fg^0,1,c
 13764                           
 13765                           ;Display.c: 290: return;
 13766  003D62  0012               	return	
 13767  003D64                     l9745:
 13768                           
 13769                           ; BSR set to: 0
 13770                           ;Display.c: 291: };Display.c: 292: for( i=0; i<6; i++ )
 13771  003D64  0E00               	movlw	0
 13772  003D66  6FCD               	movwf	KeyScan@i& (0+255),b
 13773  003D68                     l9751:
 13774                           
 13775                           ; BSR set to: 0
 13776                           ;Display.c: 293: {;Display.c: 294: if( key_code == 0xAA )
 13777  003D68  0EAA               	movlw	170
 13778  003D6A  19CC               	xorwf	KeyScan@key_code& (0+255),w,b
 13779  003D6C  B4D8               	btfsc	status,2,c
 13780  003D6E  0012               	return	
 13781                           
 13782                           ; BSR set to: 0
 13783                           ;Display.c: 296: if( key_code == tKeyCode[i] )
 13784  003D70  0EE5               	movlw	low _tKeyCode
 13785  003D72  25CD               	addwf	KeyScan@i& (0+255),w,b
 13786  003D74  6EF6               	movwf	tblptrl,c
 13787  003D76  6AF7               	clrf	tblptrh,c
 13788  003D78  0E7F               	movlw	high _tKeyCode
 13789  003D7A  22F7               	addwfc	tblptrh,f,c
 13790  003D7C                     	if	0	;There are less than 3 active tblptr bytes
 13791  003D7C                     	endif
 13792  003D7C  0008               	tblrd		*
 13793  003D7E  50F5               	movf	tablat,w,c
 13794  003D80  19CC               	xorwf	KeyScan@key_code& (0+255),w,b
 13795  003D82  B4D8               	btfsc	status,2,c
 13796  003D84  D004               	goto	u12270
 13797                           
 13798                           ; BSR set to: 0
 13799  003D86  2BCD               	incf	KeyScan@i& (0+255),f,b
 13800                           
 13801                           ; BSR set to: 0
 13802  003D88  0E05               	movlw	5
 13803  003D8A  65CD               	cpfsgt	KeyScan@i& (0+255),b
 13804  003D8C  D7ED               	goto	l9751
 13805  003D8E                     u12270:
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;Display.c: 298: };Display.c: 300: if( mKeyValue != i+1)
 13809  003D8E  5020               	movf	_mKeyValue^0,w,c
 13810  003D90  6FC6               	movwf	??_KeyScan& (0+255),b
 13811  003D92  6BC7               	clrf	(??_KeyScan+1)& (0+255),b
 13812  003D94  51CD               	movf	KeyScan@i& (0+255),w,b
 13813  003D96  6FC8               	movwf	(??_KeyScan+2)& (0+255),b
 13814  003D98  6BC9               	clrf	(??_KeyScan+3)& (0+255),b
 13815  003D9A  0E01               	movlw	1
 13816  003D9C  27C8               	addwf	(??_KeyScan+2)& (0+255),f,b
 13817  003D9E  0E00               	movlw	0
 13818  003DA0  23C9               	addwfc	(??_KeyScan+3)& (0+255),f,b
 13819  003DA2  51C6               	movf	??_KeyScan& (0+255),w,b
 13820  003DA4  19C8               	xorwf	(??_KeyScan+2)& (0+255),w,b
 13821  003DA6  E104               	bnz	u12280
 13822  003DA8  51C7               	movf	(??_KeyScan+1)& (0+255),w,b
 13823  003DAA  19C9               	xorwf	(??_KeyScan+3)& (0+255),w,b
 13824  003DAC  B4D8               	btfsc	status,2,c
 13825  003DAE  D003               	goto	l9769
 13826  003DB0                     u12280:
 13827                           
 13828                           ; BSR set to: 0
 13829                           ;Display.c: 301: {;Display.c: 302: mKeyValue = i + 1;
 13830  003DB0  29CD               	incf	KeyScan@i& (0+255),w,b
 13831  003DB2  6E20               	movwf	_mKeyValue^0,c
 13832  003DB4  0012               	return	
 13833  003DB6                     l9769:
 13834                           
 13835                           ; BSR set to: 0
 13836                           ;Display.c: 304: };Display.c: 306: if( mKeyValue != mKeyValue_Back )
 13837  003DB6  5023               	movf	_mKeyValue_Back^0,w,c
 13838  003DB8  1820               	xorwf	_mKeyValue^0,w,c
 13839  003DBA  B4D8               	btfsc	status,2,c
 13840  003DBC  D007               	goto	l9783
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;Display.c: 307: {;Display.c: 308: mKeyValue_Back = mKeyValue;
 13844  003DBE  C020  F023         	movff	_mKeyValue,_mKeyValue_Back
 13845                           
 13846                           ; BSR set to: 0
 13847                           ;Display.c: 310: mLongKeyTime = 30;
 13848  003DC2  0E1E               	movlw	30
 13849  003DC4  6E21               	movwf	_mLongKeyTime^0,c
 13850                           
 13851                           ; BSR set to: 0
 13852                           ;Display.c: 314: bKey_Fg.KeyTrue = 1;
 13853  003DC6  8222               	bsf	_bKey_Fg^0,1,c
 13854                           
 13855                           ; BSR set to: 0
 13856                           ;Display.c: 315: bKey_Fg.KeyRepeat = bKey_Fg.KeyRepeatEn = 0;
 13857  003DC8  9C22               	bcf	_bKey_Fg^0,6,c
 13858  003DCA  9A22               	bcf	_bKey_Fg^0,5,c
 13859  003DCC                     l9783:
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;Display.c: 316: };Display.c: 317: if(mKeyValue == KEYVALUE_SYSSET)
 13863  003DCC  0E03               	movlw	3
 13864  003DCE  1820               	xorwf	_mKeyValue^0,w,c
 13865  003DD0  A4D8               	btfss	status,2,c
 13866  003DD2  0012               	return	
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;Display.c: 318: {;Display.c: 319: if( bKey_Fg.LongKeyEn )
 13870  003DD4  A622               	btfss	_bKey_Fg^0,3,c
 13871  003DD6  0012               	return	
 13872                           
 13873                           ; BSR set to: 0
 13874                           ;Display.c: 320: {;Display.c: 321: bKey_Fg.LKeyScanEnd = 0;
 13875  003DD8  9422               	bcf	_bKey_Fg^0,2,c
 13876                           
 13877                           ;Display.c: 322: bKey_Fg.KeyTrue = 1;
 13878  003DDA  8222               	bsf	_bKey_Fg^0,1,c
 13879                           
 13880                           ; BSR set to: 0
 13881  003DDC  0012               	return		;funcret
 13882  003DDE                     __end_of_KeyScan:
 13883                           	callstack 0
 13884                           
 13885 ;; *************** function _KeyProg *****************
 13886 ;; Defined at:
 13887 ;;		line 328 in file "../../src/Display.c"
 13888 ;; Parameters:    Size  Location     Type
 13889 ;;  value           1    wreg     const unsigned char 
 13890 ;; Auto vars:     Size  Location     Type
 13891 ;;  value           1   21[BANK0 ] const unsigned char 
 13892 ;; Return value:  Size  Location     Type
 13893 ;;                  1    wreg      void 
 13894 ;; Registers used:
 13895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13896 ;; Tracked objects:
 13897 ;;		On entry : 3F/0
 13898 ;;		On exit  : 0/0
 13899 ;;		Unchanged: 0/0
 13900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13904 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13905 ;;Total ram usage:        1 bytes
 13906 ;; Hardware stack levels used:    1
 13907 ;; Hardware stack levels required when called:    5
 13908 ;; This function calls:
 13909 ;;		_lss_response
 13910 ;;		_write_eeprom
 13911 ;; This function is called by:
 13912 ;;		_main
 13913 ;; This function uses a non-reentrant model
 13914 ;;
 13915                           
 13916                           	psect	text30
 13917  0035DE                     __ptext30:
 13918                           	callstack 0
 13919  0035DE                     _KeyProg:
 13920                           	callstack 25
 13921                           
 13922                           ; BSR set to: 0
 13923                           ;incstack = 0
 13924                           ;KeyProg@value stored from wreg
 13925  0035DE  6FD1               	movwf	KeyProg@value& (0+255),b
 13926                           
 13927                           ;Display.c: 330: if(!bKey_Fg.KeyTrue)return;
 13928  0035E0  A222               	btfss	_bKey_Fg^0,1,c
 13929  0035E2  0012               	return	
 13930  0035E4  D08D               	goto	l9881
 13931  0035E6                     l191:
 13932                           
 13933                           ; BSR set to: 0
 13934                           ;Display.c: 334: if(bKey_Fg.LongKeyEn)
 13935  0035E6  A622               	btfss	_bKey_Fg^0,3,c
 13936  0035E8  D096               	goto	l197
 13937                           
 13938                           ; BSR set to: 0
 13939                           ;Display.c: 335: {;Display.c: 336: bKey_Fg.LongKeyEn = 0;
 13940  0035EA  9622               	bcf	_bKey_Fg^0,3,c
 13941                           
 13942                           ; BSR set to: 0
 13943                           ;Display.c: 337: if(!setid_mode)
 13944  0035EC  519B               	movf	_setid_mode& (0+255),w,b
 13945  0035EE  A4D8               	btfss	status,2,c
 13946  0035F0  D00E               	goto	l9801
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;Display.c: 338: {;Display.c: 339: if(!mSwitch_code)
 13950  0035F2  501F               	movf	_mSwitch_code^0,w,c
 13951  0035F4  A4D8               	btfss	status,2,c
 13952  0035F6  D08F               	goto	l197
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;Display.c: 340: {;Display.c: 341: mSwitch_code = 0;
 13956  0035F8  0E00               	movlw	0
 13957  0035FA  6E1F               	movwf	_mSwitch_code^0,c
 13958                           
 13959                           ;Display.c: 342: setid_mode = 1;
 13960  0035FC  0E01               	movlw	1
 13961  0035FE  6F9B               	movwf	_setid_mode& (0+255),b
 13962                           
 13963                           ;Display.c: 343: setid_mode_old = 0;
 13964  003600  0E00               	movlw	0
 13965  003602  6F9C               	movwf	_setid_mode_old& (0+255),b
 13966                           
 13967                           ;Display.c: 344: scroll = 0;
 13968  003604  0E00               	movlw	0
 13969  003606  6E25               	movwf	_scroll^0,c
 13970                           
 13971                           ;Display.c: 345: arrowflash = 0;
 13972  003608  0E00               	movlw	0
 13973  00360A  6F95               	movwf	_arrowflash& (0+255),b
 13974  00360C  D084               	goto	l197
 13975  00360E                     l9801:
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;Display.c: 348: else if(!mSwitch_code)
 13979  00360E  501F               	movf	_mSwitch_code^0,w,c
 13980  003610  A4D8               	btfss	status,2,c
 13981  003612  D081               	goto	l197
 13982                           
 13983                           ; BSR set to: 0
 13984                           ;Display.c: 349: {;Display.c: 350: mSwitch_code = 0;
 13985  003614  0E00               	movlw	0
 13986  003616  6E1F               	movwf	_mSwitch_code^0,c
 13987                           
 13988                           ;Display.c: 351: setid_mode = 0;
 13989  003618  0E00               	movlw	0
 13990  00361A  6F9B               	movwf	_setid_mode& (0+255),b
 13991                           
 13992                           ;Display.c: 352: setid_mode_old = 0;
 13993  00361C  0E00               	movlw	0
 13994  00361E  6F9C               	movwf	_setid_mode_old& (0+255),b
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;Display.c: 353: arrowflash = arrowflash_old;
 13998  003620  C01E  F095         	movff	_arrowflash_old,_arrowflash
 13999  003624  D078               	goto	l197
 14000  003626                     l9807:
 14001                           
 14002                           ; BSR set to: 0
 14003                           ;Display.c: 359: if(setid_mode)
 14004  003626  519B               	movf	_setid_mode& (0+255),w,b
 14005  003628  B4D8               	btfsc	status,2,c
 14006  00362A  D075               	goto	l197
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;Display.c: 360: {;Display.c: 361: flashtimer = 3;
 14010  00362C  0E03               	movlw	3
 14011  00362E  6F99               	movwf	_flashtimer& (0+255),b
 14012                           
 14013                           ; BSR set to: 0
 14014                           ;Display.c: 362: if((setid_mode == 1) || (setid_mode == 4))
 14015  003630  059B               	decf	_setid_mode& (0+255),w,b
 14016  003632  B4D8               	btfsc	status,2,c
 14017  003634  D004               	goto	u12390
 14018                           
 14019                           ; BSR set to: 0
 14020  003636  0E04               	movlw	4
 14021  003638  199B               	xorwf	_setid_mode& (0+255),w,b
 14022  00363A  A4D8               	btfss	status,2,c
 14023  00363C  D019               	goto	l9833
 14024  00363E                     u12390:
 14025                           
 14026                           ; BSR set to: 0
 14027                           ;Display.c: 363: {;Display.c: 364: keytimer = 50;
 14028  00363E  0E32               	movlw	50
 14029  003640  6E1D               	movwf	_keytimer^0,c
 14030                           
 14031                           ; BSR set to: 0
 14032                           ;Display.c: 365: if (node_id >= 0x10 && node_id < 0x10 + 110)
 14033  003642  0E0F               	movlw	15
 14034  003644  659D               	cpfsgt	_node_id& (0+255),b
 14035  003646  D007               	goto	u12420
 14036                           
 14037                           ; BSR set to: 0
 14038  003648  0E7E               	movlw	126
 14039  00364A  619D               	cpfslt	_node_id& (0+255),b
 14040  00364C  D004               	goto	u12420
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;Display.c: 366: {;Display.c: 367: ++ node_id;
 14044  00364E  2B9D               	incf	_node_id& (0+255),f,b
 14045                           
 14046                           ; BSR set to: 0
 14047                           ;Display.c: 368: if (node_id >= 0x10 + 110)
 14048  003650  0E7D               	movlw	125
 14049  003652  659D               	cpfsgt	_node_id& (0+255),b
 14050  003654  D002               	goto	l9829
 14051  003656                     u12420:
 14052                           
 14053                           ; BSR set to: 0
 14054                           ;Display.c: 369: node_id = 0x10;
 14055  003656  0E10               	movlw	16
 14056  003658  6F9D               	movwf	_node_id& (0+255),b
 14057  00365A                     l9829:
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;Display.c: 373: preset_node_id = node_id;
 14061  00365A  C09D  F094         	movff	_node_id,_preset_node_id
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;Display.c: 374: write_eeprom (0x00, node_id);
 14065  00365E  0E00               	movlw	0
 14066  003660  6FC9               	movwf	(write_eeprom@address+1)& (0+255),b
 14067  003662  0E00               	movlw	0
 14068  003664  6FC8               	movwf	write_eeprom@address& (0+255),b
 14069  003666  C09D  F0CA         	movff	_node_id,write_eeprom@value
 14070  00366A  EC5B  F021         	call	_write_eeprom	;wreg free
 14071                           
 14072                           ;Display.c: 375: }
 14073  00366E  D053               	goto	l197
 14074  003670                     l9833:
 14075                           
 14076                           ; BSR set to: 0
 14077                           ;Display.c: 376: else if(setid_mode == 2)
 14078  003670  0E02               	movlw	2
 14079  003672  199B               	xorwf	_setid_mode& (0+255),w,b
 14080  003674  A4D8               	btfss	status,2,c
 14081  003676  D04F               	goto	l197
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;Display.c: 377: {;Display.c: 378: keytimer = 0;
 14085  003678  0E00               	movlw	0
 14086  00367A  6E1D               	movwf	_keytimer^0,c
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;Display.c: 379: preset_node_id = node_id;
 14090  00367C  C09D  F094         	movff	_node_id,_preset_node_id
 14091                           
 14092                           ; BSR set to: 0
 14093                           ;Display.c: 380: write_eeprom (0x00, node_id);
 14094  003680  0E00               	movlw	0
 14095  003682  6FC9               	movwf	(write_eeprom@address+1)& (0+255),b
 14096  003684  0E00               	movlw	0
 14097  003686  6FC8               	movwf	write_eeprom@address& (0+255),b
 14098  003688  C09D  F0CA         	movff	_node_id,write_eeprom@value
 14099  00368C  EC5B  F021         	call	_write_eeprom	;wreg free
 14100                           
 14101                           ;Display.c: 381: lss_response (0x11, node_id);
 14102  003690  C09D  F0CC         	movff	_node_id,lss_response@value
 14103  003694  0E11               	movlw	17
 14104  003696  EC9B  F01F         	call	_lss_response
 14105  00369A  D03D               	goto	l197
 14106  00369C                     l9843:
 14107                           
 14108                           ; BSR set to: 0
 14109                           ;Display.c: 387: if(setid_mode)
 14110  00369C  519B               	movf	_setid_mode& (0+255),w,b
 14111  00369E  B4D8               	btfsc	status,2,c
 14112  0036A0  D03A               	goto	l197
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;Display.c: 388: {;Display.c: 389: flashtimer = 3;
 14116  0036A2  0E03               	movlw	3
 14117  0036A4  6F99               	movwf	_flashtimer& (0+255),b
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;Display.c: 390: if((setid_mode == 1) || (setid_mode == 4))
 14121  0036A6  059B               	decf	_setid_mode& (0+255),w,b
 14122  0036A8  B4D8               	btfsc	status,2,c
 14123  0036AA  D004               	goto	u12460
 14124                           
 14125                           ; BSR set to: 0
 14126  0036AC  0E04               	movlw	4
 14127  0036AE  199B               	xorwf	_setid_mode& (0+255),w,b
 14128  0036B0  A4D8               	btfss	status,2,c
 14129  0036B2  D010               	goto	l9869
 14130  0036B4                     u12460:
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;Display.c: 391: {;Display.c: 392: keytimer = 50;
 14134  0036B4  0E32               	movlw	50
 14135  0036B6  6E1D               	movwf	_keytimer^0,c
 14136                           
 14137                           ; BSR set to: 0
 14138                           ;Display.c: 393: if (node_id >= 0x10 && node_id < 0x10+110)
 14139  0036B8  0E0F               	movlw	15
 14140  0036BA  659D               	cpfsgt	_node_id& (0+255),b
 14141  0036BC  D7CC               	goto	u12420
 14142                           
 14143                           ; BSR set to: 0
 14144  0036BE  0E7E               	movlw	126
 14145  0036C0  619D               	cpfslt	_node_id& (0+255),b
 14146  0036C2  D7C9               	goto	u12420
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;Display.c: 394: {;Display.c: 395: if (node_id == 0x10)
 14150  0036C4  0E10               	movlw	16
 14151  0036C6  199D               	xorwf	_node_id& (0+255),w,b
 14152  0036C8  A4D8               	btfss	status,2,c
 14153  0036CA  D002               	goto	l9861
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;Display.c: 396: node_id = 0x10 + 110 - 1;
 14157  0036CC  0E7D               	movlw	125
 14158  0036CE  D7C4               	goto	L30
 14159  0036D0                     l9861:
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;Display.c: 397: else;Display.c: 398: --node_id;
 14163  0036D0  079D               	decf	_node_id& (0+255),f,b
 14164  0036D2  D7C3               	goto	l9829
 14165  0036D4                     l9869:
 14166                           
 14167                           ; BSR set to: 0
 14168                           ;Display.c: 405: else if(setid_mode == 2)
 14169  0036D4  0E02               	movlw	2
 14170  0036D6  199B               	xorwf	_setid_mode& (0+255),w,b
 14171  0036D8  A4D8               	btfss	status,2,c
 14172  0036DA  D01D               	goto	l197
 14173                           
 14174                           ; BSR set to: 0
 14175                           ;Display.c: 406: {;Display.c: 407: keytimer = 0;
 14176  0036DC  0E00               	movlw	0
 14177  0036DE  6E1D               	movwf	_keytimer^0,c
 14178                           
 14179                           ; BSR set to: 0
 14180                           ;Display.c: 408: preset_node_id = node_id;
 14181  0036E0  C09D  F094         	movff	_node_id,_preset_node_id
 14182                           
 14183                           ; BSR set to: 0
 14184                           ;Display.c: 409: write_eeprom (0x00, node_id);
 14185  0036E4  0E00               	movlw	0
 14186  0036E6  6FC9               	movwf	(write_eeprom@address+1)& (0+255),b
 14187  0036E8  0E00               	movlw	0
 14188  0036EA  6FC8               	movwf	write_eeprom@address& (0+255),b
 14189  0036EC  C09D  F0CA         	movff	_node_id,write_eeprom@value
 14190  0036F0  EC5B  F021         	call	_write_eeprom	;wreg free
 14191                           
 14192                           ;Display.c: 410: lss_response (0x11, node_id);
 14193  0036F4  C09D  F0CC         	movff	_node_id,lss_response@value
 14194  0036F8  0E11               	movlw	17
 14195  0036FA  EC9B  F01F         	call	_lss_response
 14196  0036FE  D00B               	goto	l197
 14197  003700                     l9881:
 14198  003700  0100               	movlb	0	; () banked
 14199  003702  51D1               	movf	KeyProg@value& (0+255),w,b
 14200                           
 14201                           ; Switch size 1, requested type "simple"
 14202                           ; Number of cases is 3, Range of values is 1 to 3
 14203                           ; switch strategies available:
 14204                           ; Name         Instructions Cycles
 14205                           ; simple_byte           10     6 (average)
 14206                           ;	Chosen strategy is simple_byte
 14207  003704  0A01               	xorlw	1	; case 1
 14208  003706  B4D8               	btfsc	status,2,c
 14209  003708  D78E               	goto	l9807
 14210  00370A  0A03               	xorlw	3	; case 2
 14211  00370C  B4D8               	btfsc	status,2,c
 14212  00370E  D7C6               	goto	l9843
 14213  003710  0A01               	xorlw	1	; case 3
 14214  003712  B4D8               	btfsc	status,2,c
 14215  003714  D768               	goto	l191
 14216  003716                     l197:
 14217                           
 14218                           ;Display.c: 415: bKey_Fg.KeyTrue = 0;
 14219  003716  9222               	bcf	_bKey_Fg^0,1,c
 14220  003718  0012               	return		;funcret
 14221  00371A                     __end_of_KeyProg:
 14222                           	callstack 0
 14223                           
 14224 ;; *************** function _write_eeprom *****************
 14225 ;; Defined at:
 14226 ;;		line 19 in file "../../src/eeprom.c"
 14227 ;; Parameters:    Size  Location     Type
 14228 ;;  address         2   12[BANK0 ] unsigned int 
 14229 ;;  value           1   14[BANK0 ] unsigned char 
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;		None
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      unsigned char 
 14234 ;; Registers used:
 14235 ;;		wreg, status,2, cstack
 14236 ;; Tracked objects:
 14237 ;;		On entry : 3F/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14241 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14244 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14245 ;;Total ram usage:        3 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:    4
 14248 ;; This function calls:
 14249 ;;		_read_eeprom
 14250 ;; This function is called by:
 14251 ;;		_KeyProg
 14252 ;; This function uses a non-reentrant model
 14253 ;;
 14254                           
 14255                           	psect	text31
 14256  0042B6                     __ptext31:
 14257                           	callstack 0
 14258  0042B6                     _write_eeprom:
 14259                           	callstack 25
 14260                           
 14261                           ; BSR set to: 0
 14262                           ;eeprom.c: 20: EEADRH = address >> 8;
 14263                           
 14264                           ;incstack = 0
 14265  0042B6  C0C9  FF75         	movff	write_eeprom@address+1,3957	;volatile
 14266                           
 14267                           ;eeprom.c: 21: EEADR = (BYTE)address;
 14268  0042BA  C0C8  FF74         	movff	write_eeprom@address,3956	;volatile
 14269                           
 14270                           ;eeprom.c: 22: EEDATA = value;
 14271  0042BE  C0CA  FF73         	movff	write_eeprom@value,3955	;volatile
 14272                           
 14273                           ;eeprom.c: 23: EECON1bits.EEPGD = 0;
 14274  0042C2  9E7F               	bcf	127,7,c	;volsfr
 14275                           
 14276                           ;eeprom.c: 24: EECON1bits.CFGS = 0;
 14277  0042C4  9C7F               	bcf	127,6,c	;volsfr
 14278                           
 14279                           ;eeprom.c: 25: EECON1bits.WREN = 1;
 14280  0042C6  847F               	bsf	127,2,c	;volsfr
 14281                           
 14282                           ;eeprom.c: 26: INTCONbits.GIEH = 0;
 14283  0042C8  9EF2               	bcf	242,7,c	;volatile
 14284                           
 14285                           ;eeprom.c: 27: INTCONbits.GIEL = 0;
 14286  0042CA  9CF2               	bcf	242,6,c	;volatile
 14287                           
 14288                           ; BSR set to: 0
 14289                           ;eeprom.c: 28: EECON2 = 0x55;
 14290  0042CC  0E55               	movlw	85
 14291  0042CE  6E7E               	movwf	126,c	;volsfr
 14292                           
 14293                           ;eeprom.c: 29: EECON2 = 0xAA;
 14294  0042D0  0EAA               	movlw	170
 14295  0042D2  6E7E               	movwf	126,c	;volsfr
 14296                           
 14297                           ; BSR set to: 0
 14298                           ;eeprom.c: 30: EECON1bits.WR = 1;
 14299  0042D4  827F               	bsf	127,1,c	;volsfr
 14300                           
 14301                           ; BSR set to: 0
 14302                           ;eeprom.c: 31: INTCONbits.GIEH = 1;
 14303  0042D6  8EF2               	bsf	242,7,c	;volatile
 14304                           
 14305                           ; BSR set to: 0
 14306                           ;eeprom.c: 32: INTCONbits.GIEL = 1;
 14307  0042D8  8CF2               	bsf	242,6,c	;volatile
 14308  0042DA  0004               	clrwdt		;# 
 14309  0042DC                     l1409:
 14310  0042DC  ACB7               	btfss	183,6,c	;volatile
 14311  0042DE  D7FE               	goto	l1409
 14312                           
 14313                           ;eeprom.c: 35: PIR4bits.EEIF = 0;
 14314  0042E0  9CB7               	bcf	183,6,c	;volatile
 14315                           
 14316                           ;eeprom.c: 36: EECON1bits.WREN = 1;
 14317  0042E2  847F               	bsf	127,2,c	;volsfr
 14318                           
 14319                           ;eeprom.c: 37: if (read_eeprom (address) == value)
 14320  0042E4  C0C8  F0C6         	movff	write_eeprom@address,read_eeprom@address
 14321  0042E8  C0C9  F0C7         	movff	write_eeprom@address+1,read_eeprom@address+1
 14322  0042EC  EC22  F022         	call	_read_eeprom	;wreg free
 14323  0042F0  0012               	return		;funcret
 14324  0042F2                     __end_of_write_eeprom:
 14325                           	callstack 0
 14326                           
 14327 ;; *************** function _read_eeprom *****************
 14328 ;; Defined at:
 14329 ;;		line 7 in file "../../src/eeprom.c"
 14330 ;; Parameters:    Size  Location     Type
 14331 ;;  address         2   10[BANK0 ] unsigned int 
 14332 ;; Auto vars:     Size  Location     Type
 14333 ;;		None
 14334 ;; Return value:  Size  Location     Type
 14335 ;;                  1    wreg      unsigned char 
 14336 ;; Registers used:
 14337 ;;		wreg, status,2
 14338 ;; Tracked objects:
 14339 ;;		On entry : 0/0
 14340 ;;		On exit  : 0/0
 14341 ;;		Unchanged: 0/0
 14342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14343 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14347 ;;Total ram usage:        2 bytes
 14348 ;; Hardware stack levels used:    1
 14349 ;; Hardware stack levels required when called:    3
 14350 ;; This function calls:
 14351 ;;		Nothing
 14352 ;; This function is called by:
 14353 ;;		_main
 14354 ;;		_write_eeprom
 14355 ;; This function uses a non-reentrant model
 14356 ;;
 14357                           
 14358                           	psect	text32
 14359  004444                     __ptext32:
 14360                           	callstack 0
 14361  004444                     _read_eeprom:
 14362                           	callstack 27
 14363                           
 14364                           ;eeprom.c: 8: EEADRH = address >> 8;
 14365                           
 14366                           ;incstack = 0
 14367  004444  C0C7  FF75         	movff	read_eeprom@address+1,3957	;volatile
 14368                           
 14369                           ;eeprom.c: 9: EEADR = (BYTE)address;
 14370  004448  C0C6  FF74         	movff	read_eeprom@address,3956	;volatile
 14371                           
 14372                           ;eeprom.c: 10: EECON1bits.EEPGD = 0;
 14373  00444C  9E7F               	bcf	127,7,c	;volsfr
 14374                           
 14375                           ;eeprom.c: 11: EECON1bits.CFGS = 0;
 14376  00444E  9C7F               	bcf	127,6,c	;volsfr
 14377                           
 14378                           ;eeprom.c: 12: EECON1bits.RD = 1;
 14379  004450  807F               	bsf	127,0,c	;volsfr
 14380                           
 14381                           ;eeprom.c: 13: return (EEDATA);
 14382  004452  5073               	movf	115,w,c	;volatile
 14383  004454  0012               	return		;funcret
 14384  004456                     __end_of_read_eeprom:
 14385                           	callstack 0
 14386                           
 14387 ;; *************** function _lss_response *****************
 14388 ;; Defined at:
 14389 ;;		line 327 in file "../../src/can.c"
 14390 ;; Parameters:    Size  Location     Type
 14391 ;;  command         1    wreg     unsigned char 
 14392 ;;  value           1   16[BANK0 ] unsigned char 
 14393 ;; Auto vars:     Size  Location     Type
 14394 ;;  command         1   19[BANK0 ] unsigned char 
 14395 ;;  i               1   20[BANK0 ] unsigned char 
 14396 ;; Return value:  Size  Location     Type
 14397 ;;                  1    wreg      void 
 14398 ;; Registers used:
 14399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14400 ;; Tracked objects:
 14401 ;;		On entry : 0/0
 14402 ;;		On exit  : 30/0
 14403 ;;		Unchanged: 0/0
 14404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14405 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14407 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14408 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14409 ;;Total ram usage:        5 bytes
 14410 ;; Hardware stack levels used:    1
 14411 ;; Hardware stack levels required when called:    4
 14412 ;; This function calls:
 14413 ;;		_can_transmit
 14414 ;; This function is called by:
 14415 ;;		_KeyProg
 14416 ;; This function uses a non-reentrant model
 14417 ;;
 14418                           
 14419                           	psect	text33
 14420  003F36                     __ptext33:
 14421                           	callstack 0
 14422  003F36                     _lss_response:
 14423                           	callstack 25
 14424                           
 14425                           ;incstack = 0
 14426                           ;lss_response@command stored from wreg
 14427  003F36  0100               	movlb	0	; () banked
 14428  003F38  6FCF               	movwf	lss_response@command& (0+255),b
 14429  003F3A                     
 14430                           ;can.c: 328: BYTE i;;can.c: 329: while (tc == 30);
 14431  003F3A  0E1E               	movlw	30
 14432  003F3C  180D               	xorwf	_tc^0,w,c	;volatile
 14433  003F3E  B4D8               	btfsc	status,2,c
 14434  003F40  D7FC               	goto	l8829
 14435                           
 14436                           ;can.c: 330: tx[ti][0] = 0xF0 + 8;
 14437  003F42  500A               	movf	_ti^0,w,c	;volatile
 14438  003F44  0D0A               	mullw	10
 14439  003F46  0E8B               	movlw	low _tx
 14440  003F48  24F3               	addwf	243,w,c
 14441  003F4A  6ED9               	movwf	fsr2l,c
 14442  003F4C  0E01               	movlw	high _tx
 14443  003F4E  20F4               	addwfc	prodh,w,c
 14444  003F50  6EDA               	movwf	fsr2h,c
 14445  003F52  0EF8               	movlw	248
 14446  003F54  6EDF               	movwf	indf2,c
 14447                           
 14448                           ;can.c: 331: tx[ti][1] = 0x64;
 14449  003F56  500A               	movf	_ti^0,w,c	;volatile
 14450  003F58  0D0A               	mullw	10
 14451  003F5A  0E8C               	movlw	low (_tx+1)
 14452  003F5C  24F3               	addwf	243,w,c
 14453  003F5E  6ED9               	movwf	fsr2l,c
 14454  003F60  0E01               	movlw	high (_tx+1)
 14455  003F62  20F4               	addwfc	prodh,w,c
 14456  003F64  6EDA               	movwf	fsr2h,c
 14457  003F66  0E64               	movlw	100
 14458  003F68  6EDF               	movwf	indf2,c
 14459                           
 14460                           ;can.c: 332: tx[ti][2] = command;
 14461  003F6A  500A               	movf	_ti^0,w,c	;volatile
 14462  003F6C  0D0A               	mullw	10
 14463  003F6E  0E8D               	movlw	low (_tx+2)
 14464  003F70  24F3               	addwf	243,w,c
 14465  003F72  6ED9               	movwf	fsr2l,c
 14466  003F74  0E01               	movlw	high (_tx+2)
 14467  003F76  20F4               	addwfc	prodh,w,c
 14468  003F78  6EDA               	movwf	fsr2h,c
 14469  003F7A  C0CF  FFDF         	movff	lss_response@command,indf2
 14470                           
 14471                           ;can.c: 333: tx[ti][3] = value;
 14472  003F7E  500A               	movf	_ti^0,w,c	;volatile
 14473  003F80  0D0A               	mullw	10
 14474  003F82  0E8E               	movlw	low (_tx+3)
 14475  003F84  24F3               	addwf	243,w,c
 14476  003F86  6ED9               	movwf	fsr2l,c
 14477  003F88  0E01               	movlw	high (_tx+3)
 14478  003F8A  20F4               	addwfc	prodh,w,c
 14479  003F8C  6EDA               	movwf	fsr2h,c
 14480  003F8E  C0CC  FFDF         	movff	lss_response@value,indf2
 14481                           
 14482                           ;can.c: 334: for (i = 4; i <= 9; i++)
 14483  003F92  0E04               	movlw	4
 14484  003F94  0100               	movlb	0	; () banked
 14485  003F96  6FD0               	movwf	lss_response@i& (0+255),b
 14486  003F98                     l8841:
 14487                           
 14488                           ; BSR set to: 0
 14489                           ;can.c: 335: tx[ti][i] = 0;
 14490  003F98  500A               	movf	_ti^0,w,c	;volatile
 14491  003F9A  0D0A               	mullw	10
 14492  003F9C  0E8B               	movlw	low _tx
 14493  003F9E  6FCD               	movwf	??_lss_response& (0+255),b
 14494  003FA0  0E01               	movlw	high _tx
 14495  003FA2  6FCE               	movwf	(??_lss_response+1)& (0+255),b
 14496  003FA4  50F3               	movf	243,w,c
 14497  003FA6  27CD               	addwf	??_lss_response& (0+255),f,b
 14498  003FA8  50F4               	movf	244,w,c
 14499  003FAA  23CE               	addwfc	(??_lss_response+1)& (0+255),f,b
 14500  003FAC  51D0               	movf	lss_response@i& (0+255),w,b
 14501  003FAE  25CD               	addwf	??_lss_response& (0+255),w,b
 14502  003FB0  6ED9               	movwf	fsr2l,c
 14503  003FB2  0E00               	movlw	0
 14504  003FB4  21CE               	addwfc	(??_lss_response+1)& (0+255),w,b
 14505  003FB6  6EDA               	movwf	fsr2h,c
 14506  003FB8  0E00               	movlw	0
 14507  003FBA  6EDF               	movwf	indf2,c
 14508                           
 14509                           ; BSR set to: 0
 14510  003FBC  2BD0               	incf	lss_response@i& (0+255),f,b
 14511                           
 14512                           ; BSR set to: 0
 14513  003FBE  0E09               	movlw	9
 14514  003FC0  65D0               	cpfsgt	lss_response@i& (0+255),b
 14515  003FC2  D7EA               	goto	l8841
 14516                           
 14517                           ; BSR set to: 0
 14518                           ;can.c: 336: can_transmit ();
 14519  003FC4  ECBC  F01C         	call	_can_transmit	;wreg free
 14520  003FC8  0012               	return		;funcret
 14521  003FCA                     __end_of_lss_response:
 14522                           	callstack 0
 14523                           
 14524 ;; *************** function _can_transmit *****************
 14525 ;; Defined at:
 14526 ;;		line 225 in file "../../src/can.c"
 14527 ;; Parameters:    Size  Location     Type
 14528 ;;		None
 14529 ;; Auto vars:     Size  Location     Type
 14530 ;;  ptr             2   12[BANK0 ] PTR unsigned char 
 14531 ;;		 -> TXB0D0(1), 
 14532 ;;  i               1   15[BANK0 ] unsigned char 
 14533 ;;  lenght          1   14[BANK0 ] unsigned char 
 14534 ;; Return value:  Size  Location     Type
 14535 ;;                  1    wreg      void 
 14536 ;; Registers used:
 14537 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14538 ;; Tracked objects:
 14539 ;;		On entry : 0/0
 14540 ;;		On exit  : 30/0
 14541 ;;		Unchanged: 0/0
 14542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14544 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14546 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14547 ;;Total ram usage:        6 bytes
 14548 ;; Hardware stack levels used:    1
 14549 ;; Hardware stack levels required when called:    3
 14550 ;; This function calls:
 14551 ;;		Nothing
 14552 ;; This function is called by:
 14553 ;;		_transmit_in
 14554 ;;		_sdo_response
 14555 ;;		_sdo_segment
 14556 ;;		_abort_sdo
 14557 ;;		_lss_response
 14558 ;;		_transmit_error
 14559 ;; This function uses a non-reentrant model
 14560 ;;
 14561                           
 14562                           	psect	text34
 14563  003978                     __ptext34:
 14564                           	callstack 0
 14565  003978                     _can_transmit:
 14566                           	callstack 26
 14567                           
 14568                           ;can.c: 226: BYTE i;;can.c: 227: BYTE lenght;;can.c: 228: BYTE *ptr;;can.c: 230: if(!hse
      +                          _heartbeat || can_inittime)
 14569                           
 14570                           ;incstack = 0
 14571  003978  0100               	movlb	0	; () banked
 14572  00397A  5187               	movf	_hse_heartbeat& (0+255),w,b	;volatile
 14573  00397C  B4D8               	btfsc	status,2,c
 14574  00397E  0012               	return	
 14575                           
 14576                           ; BSR set to: 0
 14577  003980  5186               	movf	_can_inittime& (0+255),w,b	;volatile
 14578  003982  A4D8               	btfss	status,2,c
 14579  003984  0012               	return	
 14580                           
 14581                           ; BSR set to: 0
 14582                           ;can.c: 232: if (ti == (30-1))
 14583  003986  0E1D               	movlw	29
 14584  003988  180A               	xorwf	_ti^0,w,c	;volatile
 14585  00398A  A4D8               	btfss	status,2,c
 14586  00398C  D003               	goto	l8605
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;can.c: 233: ti = 0;
 14590  00398E  0E00               	movlw	0
 14591  003990  6E0A               	movwf	_ti^0,c	;volatile
 14592  003992  D001               	goto	l8607
 14593  003994                     l8605:
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;can.c: 234: else;can.c: 235: ti++;
 14597  003994  2A0A               	incf	_ti^0,f,c	;volatile
 14598  003996                     l8607:
 14599                           
 14600                           ; BSR set to: 0
 14601                           ;can.c: 236: INTCONbits.GIEH = 0;
 14602  003996  9EF2               	bcf	242,7,c	;volatile
 14603                           
 14604                           ; BSR set to: 0
 14605                           ;can.c: 237: if (tr)
 14606  003998  5009               	movf	_tr^0,w,c	;volatile
 14607  00399A  B4D8               	btfsc	status,2,c
 14608  00399C  D074               	goto	l8633
 14609                           
 14610                           ; BSR set to: 0
 14611                           ;can.c: 238: {;can.c: 239: TXB0SIDH = (tx[to][0] & 0xF0) + (tx[to][1]>>3);
 14612  00399E  500B               	movf	_to^0,w,c	;volatile
 14613  0039A0  0D0A               	mullw	10
 14614  0039A2  0E8C               	movlw	low (_tx+1)
 14615  0039A4  24F3               	addwf	243,w,c
 14616  0039A6  6ED9               	movwf	fsr2l,c
 14617  0039A8  0E01               	movlw	high (_tx+1)
 14618  0039AA  20F4               	addwfc	prodh,w,c
 14619  0039AC  6EDA               	movwf	fsr2h,c
 14620  0039AE  50DF               	movf	indf2,w,c
 14621  0039B0  6FC6               	movwf	??_can_transmit& (0+255),b
 14622  0039B2  90D8               	bcf	status,0,c
 14623  0039B4  33C6               	rrcf	??_can_transmit& (0+255),f,b
 14624  0039B6  90D8               	bcf	status,0,c
 14625  0039B8  33C6               	rrcf	??_can_transmit& (0+255),f,b
 14626  0039BA  90D8               	bcf	status,0,c
 14627  0039BC  33C6               	rrcf	??_can_transmit& (0+255),f,b
 14628  0039BE  500B               	movf	_to^0,w,c	;volatile
 14629  0039C0  0D0A               	mullw	10
 14630  0039C2  0E8B               	movlw	low _tx
 14631  0039C4  24F3               	addwf	243,w,c
 14632  0039C6  6ED9               	movwf	fsr2l,c
 14633  0039C8  0E01               	movlw	high _tx
 14634  0039CA  20F4               	addwfc	prodh,w,c
 14635  0039CC  6EDA               	movwf	fsr2h,c
 14636  0039CE  50DF               	movf	indf2,w,c
 14637  0039D0  0BF0               	andlw	240
 14638  0039D2  25C6               	addwf	??_can_transmit& (0+255),w,b
 14639  0039D4  010F               	movlb	15	; () banked
 14640  0039D6  6F21               	movwf	33,b	;volatile
 14641                           
 14642                           ;can.c: 240: TXB0SIDL = tx[to][1] << 5;
 14643  0039D8  500B               	movf	_to^0,w,c	;volatile
 14644  0039DA  0D0A               	mullw	10
 14645  0039DC  0E8C               	movlw	low (_tx+1)
 14646  0039DE  24F3               	addwf	243,w,c
 14647  0039E0  6ED9               	movwf	fsr2l,c
 14648  0039E2  0E01               	movlw	high (_tx+1)
 14649  0039E4  20F4               	addwfc	prodh,w,c
 14650  0039E6  6EDA               	movwf	fsr2h,c
 14651  0039E8  50DF               	movf	indf2,w,c
 14652  0039EA  0100               	movlb	0	; () banked
 14653  0039EC  6FC6               	movwf	??_can_transmit& (0+255),b
 14654  0039EE  0E05               	movlw	5
 14655  0039F0  6FC7               	movwf	(??_can_transmit+1)& (0+255),b
 14656  0039F2                     u10005:
 14657  0039F2  90D8               	bcf	status,0,c
 14658  0039F4  37C6               	rlcf	??_can_transmit& (0+255),f,b
 14659  0039F6  2FC7               	decfsz	(??_can_transmit+1)& (0+255),f,b
 14660  0039F8  D7FC               	goto	u10005
 14661  0039FA  51C6               	movf	??_can_transmit& (0+255),w,b
 14662  0039FC  010F               	movlb	15	; () banked
 14663  0039FE  6F22               	movwf	34,b	;volatile
 14664                           
 14665                           ;can.c: 241: lenght = tx[to][0] & 0x0F;
 14666  003A00  500B               	movf	_to^0,w,c	;volatile
 14667  003A02  0D0A               	mullw	10
 14668  003A04  0E8B               	movlw	low _tx
 14669  003A06  24F3               	addwf	243,w,c
 14670  003A08  6ED9               	movwf	fsr2l,c
 14671  003A0A  0E01               	movlw	high _tx
 14672  003A0C  20F4               	addwfc	prodh,w,c
 14673  003A0E  6EDA               	movwf	fsr2h,c
 14674  003A10  50DF               	movf	indf2,w,c
 14675  003A12  0B0F               	andlw	15
 14676  003A14  0100               	movlb	0	; () banked
 14677  003A16  6FCA               	movwf	can_transmit@lenght& (0+255),b
 14678                           
 14679                           ; BSR set to: 0
 14680                           ;can.c: 242: TXB0DLC = lenght;
 14681  003A18  C0CA  FF25         	movff	can_transmit@lenght,3877	;volatile
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;can.c: 243: ptr = (BYTE*)&TXB0D0;
 14685  003A1C  0E26               	movlw	38
 14686  003A1E  6FC8               	movwf	can_transmit@ptr& (0+255),b
 14687  003A20  0E0F               	movlw	15
 14688  003A22  6FC9               	movwf	(can_transmit@ptr+1)& (0+255),b
 14689                           
 14690                           ; BSR set to: 0
 14691                           ;can.c: 244: for (i = 0; i < lenght; i++)
 14692  003A24  0E00               	movlw	0
 14693  003A26  6FCB               	movwf	can_transmit@i& (0+255),b
 14694  003A28  D01D               	goto	l8623
 14695  003A2A                     l8619:
 14696                           
 14697                           ; BSR set to: 0
 14698                           ;can.c: 245: ptr[i] = tx[to][2 + i];
 14699  003A2A  500B               	movf	_to^0,w,c	;volatile
 14700  003A2C  0D0A               	mullw	10
 14701  003A2E  0E8B               	movlw	low _tx
 14702  003A30  6FC6               	movwf	??_can_transmit& (0+255),b
 14703  003A32  0E01               	movlw	high _tx
 14704  003A34  6FC7               	movwf	(??_can_transmit+1)& (0+255),b
 14705  003A36  0E02               	movlw	2
 14706  003A38  27C6               	addwf	??_can_transmit& (0+255),f,b
 14707  003A3A  0E00               	movlw	0
 14708  003A3C  23C7               	addwfc	(??_can_transmit+1)& (0+255),f,b
 14709  003A3E  50F3               	movf	243,w,c
 14710  003A40  27C6               	addwf	??_can_transmit& (0+255),f,b
 14711  003A42  50F4               	movf	244,w,c
 14712  003A44  23C7               	addwfc	(??_can_transmit+1)& (0+255),f,b
 14713  003A46  51CB               	movf	can_transmit@i& (0+255),w,b
 14714  003A48  25C6               	addwf	??_can_transmit& (0+255),w,b
 14715  003A4A  6ED9               	movwf	fsr2l,c
 14716  003A4C  0E00               	movlw	0
 14717  003A4E  21C7               	addwfc	(??_can_transmit+1)& (0+255),w,b
 14718  003A50  6EDA               	movwf	fsr2h,c
 14719  003A52  51CB               	movf	can_transmit@i& (0+255),w,b
 14720  003A54  25C8               	addwf	can_transmit@ptr& (0+255),w,b
 14721  003A56  6EE1               	movwf	fsr1l,c
 14722  003A58  0E00               	movlw	0
 14723  003A5A  21C9               	addwfc	(can_transmit@ptr+1)& (0+255),w,b
 14724  003A5C  6EE2               	movwf	fsr1h,c
 14725  003A5E  CFDF FFE7          	movff	indf2,indf1
 14726                           
 14727                           ; BSR set to: 0
 14728  003A62  2BCB               	incf	can_transmit@i& (0+255),f,b
 14729  003A64                     l8623:
 14730                           
 14731                           ; BSR set to: 0
 14732  003A64  51CA               	movf	can_transmit@lenght& (0+255),w,b
 14733  003A66  5DCB               	subwf	can_transmit@i& (0+255),w,b
 14734  003A68  A0D8               	btfss	status,0,c
 14735  003A6A  D7DF               	goto	l8619
 14736                           
 14737                           ; BSR set to: 0
 14738                           ;can.c: 246: TXB0CONbits.TXREQ = 1;
 14739  003A6C  010F               	movlb	15	; () banked
 14740  003A6E  8720               	bsf	32,3,b	;volatile
 14741                           
 14742                           ; BSR set to: 15
 14743                           ;can.c: 247: tr = 0;
 14744  003A70  0E00               	movlw	0
 14745  003A72  6E09               	movwf	_tr^0,c	;volatile
 14746                           
 14747                           ; BSR set to: 15
 14748                           ;can.c: 248: if (to == (30-1))
 14749  003A74  0E1D               	movlw	29
 14750  003A76  180B               	xorwf	_to^0,w,c	;volatile
 14751  003A78  A4D8               	btfss	status,2,c
 14752  003A7A  D003               	goto	l8631
 14753                           
 14754                           ; BSR set to: 15
 14755                           ;can.c: 249: to = 0;
 14756  003A7C  0E00               	movlw	0
 14757  003A7E  6E0B               	movwf	_to^0,c	;volatile
 14758  003A80  D003               	goto	l8635
 14759  003A82                     l8631:
 14760                           
 14761                           ; BSR set to: 15
 14762                           ;can.c: 250: else;can.c: 251: to++;
 14763  003A82  2A0B               	incf	_to^0,f,c	;volatile
 14764  003A84  D001               	goto	l8635
 14765  003A86                     l8633:
 14766                           
 14767                           ; BSR set to: 0
 14768                           ;can.c: 253: else;can.c: 254: tc++;
 14769  003A86  2A0D               	incf	_tc^0,f,c	;volatile
 14770  003A88                     l8635:
 14771                           
 14772                           ;can.c: 255: INTCONbits.GIEH = 1;
 14773  003A88  8EF2               	bsf	242,7,c	;volatile
 14774  003A8A  0012               	return		;funcret
 14775  003A8C                     __end_of_can_transmit:
 14776                           	callstack 0
 14777                           
 14778 ;; *************** function _InitPorts *****************
 14779 ;; Defined at:
 14780 ;;		line 47 in file "../../src/Main.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;		None
 14783 ;; Auto vars:     Size  Location     Type
 14784 ;;		None
 14785 ;; Return value:  Size  Location     Type
 14786 ;;                  1    wreg      void 
 14787 ;; Registers used:
 14788 ;;		wreg, status,2
 14789 ;; Tracked objects:
 14790 ;;		On entry : 3F/0
 14791 ;;		On exit  : 3F/0
 14792 ;;		Unchanged: 0/0
 14793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14798 ;;Total ram usage:        0 bytes
 14799 ;; Hardware stack levels used:    1
 14800 ;; Hardware stack levels required when called:    3
 14801 ;; This function calls:
 14802 ;;		Nothing
 14803 ;; This function is called by:
 14804 ;;		_main
 14805 ;; This function uses a non-reentrant model
 14806 ;;
 14807                           
 14808                           	psect	text35
 14809  0042F2                     __ptext35:
 14810                           	callstack 0
 14811  0042F2                     _InitPorts:
 14812                           	callstack 27
 14813                           
 14814                           ; BSR set to: 0
 14815                           ;Main.c: 49: TRISA = 0xF7;
 14816                           
 14817                           ;incstack = 0
 14818  0042F2  0EF7               	movlw	247
 14819  0042F4  6E92               	movwf	146,c	;volatile
 14820                           
 14821                           ; BSR set to: 0
 14822                           ;Main.c: 57: LATAbits.LATA3 = 1;
 14823  0042F6  8689               	bsf	137,3,c	;volatile
 14824                           
 14825                           ; BSR set to: 0
 14826                           ;Main.c: 59: PORTB = 0xFF;
 14827  0042F8  6881               	setf	129,c	;volatile
 14828                           
 14829                           ;Main.c: 60: TRISB = 0xC8;
 14830  0042FA  0EC8               	movlw	200
 14831  0042FC  6E93               	movwf	147,c	;volatile
 14832                           
 14833                           ;Main.c: 68: TRISC = 0x1F;
 14834  0042FE  0E1F               	movlw	31
 14835  004300  6E94               	movwf	148,c	;volatile
 14836                           
 14837                           ;Main.c: 77: if(hardware_version == 0)
 14838  004302  519A               	movf	_hardware_version& (0+255),w,b
 14839  004304  A4D8               	btfss	status,2,c
 14840  004306  D002               	goto	l9903
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;Main.c: 78: {;Main.c: 79: TRISD = 0x7F;
 14844  004308  0E7F               	movlw	127
 14845  00430A  D001               	goto	L31
 14846  00430C                     l9903:
 14847                           
 14848                           ; BSR set to: 0
 14849                           ;Main.c: 89: else;Main.c: 90: TRISD = 0x80;
 14850  00430C  0E80               	movlw	128
 14851  00430E                     L31:
 14852  00430E  6E95               	movwf	149,c	;volatile
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;Main.c: 92: TRISE = 0x00;
 14856  004310  0E00               	movlw	0
 14857  004312  6E96               	movwf	150,c	;volatile
 14858                           
 14859                           ;Main.c: 97: LATB = 0;
 14860  004314  0E00               	movlw	0
 14861  004316  6E8A               	movwf	138,c	;volatile
 14862                           
 14863                           ;Main.c: 98: LATC = 0;
 14864  004318  0E00               	movlw	0
 14865  00431A  6E8B               	movwf	139,c	;volatile
 14866                           
 14867                           ;Main.c: 99: LATD = 0;
 14868  00431C  0E00               	movlw	0
 14869  00431E  6E8C               	movwf	140,c	;volatile
 14870                           
 14871                           ;Main.c: 100: LATE = 0;
 14872  004320  0E00               	movlw	0
 14873  004322  6E8D               	movwf	141,c	;volatile
 14874                           
 14875                           ; BSR set to: 0
 14876  004324  0012               	return		;funcret
 14877  004326                     __end_of_InitPorts:
 14878                           	callstack 0
 14879                           
 14880 ;; *************** function _DelayMs *****************
 14881 ;; Defined at:
 14882 ;;		line 36 in file "../../src/Main.c"
 14883 ;; Parameters:    Size  Location     Type
 14884 ;;  tick            2   10[BANK0 ] unsigned int 
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  i               4   12[BANK0 ] volatile unsigned long 
 14887 ;; Return value:  Size  Location     Type
 14888 ;;                  1    wreg      void 
 14889 ;; Registers used:
 14890 ;;		wreg, status,2, status,0
 14891 ;; Tracked objects:
 14892 ;;		On entry : 3F/0
 14893 ;;		On exit  : 3F/0
 14894 ;;		Unchanged: 0/0
 14895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14896 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14897 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14899 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14900 ;;Total ram usage:        6 bytes
 14901 ;; Hardware stack levels used:    1
 14902 ;; Hardware stack levels required when called:    3
 14903 ;; This function calls:
 14904 ;;		Nothing
 14905 ;; This function is called by:
 14906 ;;		_main
 14907 ;; This function uses a non-reentrant model
 14908 ;;
 14909                           
 14910                           	psect	text36
 14911  0041DA                     __ptext36:
 14912                           	callstack 0
 14913  0041DA                     _DelayMs:
 14914                           	callstack 27
 14915                           
 14916                           ; BSR set to: 0
 14917                           ;Main.c: 37: volatile unsigned long i;;Main.c: 39: while(tick--)
 14918                           
 14919                           ; BSR set to: 0
 14920                           ;incstack = 0
 14921  0041DA  D01C               	goto	l9893
 14922  0041DC                     l9885:
 14923                           
 14924                           ; BSR set to: 0
 14925                           ;Main.c: 40: {;Main.c: 41: for (i = 0; i < 165; i++);
 14926  0041DC  0E00               	movlw	0
 14927  0041DE  6FC8               	movwf	DelayMs@i& (0+255),b	;volatile
 14928  0041E0  0E00               	movlw	0
 14929  0041E2  6FC9               	movwf	(DelayMs@i+1)& (0+255),b	;volatile
 14930  0041E4  0E00               	movlw	0
 14931  0041E6  6FCA               	movwf	(DelayMs@i+2)& (0+255),b	;volatile
 14932  0041E8  0E00               	movlw	0
 14933  0041EA  6FCB               	movwf	(DelayMs@i+3)& (0+255),b	;volatile
 14934                           
 14935                           ; BSR set to: 0
 14936  0041EC  51CB               	movf	(DelayMs@i+3)& (0+255),w,b	;volatile
 14937  0041EE  11CA               	iorwf	(DelayMs@i+2)& (0+255),w,b	;volatile
 14938  0041F0  11C9               	iorwf	(DelayMs@i+1)& (0+255),w,b	;volatile
 14939  0041F2  E10F               	bnz	l478
 14940  0041F4  D00A               	goto	L32
 14941  0041F6                     l9891:
 14942                           
 14943                           ; BSR set to: 0
 14944  0041F6  0E01               	movlw	1
 14945  0041F8  27C8               	addwf	DelayMs@i& (0+255),f,b	;volatile
 14946  0041FA  0E00               	movlw	0
 14947  0041FC  23C9               	addwfc	(DelayMs@i+1)& (0+255),f,b	;volatile
 14948  0041FE  23CA               	addwfc	(DelayMs@i+2)& (0+255),f,b	;volatile
 14949  004200  23CB               	addwfc	(DelayMs@i+3)& (0+255),f,b	;volatile
 14950  004202  51CB               	movf	(DelayMs@i+3)& (0+255),w,b	;volatile
 14951  004204  11CA               	iorwf	(DelayMs@i+2)& (0+255),w,b	;volatile
 14952  004206  11C9               	iorwf	(DelayMs@i+1)& (0+255),w,b	;volatile
 14953  004208  E104               	bnz	u12520
 14954  00420A                     L32:
 14955  00420A  0EA5               	movlw	165
 14956  00420C  5DC8               	subwf	DelayMs@i& (0+255),w,b	;volatile
 14957  00420E  A0D8               	btfss	status,0,c
 14958  004210  D7F2               	goto	l9891
 14959  004212                     u12520:
 14960  004212                     l478:
 14961                           
 14962                           ; BSR set to: 0
 14963  004212  0004               	clrwdt		;# 
 14964  004214                     l9893:
 14965  004214  0100               	movlb	0	; () banked
 14966  004216  07C6               	decf	DelayMs@tick& (0+255),f,b
 14967  004218  A0D8               	btfss	status,0,c
 14968  00421A  07C7               	decf	(DelayMs@tick+1)& (0+255),f,b
 14969  00421C  29C6               	incf	DelayMs@tick& (0+255),w,b
 14970  00421E  E1DE               	bnz	l9885
 14971  004220  29C7               	incf	(DelayMs@tick+1)& (0+255),w,b
 14972  004222  B4D8               	btfsc	status,2,c
 14973  004224  0012               	return	
 14974  004226  D7DA               	goto	l9885
 14975  004228                     __end_of_DelayMs:
 14976                           	callstack 0
 14977                           
 14978 ;; *************** function _InterruptHandlerLow *****************
 14979 ;; Defined at:
 14980 ;;		line 8 in file "../../src/interrupt.c"
 14981 ;; Parameters:    Size  Location     Type
 14982 ;;		None
 14983 ;; Auto vars:     Size  Location     Type
 14984 ;;  buf             2    1[BANK0 ] unsigned char [2]
 14985 ;;  ten             2    7[BANK0 ] unsigned int 
 14986 ;;  unit            2    5[BANK0 ] unsigned int 
 14987 ;;  i               1    9[BANK0 ] unsigned char 
 14988 ;;  pos             1    4[BANK0 ] char 
 14989 ;;  j               1    3[BANK0 ] unsigned char 
 14990 ;;  arrow_mes       1    0[BANK0 ] unsigned char 
 14991 ;; Return value:  Size  Location     Type
 14992 ;;                  1    wreg      void 
 14993 ;; Registers used:
 14994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15001 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15002 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15003 ;;      Totals:        14      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15004 ;;Total ram usage:       24 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; Hardware stack levels required when called:    2
 15007 ;; This function calls:
 15008 ;;		_SPI_SendOneByte
 15009 ;;		i1___lbmod
 15010 ;; This function is called by:
 15011 ;;		Interrupt level 1
 15012 ;; This function uses a non-reentrant model
 15013 ;;
 15014                           
 15015                           	psect	intcodelo
 15016  000018                     __pintcodelo:
 15017                           	callstack 0
 15018  000018                     _InterruptHandlerLow:
 15019                           	callstack 25
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;incstack = 0
 15023  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 15024  00001A  CFD8 F042          	movff	status,??_InterruptHandlerLow+3
 15025  00001E  CFE8 F043          	movff	wreg,??_InterruptHandlerLow+4
 15026  000022  CFE0 F044          	movff	bsr,??_InterruptHandlerLow+5
 15027  000026  CFD9 F045          	movff	fsr2l,??_InterruptHandlerLow+6
 15028  00002A  CFDA F046          	movff	fsr2h,??_InterruptHandlerLow+7
 15029  00002E  CFF3 F047          	movff	prodl,??_InterruptHandlerLow+8
 15030  000032  CFF4 F048          	movff	prodh,??_InterruptHandlerLow+9
 15031  000036  CFF6 F049          	movff	tblptrl,??_InterruptHandlerLow+10
 15032  00003A  CFF7 F04A          	movff	tblptrh,??_InterruptHandlerLow+11
 15033  00003E  CFF8 F04B          	movff	tblptru,??_InterruptHandlerLow+12
 15034  000042  CFF5 F04C          	movff	tablat,??_InterruptHandlerLow+13
 15035                           
 15036                           ;interrupt.c: 9: BYTE i, j, arrow_mes;;interrupt.c: 10: SBYTE pos;;interrupt.c: 11: WORD
      +                           ten, unit;;interrupt.c: 12: BYTE buf[2];;interrupt.c: 13: static BYTE timer_100ms = 0;;
      +                          interrupt.c: 14: static BYTE count = 0;;interrupt.c: 15: static BYTE a = 0;;interrupt.c:
      +                           16: static BYTE timer_cnt = 0;;interrupt.c: 18: if (INTCONbits.TMR0IF)
 15037  000046  A4F2               	btfss	242,2,c	;volatile
 15038  000048  D0A7               	goto	i1l1550
 15039                           
 15040                           ;interrupt.c: 19: {;interrupt.c: 20: INTCONbits.TMR0IF = 0;
 15041  00004A  94F2               	bcf	242,2,c	;volatile
 15042                           
 15043                           ;interrupt.c: 21: TMR0H = 0x0C;
 15044  00004C  0E0C               	movlw	12
 15045  00004E  6ED7               	movwf	215,c	;volatile
 15046                           
 15047                           ;interrupt.c: 22: TMR0L = 0x00;
 15048  000050  0E00               	movlw	0
 15049  000052  6ED6               	movwf	214,c	;volatile
 15050                           
 15051                           ;interrupt.c: 23: bTime.Time_500ms = 1;
 15052  000054  840E               	bsf	_bTime^0,2,c
 15053                           
 15054                           ;interrupt.c: 25: if (sdo_timer)
 15055  000056  0100               	movlb	0	; () banked
 15056  000058  518E               	movf	_sdo_timer& (0+255),w,b
 15057  00005A  A4D8               	btfss	status,2,c
 15058                           
 15059                           ; BSR set to: 0
 15060                           ;interrupt.c: 26: sdo_timer --;
 15061  00005C  078E               	decf	_sdo_timer& (0+255),f,b
 15062                           
 15063                           ; BSR set to: 0
 15064                           ;interrupt.c: 27: if (hsetime)
 15065  00005E  5017               	movf	_hsetime^0,w,c	;volatile
 15066  000060  A4D8               	btfss	status,2,c
 15067                           
 15068                           ; BSR set to: 0
 15069                           ;interrupt.c: 28: hsetime--;
 15070  000062  0617               	decf	_hsetime^0,f,c	;volatile
 15071                           
 15072                           ; BSR set to: 0
 15073                           ;interrupt.c: 29: if (!hsetime)
 15074  000064  5017               	movf	_hsetime^0,w,c	;volatile
 15075  000066  A4D8               	btfss	status,2,c
 15076  000068  D002               	goto	i1l1553
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;interrupt.c: 30: hsecheck = 1;
 15080  00006A  0E01               	movlw	1
 15081  00006C  6F88               	movwf	_hsecheck& (0+255),b	;volatile
 15082  00006E                     i1l1553:
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;interrupt.c: 31: if(can_inittime)
 15086  00006E  5186               	movf	_can_inittime& (0+255),w,b	;volatile
 15087  000070  A4D8               	btfss	status,2,c
 15088                           
 15089                           ; BSR set to: 0
 15090                           ;interrupt.c: 32: --can_inittime;
 15091  000072  0786               	decf	_can_inittime& (0+255),f,b	;volatile
 15092                           
 15093                           ; BSR set to: 0
 15094                           ;interrupt.c: 33: if (heartbeat)
 15095  000074  518C               	movf	_heartbeat& (0+255),w,b
 15096  000076  A4D8               	btfss	status,2,c
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;interrupt.c: 34: heartbeat --;
 15100  000078  078C               	decf	_heartbeat& (0+255),f,b
 15101                           
 15102                           ; BSR set to: 0
 15103                           ;interrupt.c: 35: if(flashtimer)
 15104  00007A  5199               	movf	_flashtimer& (0+255),w,b
 15105  00007C  A4D8               	btfss	status,2,c
 15106                           
 15107                           ; BSR set to: 0
 15108                           ;interrupt.c: 36: flashtimer--;
 15109  00007E  0799               	decf	_flashtimer& (0+255),f,b
 15110                           
 15111                           ; BSR set to: 0
 15112                           ;interrupt.c: 37: if (landingcalltimer)
 15113  000080  518B               	movf	_landingcalltimer& (0+255),w,b
 15114  000082  A4D8               	btfss	status,2,c
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;interrupt.c: 38: landingcalltimer --;
 15118  000084  078B               	decf	_landingcalltimer& (0+255),f,b
 15119                           
 15120                           ; BSR set to: 0
 15121                           ;interrupt.c: 39: if(display_timer)
 15122  000086  5197               	movf	_display_timer& (0+255),w,b
 15123  000088  A4D8               	btfss	status,2,c
 15124                           
 15125                           ; BSR set to: 0
 15126                           ;interrupt.c: 40: display_timer--;
 15127  00008A  0797               	decf	_display_timer& (0+255),f,b
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;interrupt.c: 41: if(can_passive_time)
 15131  00008C  5016               	movf	_can_passive_time^0,w,c
 15132  00008E  A4D8               	btfss	status,2,c
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;interrupt.c: 42: --can_passive_time;
 15136  000090  0616               	decf	_can_passive_time^0,f,c
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;interrupt.c: 43: com_can_work++;
 15140  000092  2B84               	incf	_com_can_work& (0+255),f,b
 15141                           
 15142                           ;interrupt.c: 44: timer_cnt++;
 15143  000094  2A04               	incf	InterruptHandlerLow@timer_cnt^0,f,c
 15144                           
 15145                           ; BSR set to: 0
 15146                           ;interrupt.c: 45: if((timer_cnt % 2) == 0)
 15147  000096  B004               	btfsc	InterruptHandlerLow@timer_cnt^0,0,c
 15148  000098  D002               	goto	i1l10953
 15149                           
 15150                           ; BSR set to: 0
 15151                           ;interrupt.c: 46: timer_1S5 = 1;
 15152  00009A  0E01               	movlw	1
 15153  00009C  6F98               	movwf	_timer_1S5& (0+255),b
 15154  00009E                     i1l10953:
 15155                           
 15156                           ; BSR set to: 0
 15157                           ;interrupt.c: 47: if((timer_cnt % 10) == 0)
 15158  00009E  0E0A               	movlw	10
 15159  0000A0  6E3B               	movwf	i1___lbmod@divisor^0,c
 15160  0000A2  5004               	movf	InterruptHandlerLow@timer_cnt^0,w,c
 15161  0000A4  ECD7  F021         	call	i1___lbmod
 15162  0000A8  0900               	iorlw	0
 15163  0000AA  B4D8               	btfsc	status,2,c
 15164                           
 15165                           ;interrupt.c: 48: bTime.Time_5s = 1;
 15166  0000AC  880E               	bsf	_bTime^0,4,c
 15167                           
 15168                           ;interrupt.c: 50: if(display [0] == 85)
 15169  0000AE  0E55               	movlw	85
 15170  0000B0  0100               	movlb	0	; () banked
 15171  0000B2  1968               	xorwf	_display& (0+255),w,b	;volatile
 15172  0000B4  A4D8               	btfss	status,2,c
 15173  0000B6  D011               	goto	i1l10965
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;interrupt.c: 51: {;interrupt.c: 52: if((backlight_time_count++ > backlight_off_time) &&
      +                           (light_para_ok))
 15177  0000B8  5176               	movf	_backlight_time_count& (0+255),w,b
 15178  0000BA  6E3F               	movwf	??_InterruptHandlerLow^0,c
 15179  0000BC  5177               	movf	(_backlight_time_count+1)& (0+255),w,b
 15180  0000BE  6E40               	movwf	(??_InterruptHandlerLow+1)^0,c
 15181  0000C0  4B76               	infsnz	_backlight_time_count& (0+255),f,b
 15182  0000C2  2B77               	incf	(_backlight_time_count+1)& (0+255),f,b
 15183  0000C4  503F               	movf	??_InterruptHandlerLow^0,w,c
 15184  0000C6  5D78               	subwf	_backlight_off_time& (0+255),w,b
 15185  0000C8  5040               	movf	(??_InterruptHandlerLow+1)^0,w,c
 15186  0000CA  5979               	subwfb	(_backlight_off_time+1)& (0+255),w,b
 15187  0000CC  B0D8               	btfsc	status,0,c
 15188  0000CE  D00B               	goto	i1l1564
 15189                           
 15190                           ; BSR set to: 0
 15191  0000D0  5010               	movf	_light_para_ok^0,w,c
 15192  0000D2  B4D8               	btfsc	status,2,c
 15193  0000D4  D008               	goto	i1l1564
 15194                           
 15195                           ; BSR set to: 0
 15196                           ;interrupt.c: 53: u8Start_Dark = 1;
 15197  0000D6  0E01               	movlw	1
 15198  0000D8  D005               	goto	L33
 15199  0000DA                     i1l10965:
 15200                           
 15201                           ; BSR set to: 0
 15202                           ;interrupt.c: 55: else;interrupt.c: 56: {;interrupt.c: 57: backlight_time_count = 0;
 15203  0000DA  0E00               	movlw	0
 15204  0000DC  6F77               	movwf	(_backlight_time_count+1)& (0+255),b
 15205  0000DE  0E00               	movlw	0
 15206  0000E0  6F76               	movwf	_backlight_time_count& (0+255),b
 15207                           
 15208                           ;interrupt.c: 58: u8Start_Dark = 0;
 15209  0000E2  0E00               	movlw	0
 15210  0000E4                     L33:
 15211  0000E4  6E13               	movwf	_u8Start_Dark^0,c
 15212  0000E6                     i1l1564:
 15213                           
 15214                           ; BSR set to: 0
 15215                           ;interrupt.c: 59: };interrupt.c: 61: for (i = 0; i < 8; i++)
 15216  0000E6  0E00               	movlw	0
 15217  0000E8  6FC5               	movwf	InterruptHandlerLow@i& (0+255),b
 15218  0000EA                     i1l10967:
 15219                           
 15220                           ; BSR set to: 0
 15221  0000EA  0E07               	movlw	7
 15222  0000EC  65C5               	cpfsgt	InterruptHandlerLow@i& (0+255),b
 15223  0000EE  D001               	goto	i1l10971
 15224  0000F0  D045               	goto	i1l1566
 15225  0000F2                     i1l10971:
 15226                           
 15227                           ; BSR set to: 0
 15228                           ;interrupt.c: 62: {;interrupt.c: 63: if (outpar [i][0] == 0x44)
 15229  0000F2  51C5               	movf	InterruptHandlerLow@i& (0+255),w,b
 15230  0000F4  0D08               	mullw	8
 15231  0000F6  0E00               	movlw	low _outpar
 15232  0000F8  24F3               	addwf	243,w,c
 15233  0000FA  6ED9               	movwf	fsr2l,c
 15234  0000FC  0E01               	movlw	high _outpar
 15235  0000FE  20F4               	addwfc	prodh,w,c
 15236  000100  6EDA               	movwf	fsr2h,c
 15237  000102  0E44               	movlw	68
 15238  000104  18DE               	xorwf	postinc2,w,c
 15239  000106  A4D8               	btfss	status,2,c
 15240  000108  D037               	goto	i1l10981
 15241                           
 15242                           ; BSR set to: 0
 15243                           ;interrupt.c: 64: if (outpar [i][7])
 15244  00010A  51C5               	movf	InterruptHandlerLow@i& (0+255),w,b
 15245  00010C  0D08               	mullw	8
 15246  00010E  0E07               	movlw	low (_outpar+7)
 15247  000110  24F3               	addwf	243,w,c
 15248  000112  6ED9               	movwf	fsr2l,c
 15249  000114  0E01               	movlw	high (_outpar+7)
 15250  000116  20F4               	addwfc	prodh,w,c
 15251  000118  6EDA               	movwf	fsr2h,c
 15252  00011A  50DF               	movf	indf2,w,c
 15253  00011C  B4D8               	btfsc	status,2,c
 15254  00011E  D02C               	goto	i1l10981
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;interrupt.c: 65: {;interrupt.c: 66: outpar [i][7]--;
 15258  000120  51C5               	movf	InterruptHandlerLow@i& (0+255),w,b
 15259  000122  0D08               	mullw	8
 15260  000124  0E07               	movlw	low (_outpar+7)
 15261  000126  24F3               	addwf	243,w,c
 15262  000128  6ED9               	movwf	fsr2l,c
 15263  00012A  0E01               	movlw	high (_outpar+7)
 15264  00012C  20F4               	addwfc	prodh,w,c
 15265  00012E  6EDA               	movwf	fsr2h,c
 15266  000130  06DF               	decf	indf2,f,c
 15267                           
 15268                           ;interrupt.c: 67: if (!outpar [i][7])
 15269  000132  51C5               	movf	InterruptHandlerLow@i& (0+255),w,b
 15270  000134  0D08               	mullw	8
 15271  000136  0E07               	movlw	low (_outpar+7)
 15272  000138  24F3               	addwf	243,w,c
 15273  00013A  6ED9               	movwf	fsr2l,c
 15274  00013C  0E01               	movlw	high (_outpar+7)
 15275  00013E  20F4               	addwfc	prodh,w,c
 15276  000140  6EDA               	movwf	fsr2h,c
 15277  000142  50DF               	movf	indf2,w,c
 15278  000144  A4D8               	btfss	status,2,c
 15279  000146  D018               	goto	i1l10981
 15280                           
 15281                           ; BSR set to: 0
 15282                           ;interrupt.c: 68: {;interrupt.c: 69: (out &= ~(1 << i));
 15283  000148  C0C5  F03F         	movff	InterruptHandlerLow@i,??_InterruptHandlerLow
 15284  00014C  0E01               	movlw	1
 15285  00014E  6E40               	movwf	(??_InterruptHandlerLow+1)^0,c
 15286  000150  2A3F               	incf	??_InterruptHandlerLow^0,f,c
 15287  000152  D002               	goto	i1u1409_24
 15288  000154                     i1u1409_25:
 15289  000154  90D8               	bcf	status,0,c
 15290  000156  3640               	rlcf	(??_InterruptHandlerLow+1)^0,f,c
 15291  000158                     i1u1409_24:
 15292  000158  2E3F               	decfsz	??_InterruptHandlerLow^0,f,c
 15293  00015A  D7FC               	goto	i1u1409_25
 15294  00015C  5040               	movf	(??_InterruptHandlerLow+1)^0,w,c
 15295  00015E  0AFF               	xorlw	255
 15296  000160  162B               	andwf	_out^0,f,c	;volatile
 15297                           
 15298                           ;interrupt.c: 70: outpar [i][5] = 0;
 15299  000162  0100               	movlb	0	; () banked
 15300  000164  51C5               	movf	InterruptHandlerLow@i& (0+255),w,b
 15301  000166  0D08               	mullw	8
 15302  000168  0E05               	movlw	low (_outpar+5)
 15303  00016A  24F3               	addwf	243,w,c
 15304  00016C  6ED9               	movwf	fsr2l,c
 15305  00016E  0E01               	movlw	high (_outpar+5)
 15306  000170  20F4               	addwfc	prodh,w,c
 15307  000172  6EDA               	movwf	fsr2h,c
 15308  000174  0E00               	movlw	0
 15309  000176  6EDF               	movwf	indf2,c
 15310  000178                     i1l10981:
 15311                           
 15312                           ; BSR set to: 0
 15313  000178  2BC5               	incf	InterruptHandlerLow@i& (0+255),f,b
 15314  00017A  D7B7               	goto	i1l10967
 15315  00017C                     i1l1566:
 15316                           
 15317                           ; BSR set to: 0
 15318                           ;interrupt.c: 71: };interrupt.c: 72: };interrupt.c: 73: };interrupt.c: 74: if (arrowflas
      +                          h & 0x01)
 15319  00017C  A195               	btfss	_arrowflash& (0+255),0,b
 15320  00017E  D00C               	goto	i1l1550
 15321                           
 15322                           ; BSR set to: 0
 15323                           ;interrupt.c: 75: {;interrupt.c: 76: if(scroll)
 15324  000180  5025               	movf	_scroll^0,w,c
 15325  000182  B4D8               	btfsc	status,2,c
 15326  000184  D007               	goto	i1l10995
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;interrupt.c: 77: {;interrupt.c: 78: if (arrowflash & 0x80)
 15330  000186  AF95               	btfss	_arrowflash& (0+255),7,b
 15331  000188  D004               	goto	i1l10993
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;interrupt.c: 79: {;interrupt.c: 80: arrowflash &= ~0x80;
 15335  00018A  9F95               	bcf	_arrowflash& (0+255),7,b
 15336                           
 15337                           ; BSR set to: 0
 15338                           ;interrupt.c: 81: display[0] = 85;
 15339  00018C  0E55               	movlw	85
 15340  00018E  6F68               	movwf	_display& (0+255),b	;volatile
 15341                           
 15342                           ;interrupt.c: 82: }
 15343  000190  D003               	goto	i1l1550
 15344  000192                     i1l10993:
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;interrupt.c: 83: else;interrupt.c: 84: {;interrupt.c: 85: arrowflash |= 0x80;
 15348  000192  8F95               	bsf	_arrowflash& (0+255),7,b
 15349  000194                     i1l10995:
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;interrupt.c: 89: else;interrupt.c: 90: display[0] = flashcontent;
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;interrupt.c: 86: display[0] = flashcontent;
 15356  000194  C024  F068         	movff	_flashcontent,_display	;volatile
 15357  000198                     i1l1550:
 15358                           
 15359                           ;interrupt.c: 91: };interrupt.c: 92: };interrupt.c: 93: if (PIR1bits.TMR2IF)
 15360  000198  A29E               	btfss	158,1,c	;volatile
 15361  00019A  D083               	goto	i1l11043
 15362                           
 15363                           ;interrupt.c: 94: {;interrupt.c: 95: PIR1bits.TMR2IF = 0;
 15364  00019C  929E               	bcf	158,1,c	;volatile
 15365                           
 15366                           ;interrupt.c: 96: if (!nmtstate)
 15367  00019E  0100               	movlb	0	; () banked
 15368  0001A0  5190               	movf	_nmtstate& (0+255),w,b
 15369  0001A2  A4D8               	btfss	status,2,c
 15370  0001A4  D007               	goto	i1l11005
 15371                           
 15372                           ; BSR set to: 0
 15373                           ;interrupt.c: 97: {;interrupt.c: 98: if (nmtwait)
 15374  0001A6  517E               	movf	_nmtwait& (0+255),w,b	;volatile
 15375  0001A8  117F               	iorwf	(_nmtwait+1)& (0+255),w,b	;volatile
 15376  0001AA  B4D8               	btfsc	status,2,c
 15377  0001AC  D003               	goto	i1l11005
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;interrupt.c: 99: nmtwait--;
 15381  0001AE  077E               	decf	_nmtwait& (0+255),f,b	;volatile
 15382  0001B0  A0D8               	btfss	status,0,c
 15383  0001B2  077F               	decf	(_nmtwait+1)& (0+255),f,b	;volatile
 15384  0001B4                     i1l11005:
 15385                           
 15386                           ; BSR set to: 0
 15387                           ;interrupt.c: 100: };interrupt.c: 101: if (!input_detect)
 15388  0001B4  5018               	movf	_input_detect^0,w,c
 15389  0001B6  A4D8               	btfss	status,2,c
 15390  0001B8  D036               	goto	i1l11027
 15391                           
 15392                           ; BSR set to: 0
 15393                           ;interrupt.c: 102: {;interrupt.c: 103: input [2] = input [1];
 15394  0001BA  C002  F003         	movff	_input+1,_input+2	;volatile
 15395                           
 15396                           ;interrupt.c: 104: input [1] = input [0];
 15397  0001BE  C001  F002         	movff	_input,_input+1	;volatile
 15398                           
 15399                           ; BSR set to: 0
 15400                           ;interrupt.c: 105: input[0] = PORTC & 0x0F;
 15401  0001C2  5082               	movf	130,w,c	;volatile
 15402  0001C4  0B0F               	andlw	15
 15403  0001C6  6E01               	movwf	_input^0,c	;volatile
 15404                           
 15405                           ;interrupt.c: 106: input[0] = (input[0] ^ 0x0F) & 0x0F;
 15406  0001C8  5001               	movf	_input^0,w,c	;volatile
 15407  0001CA  0A0F               	xorlw	15
 15408  0001CC  0B0F               	andlw	15
 15409  0001CE  6E01               	movwf	_input^0,c	;volatile
 15410                           
 15411                           ; BSR set to: 0
 15412                           ;interrupt.c: 107: for (i = 0; i < 8; i++)
 15413  0001D0  0E00               	movlw	0
 15414  0001D2  6FC5               	movwf	InterruptHandlerLow@i& (0+255),b
 15415  0001D4                     i1l11013:
 15416                           
 15417                           ; BSR set to: 0
 15418  0001D4  0E07               	movlw	7
 15419  0001D6  65C5               	cpfsgt	InterruptHandlerLow@i& (0+255),b
 15420  0001D8  D001               	goto	i1l11017
 15421  0001DA  D025               	goto	i1l11027
 15422  0001DC                     i1l11017:
 15423                           
 15424                           ; BSR set to: 0
 15425                           ;interrupt.c: 108: {;interrupt.c: 109: j = 0x01 << i;
 15426  0001DC  C0C5  F03F         	movff	InterruptHandlerLow@i,??_InterruptHandlerLow
 15427  0001E0  0E01               	movlw	1
 15428  0001E2  6E40               	movwf	(??_InterruptHandlerLow+1)^0,c
 15429  0001E4  2A3F               	incf	??_InterruptHandlerLow^0,f,c
 15430  0001E6  D002               	goto	i1u1418_24
 15431  0001E8                     i1u1418_25:
 15432  0001E8  90D8               	bcf	status,0,c
 15433  0001EA  3640               	rlcf	(??_InterruptHandlerLow+1)^0,f,c
 15434  0001EC                     i1u1418_24:
 15435  0001EC  2E3F               	decfsz	??_InterruptHandlerLow^0,f,c
 15436  0001EE  D7FC               	goto	i1u1418_25
 15437  0001F0  5040               	movf	(??_InterruptHandlerLow+1)^0,w,c
 15438  0001F2  0100               	movlb	0	; () banked
 15439  0001F4  6FBF               	movwf	InterruptHandlerLow@j& (0+255),b
 15440                           
 15441                           ;interrupt.c: 110: if (((input [2] & j) == (input [1] & j)) &&;interrupt.c: 111: ((input
      +                           [1] & j) == (input [0] & j)))
 15442  0001F6  5003               	movf	(_input+2)^0,w,c	;volatile
 15443  0001F8  15BF               	andwf	InterruptHandlerLow@j& (0+255),w,b
 15444  0001FA  6E3F               	movwf	??_InterruptHandlerLow^0,c
 15445  0001FC  5002               	movf	(_input+1)^0,w,c	;volatile
 15446  0001FE  15BF               	andwf	InterruptHandlerLow@j& (0+255),w,b
 15447  000200  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15448  000202  A4D8               	btfss	status,2,c
 15449  000204  D00E               	goto	i1l11023
 15450                           
 15451                           ; BSR set to: 0
 15452  000206  5002               	movf	(_input+1)^0,w,c	;volatile
 15453  000208  15BF               	andwf	InterruptHandlerLow@j& (0+255),w,b
 15454  00020A  6E3F               	movwf	??_InterruptHandlerLow^0,c
 15455  00020C  5001               	movf	_input^0,w,c	;volatile
 15456  00020E  15BF               	andwf	InterruptHandlerLow@j& (0+255),w,b
 15457  000210  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15458  000212  A4D8               	btfss	status,2,c
 15459  000214  D006               	goto	i1l11023
 15460                           
 15461                           ; BSR set to: 0
 15462                           ;interrupt.c: 112: {;interrupt.c: 113: in &= ~j;
 15463  000216  51BF               	movf	InterruptHandlerLow@j& (0+255),w,b
 15464  000218  0AFF               	xorlw	255
 15465  00021A  17BB               	andwf	_in& (0+255),f,b	;volatile
 15466                           
 15467                           ;interrupt.c: 114: in |= (input [2] & j);
 15468  00021C  5003               	movf	(_input+2)^0,w,c	;volatile
 15469  00021E  15BF               	andwf	InterruptHandlerLow@j& (0+255),w,b
 15470  000220  13BB               	iorwf	_in& (0+255),f,b	;volatile
 15471  000222                     i1l11023:
 15472                           
 15473                           ; BSR set to: 0
 15474  000222  2BC5               	incf	InterruptHandlerLow@i& (0+255),f,b
 15475  000224  D7D7               	goto	i1l11013
 15476  000226                     i1l11027:
 15477                           
 15478                           ; BSR set to: 0
 15479                           ;interrupt.c: 115: };interrupt.c: 116: };interrupt.c: 117: };interrupt.c: 118: ++ input_
      +                          detect;
 15480  000226  2A18               	incf	_input_detect^0,f,c
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;interrupt.c: 119: if (input_detect == 7)
 15484  000228  0E07               	movlw	7
 15485  00022A  1818               	xorwf	_input_detect^0,w,c
 15486  00022C  A4D8               	btfss	status,2,c
 15487  00022E  D002               	goto	i1l11033
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;interrupt.c: 120: input_detect = 0;
 15491  000230  0E00               	movlw	0
 15492  000232  6E18               	movwf	_input_detect^0,c
 15493  000234                     i1l11033:
 15494                           
 15495                           ; BSR set to: 0
 15496                           ;interrupt.c: 122: i = out ^ out_polarity;
 15497  000234  502B               	movf	_out^0,w,c	;volatile
 15498  000236  1829               	xorwf	_out_polarity^0,w,c
 15499  000238  6FC5               	movwf	InterruptHandlerLow@i& (0+255),b
 15500                           
 15501                           ; BSR set to: 0
 15502                           ;interrupt.c: 123: LATBbits.LATB0 = ((i >> 1) & 1);
 15503  00023A  C0C5  F03F         	movff	InterruptHandlerLow@i,??_InterruptHandlerLow
 15504  00023E  90D8               	bcf	status,0,c
 15505  000240  323F               	rrcf	??_InterruptHandlerLow^0,f,c
 15506  000242  0E01               	movlw	1
 15507  000244  163F               	andwf	??_InterruptHandlerLow^0,f,c
 15508  000246  508A               	movf	138,w,c	;volatile
 15509  000248  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15510  00024A  0BFE               	andlw	-2
 15511  00024C  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15512  00024E  6E8A               	movwf	138,c	;volatile
 15513                           
 15514                           ; BSR set to: 0
 15515                           ;interrupt.c: 124: LATBbits.LATB1 = i & 0x01;
 15516  000250  C0C5  F03F         	movff	InterruptHandlerLow@i,??_InterruptHandlerLow
 15517  000254  0E01               	movlw	1
 15518  000256  163F               	andwf	??_InterruptHandlerLow^0,f,c
 15519  000258  463F               	rlncf	??_InterruptHandlerLow^0,f,c
 15520  00025A  508A               	movf	138,w,c	;volatile
 15521  00025C  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15522  00025E  0BFD               	andlw	-3
 15523  000260  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15524  000262  6E8A               	movwf	138,c	;volatile
 15525                           
 15526                           ; BSR set to: 0
 15527                           ;interrupt.c: 125: LATBbits.LATB4 = ((i >> 3) & 1);
 15528  000264  C0C5  F03F         	movff	InterruptHandlerLow@i,??_InterruptHandlerLow
 15529  000268  90D8               	bcf	status,0,c
 15530  00026A  323F               	rrcf	??_InterruptHandlerLow^0,f,c
 15531  00026C  90D8               	bcf	status,0,c
 15532  00026E  323F               	rrcf	??_InterruptHandlerLow^0,f,c
 15533  000270  90D8               	bcf	status,0,c
 15534  000272  323F               	rrcf	??_InterruptHandlerLow^0,f,c
 15535  000274  0E01               	movlw	1
 15536  000276  163F               	andwf	??_InterruptHandlerLow^0,f,c
 15537  000278  3A3F               	swapf	??_InterruptHandlerLow^0,f,c
 15538  00027A  508A               	movf	138,w,c	;volatile
 15539  00027C  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15540  00027E  0BEF               	andlw	-17
 15541  000280  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15542  000282  6E8A               	movwf	138,c	;volatile
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;interrupt.c: 126: LATBbits.LATB5 = ((i >> 2) & 1);
 15546  000284  C0C5  F03F         	movff	InterruptHandlerLow@i,??_InterruptHandlerLow
 15547  000288  90D8               	bcf	status,0,c
 15548  00028A  323F               	rrcf	??_InterruptHandlerLow^0,f,c
 15549  00028C  90D8               	bcf	status,0,c
 15550  00028E  323F               	rrcf	??_InterruptHandlerLow^0,f,c
 15551  000290  0E01               	movlw	1
 15552  000292  163F               	andwf	??_InterruptHandlerLow^0,f,c
 15553  000294  3A3F               	swapf	??_InterruptHandlerLow^0,f,c
 15554  000296  463F               	rlncf	??_InterruptHandlerLow^0,f,c
 15555  000298  508A               	movf	138,w,c	;volatile
 15556  00029A  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15557  00029C  0BDF               	andlw	-33
 15558  00029E  183F               	xorwf	??_InterruptHandlerLow^0,w,c
 15559  0002A0  6E8A               	movwf	138,c	;volatile
 15560  0002A2                     i1l11043:
 15561                           
 15562                           ;interrupt.c: 127: };interrupt.c: 129: if (PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 15563  0002A2  B09E               	btfsc	158,0,c	;volatile
 15564  0002A4  A09D               	btfss	157,0,c	;volatile
 15565  0002A6  D1C2               	goto	i1l1637
 15566                           
 15567                           ;interrupt.c: 130: {;interrupt.c: 131: PIR1bits.TMR1IF = 0;
 15568  0002A8  909E               	bcf	158,0,c	;volatile
 15569                           
 15570                           ;interrupt.c: 132: TMR1H = timer1_countH;
 15571  0002AA  C015  FFCF         	movff	_timer1_countH,4047	;volatile
 15572                           
 15573                           ;interrupt.c: 133: TMR1L = timer1_countL;
 15574  0002AE  C014  FFCE         	movff	_timer1_countL,4046	;volatile
 15575                           
 15576                           ;interrupt.c: 134: ++count;
 15577  0002B2  2A06               	incf	InterruptHandlerLow@count^0,f,c
 15578                           
 15579                           ;interrupt.c: 135: if(hardware_version == 0)
 15580  0002B4  0100               	movlb	0	; () banked
 15581  0002B6  519A               	movf	_hardware_version& (0+255),w,b
 15582  0002B8  A4D8               	btfss	status,2,c
 15583  0002BA  D0BB               	goto	i1l1610
 15584                           
 15585                           ; BSR set to: 0
 15586                           ;interrupt.c: 136: {;interrupt.c: 137: if((count % 50) == 0)
 15587  0002BC  0E32               	movlw	50
 15588  0002BE  6E3B               	movwf	i1___lbmod@divisor^0,c
 15589  0002C0  5006               	movf	InterruptHandlerLow@count^0,w,c
 15590  0002C2  ECD7  F021         	call	i1___lbmod
 15591  0002C6  0900               	iorlw	0
 15592  0002C8  A4D8               	btfss	status,2,c
 15593  0002CA  D005               	goto	i1l11057
 15594                           
 15595                           ;interrupt.c: 138: {;interrupt.c: 139: display_scantimer = 1;
 15596  0002CC  0E01               	movlw	1
 15597  0002CE  0100               	movlb	0	; () banked
 15598  0002D0  6F85               	movwf	_display_scantimer& (0+255),b
 15599                           
 15600                           ;interrupt.c: 140: timer_100ms = 1;
 15601  0002D2  0E01               	movlw	1
 15602  0002D4  6E07               	movwf	InterruptHandlerLow@timer_100ms^0,c
 15603  0002D6                     i1l11057:
 15604                           
 15605                           ;interrupt.c: 141: };interrupt.c: 142: ten = tFloor_Tab[display[1]];
 15606  0002D6  0100               	movlb	0	; () banked
 15607  0002D8  5169               	movf	(_display+1)& (0+255),w,b	;volatile
 15608  0002DA  0D02               	mullw	2
 15609  0002DC  0EBC               	movlw	low _tFloor_Tab
 15610  0002DE  24F3               	addwf	243,w,c
 15611  0002E0  6EF6               	movwf	tblptrl,c
 15612  0002E2  0E7C               	movlw	high _tFloor_Tab
 15613  0002E4  20F4               	addwfc	244,w,c
 15614  0002E6  6EF7               	movwf	tblptrh,c
 15615  0002E8                     	if	0	;There are less than 3 active tblptr bytes
 15616  0002E8                     	endif
 15617  0002E8  0009               	tblrd		*+
 15618  0002EA  CFF5 F0C3          	movff	tablat,InterruptHandlerLow@ten
 15619  0002EE  000A               	tblrd		*-
 15620  0002F0  CFF5 F0C4          	movff	tablat,InterruptHandlerLow@ten+1
 15621                           
 15622                           ; BSR set to: 0
 15623                           ;interrupt.c: 143: unit = tFloor_Tab[display[2]];
 15624  0002F4  516A               	movf	(_display+2)& (0+255),w,b	;volatile
 15625  0002F6  0D02               	mullw	2
 15626  0002F8  0EBC               	movlw	low _tFloor_Tab
 15627  0002FA  24F3               	addwf	243,w,c
 15628  0002FC  6EF6               	movwf	tblptrl,c
 15629  0002FE  0E7C               	movlw	high _tFloor_Tab
 15630  000300  20F4               	addwfc	244,w,c
 15631  000302  6EF7               	movwf	tblptrh,c
 15632  000304                     	if	0	;There are less than 3 active tblptr bytes
 15633  000304                     	endif
 15634  000304  0009               	tblrd		*+
 15635  000306  CFF5 F0C1          	movff	tablat,InterruptHandlerLow@unit
 15636  00030A  000A               	tblrd		*-
 15637  00030C  CFF5 F0C2          	movff	tablat,InterruptHandlerLow@unit+1
 15638                           
 15639                           ;interrupt.c: 145: if(!display_STN_mode)
 15640  000310  500F               	movf	_display_STN_mode^0,w,c
 15641  000312  A4D8               	btfss	status,2,c
 15642  000314  D00F               	goto	i1l11067
 15643                           
 15644                           ; BSR set to: 0
 15645                           ;interrupt.c: 146: {;interrupt.c: 147: if((unit == (0x00 + 0x00 + 0x40 + 0x100 + 0x00 + 
      +                          0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00)) && !ten)
 15646  000316  0E40               	movlw	64
 15647  000318  19C1               	xorwf	InterruptHandlerLow@unit& (0+255),w,b
 15648  00031A  E134               	bnz	i1l11085
 15649  00031C  05C2               	decf	(InterruptHandlerLow@unit+1)& (0+255),w,b
 15650  00031E  A4D8               	btfss	status,2,c
 15651  000320  D031               	goto	i1l11085
 15652                           
 15653                           ; BSR set to: 0
 15654  000322  51C3               	movf	InterruptHandlerLow@ten& (0+255),w,b
 15655  000324  11C4               	iorwf	(InterruptHandlerLow@ten+1)& (0+255),w,b
 15656  000326  A4D8               	btfss	status,2,c
 15657  000328  D02D               	goto	i1l11085
 15658  00032A                     i1u1428_20:
 15659                           
 15660                           ; BSR set to: 0
 15661                           ;interrupt.c: 148: unit = (0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x4000 + 0x01 + 0x0
      +                          0 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00);
 15662  00032A  0E40               	movlw	64
 15663  00032C  6FC2               	movwf	(InterruptHandlerLow@unit+1)& (0+255),b
 15664  00032E  0E01               	movlw	1
 15665  000330  6FC1               	movwf	InterruptHandlerLow@unit& (0+255),b
 15666                           
 15667                           ; BSR set to: 0
 15668                           ;interrupt.c: 149: }
 15669  000332  D028               	goto	i1l11085
 15670  000334                     i1l11067:
 15671                           
 15672                           ; BSR set to: 0
 15673                           ;interrupt.c: 150: else if(display_STN_mode == 1)
 15674  000334  040F               	decf	_display_STN_mode^0,w,c
 15675  000336  A4D8               	btfss	status,2,c
 15676  000338  D025               	goto	i1l11085
 15677                           
 15678                           ; BSR set to: 0
 15679                           ;interrupt.c: 151: {;interrupt.c: 152: if(unit == (0x00 + 0x00 + 0x40 + 0x100 + 0x00 + 0
      +                          x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00))
 15680  00033A  0E40               	movlw	64
 15681  00033C  19C1               	xorwf	InterruptHandlerLow@unit& (0+255),w,b
 15682  00033E  E112               	bnz	i1l11079
 15683  000340  05C2               	decf	(InterruptHandlerLow@unit+1)& (0+255),w,b
 15684  000342  A4D8               	btfss	status,2,c
 15685  000344  D00F               	goto	i1l11079
 15686                           
 15687                           ; BSR set to: 0
 15688                           ;interrupt.c: 153: {;interrupt.c: 154: if(!ten)
 15689  000346  51C3               	movf	InterruptHandlerLow@ten& (0+255),w,b
 15690  000348  11C4               	iorwf	(InterruptHandlerLow@ten+1)& (0+255),w,b
 15691  00034A  B4D8               	btfsc	status,2,c
 15692  00034C  D7EE               	goto	i1u1428_20
 15693                           
 15694                           ; BSR set to: 0
 15695                           ;interrupt.c: 156: else if(ten == (0x00 + 0x00 + 0x40 + 0x100 + 0x00 + 0x00 + 0x00 + 0x0
      +                          0 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00))
 15696  00034E  0E40               	movlw	64
 15697  000350  19C3               	xorwf	InterruptHandlerLow@ten& (0+255),w,b
 15698  000352  E118               	bnz	i1l11085
 15699  000354  05C4               	decf	(InterruptHandlerLow@ten+1)& (0+255),w,b
 15700  000356  A4D8               	btfss	status,2,c
 15701  000358  D015               	goto	i1l11085
 15702                           
 15703                           ; BSR set to: 0
 15704                           ;interrupt.c: 157: {;interrupt.c: 158: unit = (0x00 + 0x00 + 0x40 + 0x100 + 0x00 + 0x00 
      +                          + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00);
 15705  00035A  0E01               	movlw	1
 15706  00035C  6FC2               	movwf	(InterruptHandlerLow@unit+1)& (0+255),b
 15707  00035E  0E40               	movlw	64
 15708  000360  6FC1               	movwf	InterruptHandlerLow@unit& (0+255),b
 15709  000362  D00C               	goto	i1u1434_20
 15710  000364                     i1l11079:
 15711                           
 15712                           ; BSR set to: 0
 15713                           ;interrupt.c: 162: else if(ten == (0x00 + 0x00 + 0x40 + 0x100 + 0x00 + 0x00 + 0x00 + 0x0
      +                          0 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00))
 15714  000364  0E40               	movlw	64
 15715  000366  19C3               	xorwf	InterruptHandlerLow@ten& (0+255),w,b
 15716  000368  E10D               	bnz	i1l11085
 15717  00036A  05C4               	decf	(InterruptHandlerLow@ten+1)& (0+255),w,b
 15718  00036C  A4D8               	btfss	status,2,c
 15719  00036E  D00A               	goto	i1l11085
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;interrupt.c: 163: {;interrupt.c: 164: if(unit != (0x04 + 0x10 + 0x40 + 0x100 + 0x00 + 0
      +                          x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00))
 15723  000370  0E54               	movlw	84
 15724  000372  19C1               	xorwf	InterruptHandlerLow@unit& (0+255),w,b
 15725  000374  E103               	bnz	i1u1434_20
 15726  000376  05C2               	decf	(InterruptHandlerLow@unit+1)& (0+255),w,b
 15727  000378  B4D8               	btfsc	status,2,c
 15728  00037A  D004               	goto	i1l11085
 15729  00037C                     i1u1434_20:
 15730                           
 15731                           ; BSR set to: 0
 15732                           ;interrupt.c: 165: ten = (0x00 + 0x00 + 0x40 + 0x100 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 
      +                          + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00 + 0x00);
 15733  00037C  0E01               	movlw	1
 15734  00037E  6FC4               	movwf	(InterruptHandlerLow@ten+1)& (0+255),b
 15735  000380  0E40               	movlw	64
 15736  000382  6FC3               	movwf	InterruptHandlerLow@ten& (0+255),b
 15737  000384                     i1l11085:
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;interrupt.c: 166: };interrupt.c: 167: };interrupt.c: 168: arrow_mes = tFloor_Tab[displa
      +                          y[0]];
 15741  000384  5168               	movf	_display& (0+255),w,b	;volatile
 15742  000386  0D02               	mullw	2
 15743  000388  0EBC               	movlw	low _tFloor_Tab
 15744  00038A  24F3               	addwf	243,w,c
 15745  00038C  6EF6               	movwf	tblptrl,c
 15746  00038E  0E7C               	movlw	high _tFloor_Tab
 15747  000390  20F4               	addwfc	244,w,c
 15748  000392  6EF7               	movwf	tblptrh,c
 15749  000394                     	if	0	;There are less than 3 active tblptr bytes
 15750  000394                     	endif
 15751  000394  0008               	tblrd		*
 15752  000396  CFF5 F0BC          	movff	tablat,InterruptHandlerLow@arrow_mes
 15753                           
 15754                           ; BSR set to: 0
 15755                           ;interrupt.c: 171: if(display[3] & 0x02)
 15756  00039A  B36B               	btfsc	(_display+3)& (0+255),1,b	;volatile
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;interrupt.c: 172: arrow_mes |= 0x10;
 15760  00039C  89BC               	bsf	InterruptHandlerLow@arrow_mes& (0+255),4,b
 15761                           
 15762                           ; BSR set to: 0
 15763                           ;interrupt.c: 173: if(display[3] & 0x01)
 15764  00039E  B16B               	btfsc	(_display+3)& (0+255),0,b	;volatile
 15765                           
 15766                           ; BSR set to: 0
 15767                           ;interrupt.c: 174: arrow_mes |= 0x08;
 15768  0003A0  87BC               	bsf	InterruptHandlerLow@arrow_mes& (0+255),3,b
 15769                           
 15770                           ; BSR set to: 0
 15771                           ;interrupt.c: 177: LATCbits.LATC5 = 0;
 15772  0003A2  9A8B               	bcf	139,5,c	;volatile
 15773                           
 15774                           ; BSR set to: 0
 15775                           ;interrupt.c: 178: if((a%2) == 1)
 15776  0003A4  A005               	btfss	InterruptHandlerLow@a^0,0,c
 15777  0003A6  D00A               	goto	i1l11101
 15778                           
 15779                           ; BSR set to: 0
 15780                           ;interrupt.c: 179: {;interrupt.c: 180: ten ^= 0xFFFF;
 15781  0003A8  0EFF               	movlw	255
 15782  0003AA  1BC3               	xorwf	InterruptHandlerLow@ten& (0+255),f,b
 15783  0003AC  0EFF               	movlw	255
 15784  0003AE  1BC4               	xorwf	(InterruptHandlerLow@ten+1)& (0+255),f,b
 15785                           
 15786                           ;interrupt.c: 181: unit ^= 0xFFFF;
 15787  0003B0  0EFF               	movlw	255
 15788  0003B2  1BC1               	xorwf	InterruptHandlerLow@unit& (0+255),f,b
 15789  0003B4  0EFF               	movlw	255
 15790  0003B6  1BC2               	xorwf	(InterruptHandlerLow@unit+1)& (0+255),f,b
 15791                           
 15792                           ;interrupt.c: 182: arrow_mes ^= 0xFF;
 15793  0003B8  0EFF               	movlw	255
 15794  0003BA  1BBC               	xorwf	InterruptHandlerLow@arrow_mes& (0+255),f,b
 15795  0003BC                     i1l11101:
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;interrupt.c: 183: };interrupt.c: 184: SPI_SendOneByte((BYTE)arrow_mes);
 15799  0003BC  51BC               	movf	InterruptHandlerLow@arrow_mes& (0+255),w,b
 15800  0003BE  EC14  F021         	call	_SPI_SendOneByte
 15801                           
 15802                           ;interrupt.c: 185: SPI_SendOneByte((BYTE)(unit >> 8));
 15803  0003C2  0100               	movlb	0	; () banked
 15804  0003C4  51C2               	movf	(InterruptHandlerLow@unit+1)& (0+255),w,b
 15805  0003C6  EC14  F021         	call	_SPI_SendOneByte
 15806                           
 15807                           ;interrupt.c: 186: SPI_SendOneByte((BYTE)unit);
 15808  0003CA  0100               	movlb	0	; () banked
 15809  0003CC  51C1               	movf	InterruptHandlerLow@unit& (0+255),w,b
 15810  0003CE  EC14  F021         	call	_SPI_SendOneByte
 15811                           
 15812                           ;interrupt.c: 187: SPI_SendOneByte((BYTE)(ten >> 8));
 15813  0003D2  0100               	movlb	0	; () banked
 15814  0003D4  51C4               	movf	(InterruptHandlerLow@ten+1)& (0+255),w,b
 15815  0003D6  EC14  F021         	call	_SPI_SendOneByte
 15816                           
 15817                           ;interrupt.c: 188: SPI_SendOneByte((BYTE)ten);
 15818  0003DA  0100               	movlb	0	; () banked
 15819  0003DC  51C3               	movf	InterruptHandlerLow@ten& (0+255),w,b
 15820  0003DE  EC14  F021         	call	_SPI_SendOneByte
 15821                           
 15822                           ;interrupt.c: 190: LATCbits.LATC5 = 1;
 15823  0003E2  8A8B               	bsf	139,5,c	;volatile
 15824                           
 15825                           ;interrupt.c: 191: __nop();__nop();__nop();__nop();
 15826  0003E4  F000               	nop	
 15827  0003E6  F000               	nop	
 15828  0003E8  F000               	nop	
 15829  0003EA  F000               	nop	
 15830                           
 15831                           ;interrupt.c: 192: __nop();__nop();__nop();__nop();
 15832  0003EC  F000               	nop	
 15833  0003EE  F000               	nop	
 15834  0003F0  F000               	nop	
 15835  0003F2  F000               	nop	
 15836                           
 15837                           ;interrupt.c: 193: LATCbits.LATC5 = 0;
 15838  0003F4  9A8B               	bcf	139,5,c	;volatile
 15839                           
 15840                           ;interrupt.c: 194: if((a%2) == 1)
 15841  0003F6  A005               	btfss	InterruptHandlerLow@a^0,0,c
 15842  0003F8  D002               	goto	i1l1600
 15843                           
 15844                           ;interrupt.c: 195: LATDbits.LATD7 = 1;
 15845  0003FA  8E8C               	bsf	140,7,c	;volatile
 15846  0003FC  D001               	goto	i1l11135
 15847  0003FE                     i1l1600:
 15848                           
 15849                           ;interrupt.c: 196: else;interrupt.c: 197: LATDbits.LATD7 = 0;
 15850  0003FE  9E8C               	bcf	140,7,c	;volatile
 15851  000400                     i1l11135:
 15852                           
 15853                           ;interrupt.c: 198: a++;
 15854  000400  2A05               	incf	InterruptHandlerLow@a^0,f,c
 15855                           
 15856                           ;interrupt.c: 200: if(backlight_func)
 15857  000402  5011               	movf	_backlight_func^0,w,c
 15858  000404  B4D8               	btfsc	status,2,c
 15859  000406  D014               	goto	i1l1603
 15860                           
 15861                           ;interrupt.c: 201: {;interrupt.c: 202: if(u8Start_Dark)
 15862  000408  5013               	movf	_u8Start_Dark^0,w,c
 15863  00040A  B4D8               	btfsc	status,2,c
 15864  00040C  D011               	goto	i1l1603
 15865                           
 15866                           ;interrupt.c: 203: {;interrupt.c: 204: if(backlight_func == 1)
 15867  00040E  0411               	decf	_backlight_func^0,w,c
 15868  000410  A4D8               	btfss	status,2,c
 15869  000412  D008               	goto	i1l11151
 15870                           
 15871                           ;interrupt.c: 205: {;interrupt.c: 206: if(++u8PWM_Count <= 8)
 15872  000414  2A12               	incf	_u8PWM_Count^0,f,c
 15873  000416  0E09               	movlw	9
 15874  000418  6012               	cpfslt	_u8PWM_Count^0,c
 15875  00041A  D001               	goto	i1l11147
 15876  00041C  D007               	goto	i1u1443_20
 15877  00041E                     i1l11147:
 15878                           
 15879                           ;interrupt.c: 208: else;interrupt.c: 209: {;interrupt.c: 210: u8PWM_Count = 0;
 15880  00041E  0E00               	movlw	0
 15881  000420  6E12               	movwf	_u8PWM_Count^0,c
 15882  000422  D006               	goto	i1l1603
 15883  000424                     i1l11151:
 15884                           
 15885                           ;interrupt.c: 214: else if(backlight_func == 2)
 15886  000424  0E02               	movlw	2
 15887  000426  1811               	xorwf	_backlight_func^0,w,c
 15888  000428  A4D8               	btfss	status,2,c
 15889  00042A  D003               	goto	i1l1610
 15890  00042C                     i1u1443_20:
 15891                           
 15892                           ;interrupt.c: 215: LATAbits.LATA3 = 0;
 15893  00042C  9689               	bcf	137,3,c	;volatile
 15894  00042E  D001               	goto	i1l1610
 15895  000430                     i1l1603:
 15896                           
 15897                           ;interrupt.c: 220: else;interrupt.c: 221: LATAbits.LATA3 = 1;
 15898                           
 15899                           ;interrupt.c: 217: else;interrupt.c: 218: LATAbits.LATA3 = 1;
 15900  000430  8689               	bsf	137,3,c	;volatile
 15901  000432                     i1l1610:
 15902                           
 15903                           ;interrupt.c: 222: };interrupt.c: 223: if(hardware_version == 1)
 15904  000432  0100               	movlb	0	; () banked
 15905  000434  059A               	decf	_hardware_version& (0+255),w,b
 15906  000436  A4D8               	btfss	status,2,c
 15907  000438  D0E1               	goto	i1l1611
 15908                           
 15909                           ; BSR set to: 0
 15910                           ;interrupt.c: 224: {;interrupt.c: 225: if((count % 50) == 0)
 15911  00043A  0E32               	movlw	50
 15912  00043C  6E3B               	movwf	i1___lbmod@divisor^0,c
 15913  00043E  5006               	movf	InterruptHandlerLow@count^0,w,c
 15914  000440  ECD7  F021         	call	i1___lbmod
 15915  000444  0900               	iorlw	0
 15916  000446  A4D8               	btfss	status,2,c
 15917  000448  D005               	goto	i1l11161
 15918                           
 15919                           ;interrupt.c: 226: {;interrupt.c: 227: display_scantimer = 1;
 15920  00044A  0E01               	movlw	1
 15921  00044C  0100               	movlb	0	; () banked
 15922  00044E  6F85               	movwf	_display_scantimer& (0+255),b
 15923                           
 15924                           ;interrupt.c: 228: timer_100ms = 1;
 15925  000450  0E01               	movlw	1
 15926  000452  6E07               	movwf	InterruptHandlerLow@timer_100ms^0,c
 15927  000454                     i1l11161:
 15928                           
 15929                           ;interrupt.c: 229: };interrupt.c: 230: if (row < 6)
 15930  000454  0E06               	movlw	6
 15931  000456  6028               	cpfslt	_row^0,c
 15932  000458  D002               	goto	i1l11165
 15933                           
 15934                           ;interrupt.c: 231: row++;
 15935  00045A  2A28               	incf	_row^0,f,c
 15936  00045C  D02B               	goto	i1l11193
 15937  00045E                     i1l11165:
 15938                           
 15939                           ;interrupt.c: 232: else;interrupt.c: 233: {;interrupt.c: 234: row = 0;
 15940  00045E  0E00               	movlw	0
 15941  000460  6E28               	movwf	_row^0,c
 15942                           
 15943                           ;interrupt.c: 235: if (arrowtype == 0)
 15944  000462  0100               	movlb	0	; () banked
 15945  000464  51B8               	movf	_arrowtype& (0+255),w,b
 15946  000466  A4D8               	btfss	status,2,c
 15947  000468  D023               	goto	i1l11189
 15948                           
 15949                           ; BSR set to: 0
 15950                           ;interrupt.c: 236: {;interrupt.c: 237: if (scrolltimer < 8)
 15951  00046A  0E08               	movlw	8
 15952  00046C  6019               	cpfslt	_scrolltimer^0,c
 15953  00046E  D002               	goto	i1l11171
 15954                           
 15955                           ; BSR set to: 0
 15956                           ;interrupt.c: 238: scrolltimer++;
 15957  000470  2A19               	incf	_scrolltimer^0,f,c
 15958  000472  D002               	goto	i1l1617
 15959  000474                     i1l11171:
 15960                           
 15961                           ; BSR set to: 0
 15962                           ;interrupt.c: 239: else;interrupt.c: 240: scrolltimer = 0;
 15963  000474  0E00               	movlw	0
 15964  000476  6E19               	movwf	_scrolltimer^0,c
 15965  000478                     i1l1617:
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;interrupt.c: 241: if (!scrolltimer)
 15969  000478  5019               	movf	_scrolltimer^0,w,c
 15970  00047A  A4D8               	btfss	status,2,c
 15971  00047C  D01B               	goto	i1l11193
 15972                           
 15973                           ; BSR set to: 0
 15974                           ;interrupt.c: 242: {;interrupt.c: 243: if (scroll == 1)
 15975  00047E  0425               	decf	_scroll^0,w,c
 15976  000480  A4D8               	btfss	status,2,c
 15977  000482  D009               	goto	i1l11181
 15978                           
 15979                           ; BSR set to: 0
 15980                           ;interrupt.c: 244: {;interrupt.c: 245: if (scrollpos < 8)
 15981  000484  501A               	movf	_scrollpos^0,w,c
 15982  000486  0A80               	xorlw	128
 15983  000488  0F78               	addlw	-136
 15984  00048A  B0D8               	btfsc	status,0,c
 15985  00048C  D002               	goto	i1l11179
 15986                           
 15987                           ; BSR set to: 0
 15988                           ;interrupt.c: 246: scrollpos++;
 15989  00048E  2A1A               	incf	_scrollpos^0,f,c
 15990  000490  D011               	goto	i1l11193
 15991  000492                     i1l11179:
 15992                           
 15993                           ; BSR set to: 0
 15994                           ;interrupt.c: 247: else;interrupt.c: 248: scrollpos = -8;
 15995  000492  0EF8               	movlw	248
 15996  000494  D00E               	goto	L34
 15997  000496                     i1l11181:
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;interrupt.c: 250: else if (scroll == 2)
 16001  000496  0E02               	movlw	2
 16002  000498  1825               	xorwf	_scroll^0,w,c
 16003  00049A  A4D8               	btfss	status,2,c
 16004  00049C  D009               	goto	i1l11189
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;interrupt.c: 251: {;interrupt.c: 252: if (scrollpos > -8)
 16008  00049E  501A               	movf	_scrollpos^0,w,c
 16009  0004A0  0A80               	xorlw	128
 16010  0004A2  0F87               	addlw	135
 16011  0004A4  A0D8               	btfss	status,0,c
 16012  0004A6  D002               	goto	i1l11187
 16013                           
 16014                           ; BSR set to: 0
 16015                           ;interrupt.c: 253: scrollpos--;
 16016  0004A8  061A               	decf	_scrollpos^0,f,c
 16017  0004AA  D004               	goto	i1l11193
 16018  0004AC                     i1l11187:
 16019                           
 16020                           ; BSR set to: 0
 16021                           ;interrupt.c: 254: else;interrupt.c: 255: scrollpos = 8;
 16022  0004AC  0E08               	movlw	8
 16023  0004AE  D001               	goto	L34
 16024  0004B0                     i1l11189:
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;interrupt.c: 257: else;interrupt.c: 258: scrollpos = 0;
 16028  0004B0  0E00               	movlw	0
 16029  0004B2                     L34:
 16030  0004B2  6E1A               	movwf	_scrollpos^0,c
 16031  0004B4                     i1l11193:
 16032                           
 16033                           ;interrupt.c: 263: };interrupt.c: 266: buf[0] = (sign[display[2]][row] << 3) | 0x07;
 16034  0004B4  0100               	movlb	0	; () banked
 16035  0004B6  516A               	movf	(_display+2)& (0+255),w,b	;volatile
 16036  0004B8  0D07               	mullw	7
 16037  0004BA  0EEB               	movlw	low _sign
 16038  0004BC  6E3F               	movwf	??_InterruptHandlerLow^0,c
 16039  0004BE  0E79               	movlw	high _sign
 16040  0004C0  6E40               	movwf	(??_InterruptHandlerLow+1)^0,c
 16041  0004C2  50F3               	movf	243,w,c
 16042  0004C4  263F               	addwf	??_InterruptHandlerLow^0,f,c
 16043  0004C6  50F4               	movf	244,w,c
 16044  0004C8  2240               	addwfc	(??_InterruptHandlerLow+1)^0,f,c
 16045  0004CA  5028               	movf	_row^0,w,c
 16046  0004CC  263F               	addwf	??_InterruptHandlerLow^0,f,c
 16047  0004CE  0E00               	movlw	0
 16048  0004D0  2240               	addwfc	(??_InterruptHandlerLow+1)^0,f,c
 16049  0004D2  C03F  FFF6         	movff	??_InterruptHandlerLow,tblptrl
 16050  0004D6  C040  FFF7         	movff	??_InterruptHandlerLow+1,tblptrh
 16051  0004DA                     	if	0	;tblptru may be non-zero
 16052  0004DA                     	endif
 16053  0004DA                     	if	0	;tblptru may be non-zero
 16054  0004DA                     	endif
 16055  0004DA  0008               	tblrd		*
 16056  0004DC  CFF5 F041          	movff	tablat,??_InterruptHandlerLow+2
 16057  0004E0  90D8               	bcf	status,0,c
 16058  0004E2  3641               	rlcf	(??_InterruptHandlerLow+2)^0,f,c
 16059  0004E4  90D8               	bcf	status,0,c
 16060  0004E6  3641               	rlcf	(??_InterruptHandlerLow+2)^0,f,c
 16061  0004E8  90D8               	bcf	status,0,c
 16062  0004EA  3441               	rlcf	(??_InterruptHandlerLow+2)^0,w,c
 16063  0004EC  0907               	iorlw	7
 16064  0004EE  6FBD               	movwf	InterruptHandlerLow@buf& (0+255),b
 16065                           
 16066                           ; BSR set to: 0
 16067                           ;interrupt.c: 267: pos = scrollpos + row;
 16068  0004F0  5028               	movf	_row^0,w,c
 16069  0004F2  241A               	addwf	_scrollpos^0,w,c
 16070  0004F4  6FC0               	movwf	InterruptHandlerLow@pos& (0+255),b
 16071                           
 16072                           ; BSR set to: 0
 16073                           ;interrupt.c: 268: if ((pos >= 0) && (pos < 7))
 16074  0004F6  BFC0               	btfsc	InterruptHandlerLow@pos& (0+255),7,b
 16075  0004F8  D021               	goto	i1l11203
 16076                           
 16077                           ; BSR set to: 0
 16078  0004FA  51C0               	movf	InterruptHandlerLow@pos& (0+255),w,b
 16079  0004FC  0A80               	xorlw	128
 16080  0004FE  0F79               	addlw	-135
 16081  000500  B0D8               	btfsc	status,0,c
 16082  000502  D01C               	goto	i1l11203
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;interrupt.c: 269: buf[0] &= (((sign[display[0]][pos] & 0x18) >> 2) | 0xF8);
 16086  000504  5168               	movf	_display& (0+255),w,b	;volatile
 16087  000506  0D07               	mullw	7
 16088  000508  0EEB               	movlw	low _sign
 16089  00050A  6E3F               	movwf	??_InterruptHandlerLow^0,c
 16090  00050C  0E79               	movlw	high _sign
 16091  00050E  6E40               	movwf	(??_InterruptHandlerLow+1)^0,c
 16092  000510  50F3               	movf	243,w,c
 16093  000512  263F               	addwf	??_InterruptHandlerLow^0,f,c
 16094  000514  50F4               	movf	244,w,c
 16095  000516  2240               	addwfc	(??_InterruptHandlerLow+1)^0,f,c
 16096  000518  51C0               	movf	InterruptHandlerLow@pos& (0+255),w,b
 16097  00051A  263F               	addwf	??_InterruptHandlerLow^0,f,c
 16098  00051C  0E00               	movlw	0
 16099  00051E  2240               	addwfc	(??_InterruptHandlerLow+1)^0,f,c
 16100  000520  C03F  FFF6         	movff	??_InterruptHandlerLow,tblptrl
 16101  000524  C040  FFF7         	movff	??_InterruptHandlerLow+1,tblptrh
 16102  000528                     	if	0	;tblptru may be non-zero
 16103  000528                     	endif
 16104  000528                     	if	0	;tblptru may be non-zero
 16105  000528                     	endif
 16106  000528  0008               	tblrd		*
 16107  00052A  CFF5 F041          	movff	tablat,??_InterruptHandlerLow+2
 16108  00052E  90D8               	bcf	status,0,c
 16109  000530  3241               	rrcf	(??_InterruptHandlerLow+2)^0,f,c
 16110  000532  90D8               	bcf	status,0,c
 16111  000534  3041               	rrcf	(??_InterruptHandlerLow+2)^0,w,c
 16112  000536  0B06               	andlw	6
 16113  000538  09F8               	iorlw	248
 16114  00053A  D001               	goto	L35
 16115  00053C                     i1l11203:
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;interrupt.c: 270: else;interrupt.c: 271: buf[0] &= 0xF8;
 16119  00053C  0EF8               	movlw	248
 16120  00053E                     L35:
 16121  00053E  17BD               	andwf	InterruptHandlerLow@buf& (0+255),f,b
 16122                           
 16123                           ; BSR set to: 0
 16124                           ;interrupt.c: 274: buf[1] = (sign[display[1]][row] << 3) | 0x07;
 16125  000540  5169               	movf	(_display+1)& (0+255),w,b	;volatile
 16126  000542  0D07               	mullw	7
 16127  000544  0EEB               	movlw	low _sign
 16128  000546  6E3F               	movwf	??_InterruptHandlerLow^0,c
 16129  000548  0E79               	movlw	high _sign
 16130  00054A  6E40               	movwf	(??_InterruptHandlerLow+1)^0,c
 16131  00054C  50F3               	movf	243,w,c
 16132  00054E  263F               	addwf	??_InterruptHandlerLow^0,f,c
 16133  000550  50F4               	movf	244,w,c
 16134  000552  2240               	addwfc	(??_InterruptHandlerLow+1)^0,f,c
 16135  000554  5028               	movf	_row^0,w,c
 16136  000556  263F               	addwf	??_InterruptHandlerLow^0,f,c
 16137  000558  0E00               	movlw	0
 16138  00055A  2240               	addwfc	(??_InterruptHandlerLow+1)^0,f,c
 16139  00055C  C03F  FFF6         	movff	??_InterruptHandlerLow,tblptrl
 16140  000560  C040  FFF7         	movff	??_InterruptHandlerLow+1,tblptrh
 16141  000564                     	if	0	;tblptru may be non-zero
 16142  000564                     	endif
 16143  000564                     	if	0	;tblptru may be non-zero
 16144  000564                     	endif
 16145  000564  0008               	tblrd		*
 16146  000566  CFF5 F041          	movff	tablat,??_InterruptHandlerLow+2
 16147  00056A  90D8               	bcf	status,0,c
 16148  00056C  3641               	rlcf	(??_InterruptHandlerLow+2)^0,f,c
 16149  00056E  90D8               	bcf	status,0,c
 16150  000570  3641               	rlcf	(??_InterruptHandlerLow+2)^0,f,c
 16151  000572  90D8               	bcf	status,0,c
 16152  000574  3441               	rlcf	(??_InterruptHandlerLow+2)^0,w,c
 16153  000576  0907               	iorlw	7
 16154  000578  6FBE               	movwf	(InterruptHandlerLow@buf+1)& (0+255),b
 16155                           
 16156                           ; BSR set to: 0
 16157                           ;interrupt.c: 275: if ((pos >= 0) && (pos < 7))
 16158  00057A  BFC0               	btfsc	InterruptHandlerLow@pos& (0+255),7,b
 16159  00057C  D01C               	goto	i1l11213
 16160                           
 16161                           ; BSR set to: 0
 16162  00057E  51C0               	movf	InterruptHandlerLow@pos& (0+255),w,b
 16163  000580  0A80               	xorlw	128
 16164  000582  0F79               	addlw	-135
 16165  000584  B0D8               	btfsc	status,0,c
 16166  000586  D017               	goto	i1l11213
 16167                           
 16168                           ; BSR set to: 0
 16169                           ;interrupt.c: 276: buf[1] &= ((sign[display[0]][pos] & 0x07) | 0xF8);
 16170  000588  5168               	movf	_display& (0+255),w,b	;volatile
 16171  00058A  0D07               	mullw	7
 16172  00058C  0EEB               	movlw	low _sign
 16173  00058E  6E3F               	movwf	??_InterruptHandlerLow^0,c
 16174  000590  0E79               	movlw	high _sign
 16175  000592  6E40               	movwf	(??_InterruptHandlerLow+1)^0,c
 16176  000594  50F3               	movf	243,w,c
 16177  000596  263F               	addwf	??_InterruptHandlerLow^0,f,c
 16178  000598  50F4               	movf	244,w,c
 16179  00059A  2240               	addwfc	(??_InterruptHandlerLow+1)^0,f,c
 16180  00059C  51C0               	movf	InterruptHandlerLow@pos& (0+255),w,b
 16181  00059E  263F               	addwf	??_InterruptHandlerLow^0,f,c
 16182  0005A0  0E00               	movlw	0
 16183  0005A2  2240               	addwfc	(??_InterruptHandlerLow+1)^0,f,c
 16184  0005A4  C03F  FFF6         	movff	??_InterruptHandlerLow,tblptrl
 16185  0005A8  C040  FFF7         	movff	??_InterruptHandlerLow+1,tblptrh
 16186  0005AC                     	if	0	;tblptru may be non-zero
 16187  0005AC                     	endif
 16188  0005AC                     	if	0	;tblptru may be non-zero
 16189  0005AC                     	endif
 16190  0005AC  0008               	tblrd		*
 16191  0005AE  50F5               	movf	tablat,w,c
 16192  0005B0  0B07               	andlw	7
 16193  0005B2  09F8               	iorlw	248
 16194  0005B4  D001               	goto	L36
 16195  0005B6                     i1l11213:
 16196                           
 16197                           ; BSR set to: 0
 16198                           ;interrupt.c: 277: else;interrupt.c: 278: buf[1] &= 0xF8;
 16199  0005B6  0EF8               	movlw	248
 16200  0005B8                     L36:
 16201  0005B8  17BE               	andwf	(InterruptHandlerLow@buf+1)& (0+255),f,b
 16202                           
 16203                           ; BSR set to: 0
 16204                           ;interrupt.c: 280: LATCbits.LATC5 = 0;
 16205  0005BA  9A8B               	bcf	139,5,c	;volatile
 16206                           
 16207                           ; BSR set to: 0
 16208                           ;interrupt.c: 281: SPI_SendOneByte(buf[0]);
 16209  0005BC  51BD               	movf	InterruptHandlerLow@buf& (0+255),w,b
 16210  0005BE  EC14  F021         	call	_SPI_SendOneByte
 16211                           
 16212                           ;interrupt.c: 282: SPI_SendOneByte(buf[1]);
 16213  0005C2  0100               	movlb	0	; () banked
 16214  0005C4  51BE               	movf	(InterruptHandlerLow@buf+1)& (0+255),w,b
 16215  0005C6  EC14  F021         	call	_SPI_SendOneByte
 16216                           
 16217                           ;interrupt.c: 284: i = (0x01 << row);
 16218  0005CA  C028  F03F         	movff	_row,??_InterruptHandlerLow
 16219  0005CE  0E01               	movlw	1
 16220  0005D0  6E40               	movwf	(??_InterruptHandlerLow+1)^0,c
 16221  0005D2  2A3F               	incf	??_InterruptHandlerLow^0,f,c
 16222  0005D4  D002               	goto	i1u1458_24
 16223  0005D6                     i1u1458_25:
 16224  0005D6  90D8               	bcf	status,0,c
 16225  0005D8  3640               	rlcf	(??_InterruptHandlerLow+1)^0,f,c
 16226  0005DA                     i1u1458_24:
 16227  0005DA  2E3F               	decfsz	??_InterruptHandlerLow^0,f,c
 16228  0005DC  D7FC               	goto	i1u1458_25
 16229  0005DE  5040               	movf	(??_InterruptHandlerLow+1)^0,w,c
 16230  0005E0  0100               	movlb	0	; () banked
 16231  0005E2  6FC5               	movwf	InterruptHandlerLow@i& (0+255),b
 16232                           
 16233                           ; BSR set to: 0
 16234                           ;interrupt.c: 285: LATD = 0x00;
 16235  0005E4  0E00               	movlw	0
 16236  0005E6  6E8C               	movwf	140,c	;volatile
 16237                           
 16238                           ; BSR set to: 0
 16239                           ;interrupt.c: 287: LATCbits.LATC5 = 1;
 16240  0005E8  8A8B               	bsf	139,5,c	;volatile
 16241                           
 16242                           ; BSR set to: 0
 16243                           ;interrupt.c: 288: __nop();__nop();__nop();__nop();
 16244  0005EA  F000               	nop	
 16245  0005EC  F000               	nop	
 16246  0005EE  F000               	nop	
 16247  0005F0  F000               	nop	
 16248                           
 16249                           ;interrupt.c: 289: LATCbits.LATC5 = 0;
 16250  0005F2  9A8B               	bcf	139,5,c	;volatile
 16251                           
 16252                           ;interrupt.c: 292: LATD = i & 0x7F;
 16253  0005F4  0100               	movlb	0	; () banked
 16254  0005F6  51C5               	movf	InterruptHandlerLow@i& (0+255),w,b
 16255  0005F8  0B7F               	andlw	127
 16256  0005FA  6E8C               	movwf	140,c	;volatile
 16257  0005FC                     i1l1611:
 16258                           
 16259                           ; BSR set to: 0
 16260                           ;interrupt.c: 293: };interrupt.c: 294: if(timer_100ms)
 16261  0005FC  5007               	movf	InterruptHandlerLow@timer_100ms^0,w,c
 16262  0005FE  B4D8               	btfsc	status,2,c
 16263  000600  D015               	goto	i1l1637
 16264                           
 16265                           ; BSR set to: 0
 16266                           ;interrupt.c: 295: {;interrupt.c: 296: if(mLongKeyTime)
 16267  000602  5021               	movf	_mLongKeyTime^0,w,c
 16268  000604  B4D8               	btfsc	status,2,c
 16269  000606  D003               	goto	i1l11243
 16270                           
 16271                           ; BSR set to: 0
 16272                           ;interrupt.c: 297: {;interrupt.c: 298: if(--mLongKeyTime == 0)
 16273  000608  2E21               	decfsz	_mLongKeyTime^0,f,c
 16274  00060A  D001               	goto	i1l11243
 16275                           
 16276                           ; BSR set to: 0
 16277                           ;interrupt.c: 299: bKey_Fg.LongKeyEn = 1;
 16278  00060C  8622               	bsf	_bKey_Fg^0,3,c
 16279  00060E                     i1l11243:
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;interrupt.c: 300: };interrupt.c: 301: if(keytimer)
 16283  00060E  501D               	movf	_keytimer^0,w,c
 16284  000610  B4D8               	btfsc	status,2,c
 16285  000612  D00A               	goto	i1l1635
 16286                           
 16287                           ; BSR set to: 0
 16288                           ;interrupt.c: 302: {;interrupt.c: 303: if(--keytimer == 0)
 16289  000614  2E1D               	decfsz	_keytimer^0,f,c
 16290  000616  D008               	goto	i1l1635
 16291                           
 16292                           ; BSR set to: 0
 16293                           ;interrupt.c: 304: {;interrupt.c: 305: setid_mode = 0;
 16294  000618  0E00               	movlw	0
 16295  00061A  6F9B               	movwf	_setid_mode& (0+255),b
 16296                           
 16297                           ; BSR set to: 0
 16298                           ;interrupt.c: 306: arrowflash = arrowflash_old;
 16299  00061C  C01E  F095         	movff	_arrowflash_old,_arrowflash
 16300                           
 16301                           ;interrupt.c: 307: keytimer = 0;
 16302  000620  0E00               	movlw	0
 16303  000622  6E1D               	movwf	_keytimer^0,c
 16304                           
 16305                           ;interrupt.c: 308: nmtstate = 0x7F;
 16306  000624  0E7F               	movlw	127
 16307  000626  6F90               	movwf	_nmtstate& (0+255),b
 16308  000628                     i1l1635:
 16309                           
 16310                           ; BSR set to: 0
 16311                           ;interrupt.c: 309: };interrupt.c: 310: };interrupt.c: 311: timer_100ms = 0;
 16312  000628  0E00               	movlw	0
 16313  00062A  6E07               	movwf	InterruptHandlerLow@timer_100ms^0,c
 16314  00062C                     i1l1637:
 16315  00062C  C04C  FFF5         	movff	??_InterruptHandlerLow+13,tablat
 16316  000630  C04B  FFF8         	movff	??_InterruptHandlerLow+12,tblptru
 16317  000634  C04A  FFF7         	movff	??_InterruptHandlerLow+11,tblptrh
 16318  000638  C049  FFF6         	movff	??_InterruptHandlerLow+10,tblptrl
 16319  00063C  C048  FFF4         	movff	??_InterruptHandlerLow+9,prodh
 16320  000640  C047  FFF3         	movff	??_InterruptHandlerLow+8,prodl
 16321  000644  C046  FFDA         	movff	??_InterruptHandlerLow+7,fsr2h
 16322  000648  C045  FFD9         	movff	??_InterruptHandlerLow+6,fsr2l
 16323  00064C  C044  FFE0         	movff	??_InterruptHandlerLow+5,bsr
 16324  000650  C043  FFE8         	movff	??_InterruptHandlerLow+4,wreg
 16325  000654  C042  FFD8         	movff	??_InterruptHandlerLow+3,status
 16326  000658  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 16327  00065A  0010               	retfie	
 16328  00065C                     __end_of_InterruptHandlerLow:
 16329                           	callstack 0
 16330                           
 16331 ;; *************** function i1___lbmod *****************
 16332 ;; Defined at:
 16333 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbmod.c"
 16334 ;; Parameters:    Size  Location     Type
 16335 ;;  dividend        1    wreg     unsigned char 
 16336 ;;  divisor         1   15[COMRAM] unsigned char 
 16337 ;; Auto vars:     Size  Location     Type
 16338 ;;  dividend        1   16[COMRAM] unsigned char 
 16339 ;;  rem             1   18[COMRAM] unsigned char 
 16340 ;;  counter         1   17[COMRAM] unsigned char 
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  1    wreg      unsigned char 
 16343 ;; Registers used:
 16344 ;;		wreg, status,2, status,0
 16345 ;; Tracked objects:
 16346 ;;		On entry : 3F/0
 16347 ;;		On exit  : 0/0
 16348 ;;		Unchanged: 0/0
 16349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16350 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16351 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16353 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16354 ;;Total ram usage:        4 bytes
 16355 ;; Hardware stack levels used:    1
 16356 ;; Hardware stack levels required when called:    1
 16357 ;; This function calls:
 16358 ;;		Nothing
 16359 ;; This function is called by:
 16360 ;;		_InterruptHandlerLow
 16361 ;; This function uses a non-reentrant model
 16362 ;;
 16363                           
 16364                           	psect	text38
 16365  0043AE                     __ptext38:
 16366                           	callstack 0
 16367  0043AE                     i1___lbmod:
 16368                           	callstack 25
 16369                           
 16370                           ;incstack = 0
 16371                           ;i1___lbmod@dividend stored from wreg
 16372  0043AE  6E3C               	movwf	i1___lbmod@dividend^0,c
 16373  0043B0  0E08               	movlw	8
 16374  0043B2  6E3D               	movwf	i1___lbmod@counter^0,c
 16375  0043B4  0E00               	movlw	0
 16376  0043B6  6E3E               	movwf	i1___lbmod@rem^0,c
 16377  0043B8                     i1l10633:
 16378  0043B8  90D8               	bcf	status,0,c
 16379  0043BA  343C               	rlcf	i1___lbmod@dividend^0,w,c
 16380  0043BC  343E               	rlcf	i1___lbmod@rem^0,w,c
 16381  0043BE  6E3E               	movwf	i1___lbmod@rem^0,c
 16382  0043C0  90D8               	bcf	status,0,c
 16383  0043C2  363C               	rlcf	i1___lbmod@dividend^0,f,c
 16384  0043C4  503B               	movf	i1___lbmod@divisor^0,w,c
 16385  0043C6  5C3E               	subwf	i1___lbmod@rem^0,w,c
 16386  0043C8  A0D8               	btfss	status,0,c
 16387  0043CA  D002               	goto	i1l10641
 16388  0043CC  503B               	movf	i1___lbmod@divisor^0,w,c
 16389  0043CE  5E3E               	subwf	i1___lbmod@rem^0,f,c
 16390  0043D0                     i1l10641:
 16391  0043D0  2E3D               	decfsz	i1___lbmod@counter^0,f,c
 16392  0043D2  D7F2               	goto	i1l10633
 16393  0043D4  503E               	movf	i1___lbmod@rem^0,w,c
 16394  0043D6  0012               	return		;funcret
 16395  0043D8                     __end_ofi1___lbmod:
 16396                           	callstack 0
 16397                           
 16398 ;; *************** function _SPI_SendOneByte *****************
 16399 ;; Defined at:
 16400 ;;		line 10 in file "../../src/Display.c"
 16401 ;; Parameters:    Size  Location     Type
 16402 ;;  dat             1    wreg     unsigned char 
 16403 ;; Auto vars:     Size  Location     Type
 16404 ;;  dat             1   16[COMRAM] unsigned char 
 16405 ;;  i               1   17[COMRAM] unsigned char 
 16406 ;; Return value:  Size  Location     Type
 16407 ;;                  1    wreg      unsigned char 
 16408 ;; Registers used:
 16409 ;;		wreg, status,2, status,0
 16410 ;; Tracked objects:
 16411 ;;		On entry : 3F/0
 16412 ;;		On exit  : 0/0
 16413 ;;		Unchanged: 0/0
 16414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16416 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16417 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16418 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16419 ;;Total ram usage:        3 bytes
 16420 ;; Hardware stack levels used:    1
 16421 ;; Hardware stack levels required when called:    1
 16422 ;; This function calls:
 16423 ;;		Nothing
 16424 ;; This function is called by:
 16425 ;;		_InterruptHandlerLow
 16426 ;; This function uses a non-reentrant model
 16427 ;;
 16428                           
 16429                           	psect	text39
 16430  004228                     __ptext39:
 16431                           	callstack 0
 16432  004228                     _SPI_SendOneByte:
 16433                           	callstack 25
 16434                           
 16435                           ;incstack = 0
 16436                           ;SPI_SendOneByte@dat stored from wreg
 16437  004228  6E3C               	movwf	SPI_SendOneByte@dat^0,c
 16438                           
 16439                           ;Display.c: 11: BYTE i;;Display.c: 12: for(i=0; i<8; i++)
 16440  00422A  0E00               	movlw	0
 16441  00422C  6E3D               	movwf	SPI_SendOneByte@i^0,c
 16442  00422E                     i1l9565:
 16443                           
 16444                           ;Display.c: 13: {;Display.c: 14: LATCbits.LATC7 = ((dat >> 7) & 1);
 16445  00422E  6A3B               	clrf	??_SPI_SendOneByte^0,c
 16446  004230  AE3C               	btfss	SPI_SendOneByte@dat^0,7,c
 16447  004232  D001               	bra	i1u1194_25
 16448  004234  2A3B               	incf	??_SPI_SendOneByte^0,f,c
 16449  004236                     i1u1194_25:
 16450  004236  0E01               	movlw	1
 16451  004238  163B               	andwf	??_SPI_SendOneByte^0,f,c
 16452  00423A  323B               	rrcf	??_SPI_SendOneByte^0,f,c
 16453  00423C  323B               	rrcf	??_SPI_SendOneByte^0,f,c
 16454  00423E  508B               	movf	139,w,c	;volatile
 16455  004240  183B               	xorwf	??_SPI_SendOneByte^0,w,c
 16456  004242  0B7F               	andlw	-129
 16457  004244  183B               	xorwf	??_SPI_SendOneByte^0,w,c
 16458  004246  6E8B               	movwf	139,c	;volatile
 16459                           
 16460                           ;Display.c: 15: dat <<= 1;
 16461  004248  90D8               	bcf	status,0,c
 16462  00424A  363C               	rlcf	SPI_SendOneByte@dat^0,f,c
 16463                           
 16464                           ;Display.c: 17: LATCbits.LATC6 = 1;
 16465  00424C  8C8B               	bsf	139,6,c	;volatile
 16466                           
 16467                           ;Display.c: 18: __nop();__nop();__nop();__nop();__nop();__nop();
 16468  00424E  F000               	nop	
 16469  004250  F000               	nop	
 16470  004252  F000               	nop	
 16471  004254  F000               	nop	
 16472  004256  F000               	nop	
 16473  004258  F000               	nop	
 16474                           
 16475                           ;Display.c: 19: __nop();__nop();__nop();__nop();__nop();
 16476  00425A  F000               	nop	
 16477  00425C  F000               	nop	
 16478  00425E  F000               	nop	
 16479  004260  F000               	nop	
 16480  004262  F000               	nop	
 16481                           
 16482                           ;Display.c: 20: LATCbits.LATC6 = 0;
 16483  004264  9C8B               	bcf	139,6,c	;volatile
 16484  004266  2A3D               	incf	SPI_SendOneByte@i^0,f,c
 16485  004268  0E07               	movlw	7
 16486  00426A  643D               	cpfsgt	SPI_SendOneByte@i^0,c
 16487  00426C  D7E0               	goto	i1l9565
 16488  00426E  0012               	return	
 16489  004270                     __end_of_SPI_SendOneByte:
 16490                           	callstack 0
 16491                           
 16492 ;; *************** function _InterruptHandlerHigh *****************
 16493 ;; Defined at:
 16494 ;;		line 86 in file "../../src/can.c"
 16495 ;; Parameters:    Size  Location     Type
 16496 ;;		None
 16497 ;; Auto vars:     Size  Location     Type
 16498 ;;  ptr             2   11[COMRAM] PTR unsigned char 
 16499 ;;		 -> RXB0D0(1), TXB0D0(1), RXB1D0(1), 
 16500 ;;  i               1   14[COMRAM] unsigned char 
 16501 ;;  lenght          1   13[COMRAM] unsigned char 
 16502 ;;  tempCANSTAT     1   10[COMRAM] unsigned char 
 16503 ;;  hse_no          1    9[COMRAM] unsigned char 
 16504 ;; Return value:  Size  Location     Type
 16505 ;;                  1    wreg      void 
 16506 ;; Registers used:
 16507 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16508 ;; Tracked objects:
 16509 ;;		On entry : 0/0
 16510 ;;		On exit  : 30/0
 16511 ;;		Unchanged: 0/0
 16512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16514 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16515 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16516 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16517 ;;Total ram usage:       15 bytes
 16518 ;; Hardware stack levels used:    1
 16519 ;; This function calls:
 16520 ;;		Nothing
 16521 ;; This function is called by:
 16522 ;;		Interrupt level 2
 16523 ;; This function uses a non-reentrant model
 16524 ;;
 16525                           
 16526                           	psect	intcode
 16527  000008                     __pintcode:
 16528                           	callstack 0
 16529  000008                     _InterruptHandlerHigh:
 16530                           	callstack 25
 16531                           
 16532                           ;incstack = 0
 16533  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16534  00000A  EF70  F011         	goto	int_func
 16535                           
 16536                           	psect	intcode_body
 16537  0022E0                     __pintcode_body:
 16538                           	callstack 25
 16539  0022E0                     int_func:
 16540                           	callstack 25
 16541  0022E0  CFE1 F02F          	movff	fsr1l,??_InterruptHandlerHigh+3
 16542  0022E4  CFE2 F030          	movff	fsr1h,??_InterruptHandlerHigh+4
 16543  0022E8  CFD9 F031          	movff	fsr2l,??_InterruptHandlerHigh+5
 16544  0022EC  CFDA F032          	movff	fsr2h,??_InterruptHandlerHigh+6
 16545  0022F0  CFF3 F033          	movff	prodl,??_InterruptHandlerHigh+7
 16546  0022F4  CFF4 F034          	movff	prodh,??_InterruptHandlerHigh+8
 16547                           
 16548                           ;can.c: 87: BYTE i;;can.c: 88: BYTE lenght;;can.c: 89: BYTE hse_no;;can.c: 90: BYTE * pt
      +                          r;;can.c: 91: BYTE tempCANSTAT;;can.c: 93: com_can_work = 0;
 16549  0022F8  0E00               	movlw	0
 16550  0022FA  0100               	movlb	0	; () banked
 16551  0022FC  6F84               	movwf	_com_can_work& (0+255),b
 16552                           
 16553                           ; BSR set to: 0
 16554                           ;can.c: 94: tempCANSTAT = CANSTAT & 0x0E;
 16555  0022FE  506E               	movf	110,w,c	;volatile
 16556  002300  0B0E               	andlw	14
 16557  002302  6E36               	movwf	InterruptHandlerHigh@tempCANSTAT^0,c
 16558                           
 16559                           ;can.c: 95: switch (tempCANSTAT)
 16560  002304  D1C2               	goto	i2l7973
 16561  002306                     i2l7845:
 16562                           
 16563                           ; BSR set to: 0
 16564                           ;can.c: 98: if ((rc == 30) && (!can_passive_time))
 16565  002306  0E1E               	movlw	30
 16566  002308  1992               	xorwf	_rc& (0+255),w,b	;volatile
 16567  00230A  A4D8               	btfss	status,2,c
 16568  00230C  D007               	goto	i2l7853
 16569                           
 16570                           ; BSR set to: 0
 16571  00230E  5016               	movf	_can_passive_time^0,w,c
 16572  002310  A4D8               	btfss	status,2,c
 16573  002312  D004               	goto	i2l7853
 16574                           
 16575                           ; BSR set to: 0
 16576                           ;can.c: 99: {;can.c: 100: errorregister |= 0x10;
 16577  002314  89BA               	bsf	_errorregister& (0+255),4,b
 16578                           
 16579                           ; BSR set to: 0
 16580                           ;can.c: 101: can_passive_time = 20;
 16581  002316  0E14               	movlw	20
 16582  002318  6E16               	movwf	_can_passive_time^0,c
 16583                           
 16584                           ;can.c: 102: }
 16585  00231A  D071               	goto	i2l7873
 16586  00231C                     i2l7853:
 16587                           
 16588                           ; BSR set to: 0
 16589                           ;can.c: 103: else;can.c: 104: {;can.c: 105: rx[ri][0] = RXB1SIDH & 0xF0;
 16590  00231C  500C               	movf	_ri^0,w,c	;volatile
 16591  00231E  0D0A               	mullw	10
 16592  002320  0EB7               	movlw	low _rx
 16593  002322  24F3               	addwf	243,w,c
 16594  002324  6ED9               	movwf	fsr2l,c
 16595  002326  0E02               	movlw	high _rx
 16596  002328  20F4               	addwfc	prodh,w,c
 16597  00232A  6EDA               	movwf	fsr2h,c
 16598  00232C  010F               	movlb	15	; () banked
 16599  00232E  5131               	movf	49,w,b	;volatile
 16600  002330  0BF0               	andlw	240
 16601  002332  6EDF               	movwf	indf2,c
 16602                           
 16603                           ;can.c: 106: rx[ri][1] = (RXB1SIDL >> 5) + ((RXB1SIDH & 0x0F) << 3);
 16604  002334  500C               	movf	_ri^0,w,c	;volatile
 16605  002336  0D0A               	mullw	10
 16606  002338  0EB8               	movlw	low (_rx+1)
 16607  00233A  24F3               	addwf	243,w,c
 16608  00233C  6ED9               	movwf	fsr2l,c
 16609  00233E  0E02               	movlw	high (_rx+1)
 16610  002340  20F4               	addwfc	prodh,w,c
 16611  002342  6EDA               	movwf	fsr2h,c
 16612  002344  CF32 F02C          	movff	3890,??_InterruptHandlerHigh	;volatile
 16613  002348  0E05               	movlw	5
 16614  00234A  6E2D               	movwf	(??_InterruptHandlerHigh+1)^0,c
 16615  00234C                     i2u897_45:
 16616  00234C  90D8               	bcf	status,0,c
 16617  00234E  322C               	rrcf	??_InterruptHandlerHigh^0,f,c
 16618  002350  2E2D               	decfsz	(??_InterruptHandlerHigh+1)^0,f,c
 16619  002352  D7FC               	goto	i2u897_45
 16620  002354  5131               	movf	49,w,b	;volatile
 16621  002356  0B0F               	andlw	15
 16622  002358  0D08               	mullw	8
 16623  00235A  50F3               	movf	243,w,c
 16624  00235C  242C               	addwf	??_InterruptHandlerHigh^0,w,c
 16625  00235E  6EDF               	movwf	indf2,c
 16626                           
 16627                           ;can.c: 107: if ((rx[ri][0] != 0xC0) || (rx[ri][1] == node_id))
 16628  002360  500C               	movf	_ri^0,w,c	;volatile
 16629  002362  0D0A               	mullw	10
 16630  002364  0EB7               	movlw	low _rx
 16631  002366  24F3               	addwf	243,w,c
 16632  002368  6ED9               	movwf	fsr2l,c
 16633  00236A  0E02               	movlw	high _rx
 16634  00236C  20F4               	addwfc	prodh,w,c
 16635  00236E  6EDA               	movwf	fsr2h,c
 16636  002370  0EC0               	movlw	192
 16637  002372  18DE               	xorwf	postinc2,w,c
 16638  002374  A4D8               	btfss	status,2,c
 16639  002376  D00D               	goto	i2u899_40
 16640                           
 16641                           ; BSR set to: 15
 16642  002378  500C               	movf	_ri^0,w,c	;volatile
 16643  00237A  0D0A               	mullw	10
 16644  00237C  0EB8               	movlw	low (_rx+1)
 16645  00237E  24F3               	addwf	243,w,c
 16646  002380  6ED9               	movwf	fsr2l,c
 16647  002382  0E02               	movlw	high (_rx+1)
 16648  002384  20F4               	addwfc	prodh,w,c
 16649  002386  6EDA               	movwf	fsr2h,c
 16650  002388  0100               	movlb	0	; () banked
 16651  00238A  519D               	movf	_node_id& (0+255),w,b
 16652  00238C  18DE               	xorwf	postinc2,w,c
 16653  00238E  A4D8               	btfss	status,2,c
 16654  002390  D036               	goto	i2l7873
 16655  002392                     i2u899_40:
 16656                           
 16657                           ;can.c: 108: {;can.c: 109: lenght = RXB1DLC & 0x0F;
 16658  002392  010F               	movlb	15	; () banked
 16659  002394  5135               	movf	53,w,b	;volatile
 16660  002396  0B0F               	andlw	15
 16661  002398  6E39               	movwf	InterruptHandlerHigh@lenght^0,c
 16662                           
 16663                           ;can.c: 110: ptr = (BYTE*)&RXB1D0;
 16664  00239A  0E36               	movlw	54
 16665  00239C  6E37               	movwf	InterruptHandlerHigh@ptr^0,c
 16666  00239E  0E0F               	movlw	15
 16667  0023A0  6E38               	movwf	(InterruptHandlerHigh@ptr+1)^0,c
 16668                           
 16669                           ; BSR set to: 15
 16670                           ;can.c: 111: for (i = 0; i < lenght; i++)
 16671  0023A2  0E00               	movlw	0
 16672  0023A4  6E3A               	movwf	InterruptHandlerHigh@i^0,c
 16673  0023A6  D01D               	goto	i2l7865
 16674  0023A8                     i2l7861:
 16675                           
 16676                           ;can.c: 112: rx[ri][2 + i] = ptr[i];
 16677  0023A8  503A               	movf	InterruptHandlerHigh@i^0,w,c
 16678  0023AA  2437               	addwf	InterruptHandlerHigh@ptr^0,w,c
 16679  0023AC  6ED9               	movwf	fsr2l,c
 16680  0023AE  0E00               	movlw	0
 16681  0023B0  2038               	addwfc	(InterruptHandlerHigh@ptr+1)^0,w,c
 16682  0023B2  6EDA               	movwf	fsr2h,c
 16683  0023B4  500C               	movf	_ri^0,w,c	;volatile
 16684  0023B6  0D0A               	mullw	10
 16685  0023B8  0EB7               	movlw	low _rx
 16686  0023BA  6E2C               	movwf	??_InterruptHandlerHigh^0,c
 16687  0023BC  0E02               	movlw	high _rx
 16688  0023BE  6E2D               	movwf	(??_InterruptHandlerHigh+1)^0,c
 16689  0023C0  0E02               	movlw	2
 16690  0023C2  262C               	addwf	??_InterruptHandlerHigh^0,f,c
 16691  0023C4  0E00               	movlw	0
 16692  0023C6  222D               	addwfc	(??_InterruptHandlerHigh+1)^0,f,c
 16693  0023C8  50F3               	movf	243,w,c
 16694  0023CA  262C               	addwf	??_InterruptHandlerHigh^0,f,c
 16695  0023CC  50F4               	movf	244,w,c
 16696  0023CE  222D               	addwfc	(??_InterruptHandlerHigh+1)^0,f,c
 16697  0023D0  503A               	movf	InterruptHandlerHigh@i^0,w,c
 16698  0023D2  242C               	addwf	??_InterruptHandlerHigh^0,w,c
 16699  0023D4  6EE1               	movwf	fsr1l,c
 16700  0023D6  0E00               	movlw	0
 16701  0023D8  202D               	addwfc	(??_InterruptHandlerHigh+1)^0,w,c
 16702  0023DA  6EE2               	movwf	fsr1h,c
 16703  0023DC  CFDF FFE7          	movff	indf2,indf1
 16704  0023E0  2A3A               	incf	InterruptHandlerHigh@i^0,f,c
 16705  0023E2                     i2l7865:
 16706  0023E2  5039               	movf	InterruptHandlerHigh@lenght^0,w,c
 16707  0023E4  5C3A               	subwf	InterruptHandlerHigh@i^0,w,c
 16708  0023E6  A0D8               	btfss	status,0,c
 16709  0023E8  D7DF               	goto	i2l7861
 16710                           
 16711                           ;can.c: 113: if (ri == (30-1))
 16712  0023EA  0E1D               	movlw	29
 16713  0023EC  180C               	xorwf	_ri^0,w,c	;volatile
 16714  0023EE  A4D8               	btfss	status,2,c
 16715  0023F0  D003               	goto	i2l7871
 16716                           
 16717                           ;can.c: 114: ri = 0;
 16718  0023F2  0E00               	movlw	0
 16719  0023F4  6E0C               	movwf	_ri^0,c	;volatile
 16720  0023F6  D001               	goto	i2l863
 16721  0023F8                     i2l7871:
 16722                           
 16723                           ;can.c: 115: else;can.c: 116: ri++;
 16724  0023F8  2A0C               	incf	_ri^0,f,c	;volatile
 16725  0023FA                     i2l863:
 16726                           
 16727                           ;can.c: 117: rc++;
 16728  0023FA  0100               	movlb	0	; () banked
 16729  0023FC  2B92               	incf	_rc& (0+255),f,b	;volatile
 16730  0023FE                     i2l7873:
 16731                           
 16732                           ; BSR set to: 0
 16733                           ;can.c: 118: };can.c: 119: };can.c: 120: RXB1CONbits.RXFUL = 0;
 16734  0023FE  010F               	movlb	15	; () banked
 16735  002400  9F30               	bcf	48,7,b	;volatile
 16736                           
 16737                           ; BSR set to: 15
 16738                           ;can.c: 121: PIR5bits.RXB1IF = 0;
 16739  002402  9277               	bcf	119,1,c	;volatile
 16740                           
 16741                           ;can.c: 122: break;
 16742  002404  D158               	goto	i2l896
 16743  002406                     i2l7877:
 16744                           
 16745                           ; BSR set to: 0
 16746                           ;can.c: 125: if (tc)
 16747  002406  500D               	movf	_tc^0,w,c	;volatile
 16748  002408  B4D8               	btfsc	status,2,c
 16749  00240A  D070               	goto	i2l7901
 16750                           
 16751                           ; BSR set to: 0
 16752                           ;can.c: 126: {;can.c: 127: TXB0SIDH = (tx[to][0] & 0xF0) + (tx[to][1] >> 3);
 16753  00240C  500B               	movf	_to^0,w,c	;volatile
 16754  00240E  0D0A               	mullw	10
 16755  002410  0E8C               	movlw	low (_tx+1)
 16756  002412  24F3               	addwf	243,w,c
 16757  002414  6ED9               	movwf	fsr2l,c
 16758  002416  0E01               	movlw	high (_tx+1)
 16759  002418  20F4               	addwfc	prodh,w,c
 16760  00241A  6EDA               	movwf	fsr2h,c
 16761  00241C  50DF               	movf	indf2,w,c
 16762  00241E  6E2C               	movwf	??_InterruptHandlerHigh^0,c
 16763  002420  90D8               	bcf	status,0,c
 16764  002422  322C               	rrcf	??_InterruptHandlerHigh^0,f,c
 16765  002424  90D8               	bcf	status,0,c
 16766  002426  322C               	rrcf	??_InterruptHandlerHigh^0,f,c
 16767  002428  90D8               	bcf	status,0,c
 16768  00242A  322C               	rrcf	??_InterruptHandlerHigh^0,f,c
 16769  00242C  500B               	movf	_to^0,w,c	;volatile
 16770  00242E  0D0A               	mullw	10
 16771  002430  0E8B               	movlw	low _tx
 16772  002432  24F3               	addwf	243,w,c
 16773  002434  6ED9               	movwf	fsr2l,c
 16774  002436  0E01               	movlw	high _tx
 16775  002438  20F4               	addwfc	prodh,w,c
 16776  00243A  6EDA               	movwf	fsr2h,c
 16777  00243C  50DF               	movf	indf2,w,c
 16778  00243E  0BF0               	andlw	240
 16779  002440  242C               	addwf	??_InterruptHandlerHigh^0,w,c
 16780  002442  010F               	movlb	15	; () banked
 16781  002444  6F21               	movwf	33,b	;volatile
 16782                           
 16783                           ;can.c: 128: TXB0SIDL = tx[to][1] << 5;
 16784  002446  500B               	movf	_to^0,w,c	;volatile
 16785  002448  0D0A               	mullw	10
 16786  00244A  0E8C               	movlw	low (_tx+1)
 16787  00244C  24F3               	addwf	243,w,c
 16788  00244E  6ED9               	movwf	fsr2l,c
 16789  002450  0E01               	movlw	high (_tx+1)
 16790  002452  20F4               	addwfc	prodh,w,c
 16791  002454  6EDA               	movwf	fsr2h,c
 16792  002456  50DF               	movf	indf2,w,c
 16793  002458  6E2C               	movwf	??_InterruptHandlerHigh^0,c
 16794  00245A  0E05               	movlw	5
 16795  00245C  6E2D               	movwf	(??_InterruptHandlerHigh+1)^0,c
 16796  00245E                     i2u903_45:
 16797  00245E  90D8               	bcf	status,0,c
 16798  002460  362C               	rlcf	??_InterruptHandlerHigh^0,f,c
 16799  002462  2E2D               	decfsz	(??_InterruptHandlerHigh+1)^0,f,c
 16800  002464  D7FC               	goto	i2u903_45
 16801  002466  502C               	movf	??_InterruptHandlerHigh^0,w,c
 16802  002468  6F22               	movwf	34,b	;volatile
 16803                           
 16804                           ;can.c: 129: lenght = tx[to][0] & 0x0F;
 16805  00246A  500B               	movf	_to^0,w,c	;volatile
 16806  00246C  0D0A               	mullw	10
 16807  00246E  0E8B               	movlw	low _tx
 16808  002470  24F3               	addwf	243,w,c
 16809  002472  6ED9               	movwf	fsr2l,c
 16810  002474  0E01               	movlw	high _tx
 16811  002476  20F4               	addwfc	prodh,w,c
 16812  002478  6EDA               	movwf	fsr2h,c
 16813  00247A  50DF               	movf	indf2,w,c
 16814  00247C  0B0F               	andlw	15
 16815  00247E  6E39               	movwf	InterruptHandlerHigh@lenght^0,c
 16816                           
 16817                           ; BSR set to: 15
 16818                           ;can.c: 130: TXB0DLC = lenght;
 16819  002480  C039  FF25         	movff	InterruptHandlerHigh@lenght,3877	;volatile
 16820                           
 16821                           ; BSR set to: 15
 16822                           ;can.c: 131: ptr = (BYTE*)&TXB0D0;
 16823  002484  0E26               	movlw	38
 16824  002486  6E37               	movwf	InterruptHandlerHigh@ptr^0,c
 16825  002488  0E0F               	movlw	15
 16826  00248A  6E38               	movwf	(InterruptHandlerHigh@ptr+1)^0,c
 16827                           
 16828                           ; BSR set to: 15
 16829                           ;can.c: 132: for (i = 0; i < lenght; i++)
 16830  00248C  0E00               	movlw	0
 16831  00248E  6E3A               	movwf	InterruptHandlerHigh@i^0,c
 16832  002490  D01D               	goto	i2l7891
 16833  002492                     i2l7887:
 16834                           
 16835                           ;can.c: 133: ptr[i] = tx[to][2 + i];
 16836  002492  500B               	movf	_to^0,w,c	;volatile
 16837  002494  0D0A               	mullw	10
 16838  002496  0E8B               	movlw	low _tx
 16839  002498  6E2C               	movwf	??_InterruptHandlerHigh^0,c
 16840  00249A  0E01               	movlw	high _tx
 16841  00249C  6E2D               	movwf	(??_InterruptHandlerHigh+1)^0,c
 16842  00249E  0E02               	movlw	2
 16843  0024A0  262C               	addwf	??_InterruptHandlerHigh^0,f,c
 16844  0024A2  0E00               	movlw	0
 16845  0024A4  222D               	addwfc	(??_InterruptHandlerHigh+1)^0,f,c
 16846  0024A6  50F3               	movf	243,w,c
 16847  0024A8  262C               	addwf	??_InterruptHandlerHigh^0,f,c
 16848  0024AA  50F4               	movf	244,w,c
 16849  0024AC  222D               	addwfc	(??_InterruptHandlerHigh+1)^0,f,c
 16850  0024AE  503A               	movf	InterruptHandlerHigh@i^0,w,c
 16851  0024B0  242C               	addwf	??_InterruptHandlerHigh^0,w,c
 16852  0024B2  6ED9               	movwf	fsr2l,c
 16853  0024B4  0E00               	movlw	0
 16854  0024B6  202D               	addwfc	(??_InterruptHandlerHigh+1)^0,w,c
 16855  0024B8  6EDA               	movwf	fsr2h,c
 16856  0024BA  503A               	movf	InterruptHandlerHigh@i^0,w,c
 16857  0024BC  2437               	addwf	InterruptHandlerHigh@ptr^0,w,c
 16858  0024BE  6EE1               	movwf	fsr1l,c
 16859  0024C0  0E00               	movlw	0
 16860  0024C2  2038               	addwfc	(InterruptHandlerHigh@ptr+1)^0,w,c
 16861  0024C4  6EE2               	movwf	fsr1h,c
 16862  0024C6  CFDF FFE7          	movff	indf2,indf1
 16863  0024CA  2A3A               	incf	InterruptHandlerHigh@i^0,f,c
 16864  0024CC                     i2l7891:
 16865  0024CC  5039               	movf	InterruptHandlerHigh@lenght^0,w,c
 16866  0024CE  5C3A               	subwf	InterruptHandlerHigh@i^0,w,c
 16867  0024D0  A0D8               	btfss	status,0,c
 16868  0024D2  D7DF               	goto	i2l7887
 16869                           
 16870                           ;can.c: 134: TXB0CONbits.TXREQ = 1;
 16871  0024D4  010F               	movlb	15	; () banked
 16872  0024D6  8720               	bsf	32,3,b	;volatile
 16873                           
 16874                           ; BSR set to: 15
 16875                           ;can.c: 135: tc--;
 16876  0024D8  060D               	decf	_tc^0,f,c	;volatile
 16877                           
 16878                           ; BSR set to: 15
 16879                           ;can.c: 136: if (to == (30-1))
 16880  0024DA  0E1D               	movlw	29
 16881  0024DC  180B               	xorwf	_to^0,w,c	;volatile
 16882  0024DE  A4D8               	btfss	status,2,c
 16883  0024E0  D003               	goto	i2l7899
 16884                           
 16885                           ; BSR set to: 15
 16886                           ;can.c: 137: to = 0;
 16887  0024E2  0E00               	movlw	0
 16888  0024E4  6E0B               	movwf	_to^0,c	;volatile
 16889  0024E6  D004               	goto	i2l7903
 16890  0024E8                     i2l7899:
 16891                           
 16892                           ; BSR set to: 15
 16893                           ;can.c: 138: else;can.c: 139: to++;
 16894  0024E8  2A0B               	incf	_to^0,f,c	;volatile
 16895  0024EA  D002               	goto	i2l7903
 16896  0024EC                     i2l7901:
 16897                           
 16898                           ; BSR set to: 0
 16899                           ;can.c: 141: else;can.c: 142: tr = 1;
 16900  0024EC  0E01               	movlw	1
 16901  0024EE  6E09               	movwf	_tr^0,c	;volatile
 16902  0024F0                     i2l7903:
 16903                           
 16904                           ;can.c: 143: PIR5bits.TXB0IF = 0;
 16905  0024F0  9477               	bcf	119,2,c	;volatile
 16906                           
 16907                           ;can.c: 144: break;
 16908  0024F2  D0E1               	goto	i2l896
 16909  0024F4                     i2l7905:
 16910                           
 16911                           ; BSR set to: 0
 16912                           ;can.c: 147: if ((rc == 30) && (!can_passive_time))
 16913  0024F4  0E1E               	movlw	30
 16914  0024F6  1992               	xorwf	_rc& (0+255),w,b	;volatile
 16915  0024F8  A4D8               	btfss	status,2,c
 16916  0024FA  D007               	goto	i2l7913
 16917                           
 16918                           ; BSR set to: 0
 16919  0024FC  5016               	movf	_can_passive_time^0,w,c
 16920  0024FE  A4D8               	btfss	status,2,c
 16921  002500  D004               	goto	i2l7913
 16922                           
 16923                           ; BSR set to: 0
 16924                           ;can.c: 148: {;can.c: 149: errorregister |= 0x10;
 16925  002502  89BA               	bsf	_errorregister& (0+255),4,b
 16926                           
 16927                           ; BSR set to: 0
 16928                           ;can.c: 150: can_passive_time = 20;
 16929  002504  0E14               	movlw	20
 16930  002506  6E16               	movwf	_can_passive_time^0,c
 16931                           
 16932                           ;can.c: 151: }
 16933  002508  D091               	goto	i2l7941
 16934  00250A                     i2l7913:
 16935                           
 16936                           ; BSR set to: 0
 16937                           ;can.c: 152: else;can.c: 153: {;can.c: 154: rx[ri][0] = RXB0SIDH & 0xF0;
 16938  00250A  500C               	movf	_ri^0,w,c	;volatile
 16939  00250C  0D0A               	mullw	10
 16940  00250E  0EB7               	movlw	low _rx
 16941  002510  24F3               	addwf	243,w,c
 16942  002512  6ED9               	movwf	fsr2l,c
 16943  002514  0E02               	movlw	high _rx
 16944  002516  20F4               	addwfc	prodh,w,c
 16945  002518  6EDA               	movwf	fsr2h,c
 16946  00251A  5061               	movf	97,w,c	;volatile
 16947  00251C  0BF0               	andlw	240
 16948  00251E  6EDF               	movwf	indf2,c
 16949                           
 16950                           ;can.c: 155: rx[ri][1] = (RXB0SIDL >> 5) + ((RXB0SIDH & 0x0F) << 3);
 16951  002520  500C               	movf	_ri^0,w,c	;volatile
 16952  002522  0D0A               	mullw	10
 16953  002524  0EB8               	movlw	low (_rx+1)
 16954  002526  24F3               	addwf	243,w,c
 16955  002528  6ED9               	movwf	fsr2l,c
 16956  00252A  0E02               	movlw	high (_rx+1)
 16957  00252C  20F4               	addwfc	prodh,w,c
 16958  00252E  6EDA               	movwf	fsr2h,c
 16959  002530  CF62 F02C          	movff	3938,??_InterruptHandlerHigh	;volatile
 16960  002534  0E05               	movlw	5
 16961  002536  6E2D               	movwf	(??_InterruptHandlerHigh+1)^0,c
 16962  002538                     i2u908_45:
 16963  002538  90D8               	bcf	status,0,c
 16964  00253A  322C               	rrcf	??_InterruptHandlerHigh^0,f,c
 16965  00253C  2E2D               	decfsz	(??_InterruptHandlerHigh+1)^0,f,c
 16966  00253E  D7FC               	goto	i2u908_45
 16967  002540  5061               	movf	97,w,c	;volatile
 16968  002542  0B0F               	andlw	15
 16969  002544  0D08               	mullw	8
 16970  002546  50F3               	movf	243,w,c
 16971  002548  242C               	addwf	??_InterruptHandlerHigh^0,w,c
 16972  00254A  6EDF               	movwf	indf2,c
 16973                           
 16974                           ;can.c: 156: if(rx[ri][0] == 0xE0)
 16975  00254C  500C               	movf	_ri^0,w,c	;volatile
 16976  00254E  0D0A               	mullw	10
 16977  002550  0EB7               	movlw	low _rx
 16978  002552  24F3               	addwf	243,w,c
 16979  002554  6ED9               	movwf	fsr2l,c
 16980  002556  0E02               	movlw	high _rx
 16981  002558  20F4               	addwfc	prodh,w,c
 16982  00255A  6EDA               	movwf	fsr2h,c
 16983  00255C  0EE0               	movlw	224
 16984  00255E  18DE               	xorwf	postinc2,w,c
 16985  002560  A4D8               	btfss	status,2,c
 16986  002562  D017               	goto	i2l7921
 16987                           
 16988                           ; BSR set to: 0
 16989                           ;can.c: 157: {;can.c: 158: hse_no = (RXB0SIDL >> 5) + (RXB0SIDH << 3) - 1;
 16990  002564  CF62 F02C          	movff	3938,??_InterruptHandlerHigh	;volatile
 16991  002568  0E05               	movlw	5
 16992  00256A  6E2D               	movwf	(??_InterruptHandlerHigh+1)^0,c
 16993  00256C                     i2u910_45:
 16994  00256C  90D8               	bcf	status,0,c
 16995  00256E  322C               	rrcf	??_InterruptHandlerHigh^0,f,c
 16996  002570  2E2D               	decfsz	(??_InterruptHandlerHigh+1)^0,f,c
 16997  002572  D7FC               	goto	i2u910_45
 16998  002574  5061               	movf	97,w,c	;volatile
 16999  002576  0D08               	mullw	8
 17000  002578  50F3               	movf	243,w,c
 17001  00257A  242C               	addwf	??_InterruptHandlerHigh^0,w,c
 17002  00257C  6E2E               	movwf	(??_InterruptHandlerHigh+2)^0,c
 17003  00257E  042E               	decf	(??_InterruptHandlerHigh+2)^0,w,c
 17004  002580  6E35               	movwf	InterruptHandlerHigh@hse_no^0,c
 17005                           
 17006                           ; BSR set to: 0
 17007                           ;can.c: 159: if (hse_no < 8)
 17008  002582  0E08               	movlw	8
 17009  002584  6035               	cpfslt	InterruptHandlerHigh@hse_no^0,c
 17010  002586  D002               	goto	i2l877
 17011                           
 17012                           ; BSR set to: 0
 17013                           ;can.c: 160: hsetime = 50;
 17014  002588  0E32               	movlw	50
 17015  00258A  6E17               	movwf	_hsetime^0,c	;volatile
 17016  00258C                     i2l877:
 17017                           
 17018                           ; BSR set to: 0
 17019                           ;can.c: 161: hse_heartbeat = 1;
 17020  00258C  0E01               	movlw	1
 17021  00258E  6F87               	movwf	_hse_heartbeat& (0+255),b	;volatile
 17022                           
 17023                           ;can.c: 162: }
 17024  002590  D04D               	goto	i2l7941
 17025  002592                     i2l7921:
 17026                           
 17027                           ; BSR set to: 0
 17028                           ;can.c: 163: else if((rx[ri][0] == 0xA0) && (rx[ri][1] == 0x0B))
 17029  002592  500C               	movf	_ri^0,w,c	;volatile
 17030  002594  0D0A               	mullw	10
 17031  002596  0EB7               	movlw	low _rx
 17032  002598  24F3               	addwf	243,w,c
 17033  00259A  6ED9               	movwf	fsr2l,c
 17034  00259C  0E02               	movlw	high _rx
 17035  00259E  20F4               	addwfc	prodh,w,c
 17036  0025A0  6EDA               	movwf	fsr2h,c
 17037  0025A2  0EA0               	movlw	160
 17038  0025A4  18DE               	xorwf	postinc2,w,c
 17039  0025A6  A4D8               	btfss	status,2,c
 17040  0025A8  D041               	goto	i2l7941
 17041                           
 17042                           ; BSR set to: 0
 17043  0025AA  500C               	movf	_ri^0,w,c	;volatile
 17044  0025AC  0D0A               	mullw	10
 17045  0025AE  0EB8               	movlw	low (_rx+1)
 17046  0025B0  24F3               	addwf	243,w,c
 17047  0025B2  6ED9               	movwf	fsr2l,c
 17048  0025B4  0E02               	movlw	high (_rx+1)
 17049  0025B6  20F4               	addwfc	prodh,w,c
 17050  0025B8  6EDA               	movwf	fsr2h,c
 17051  0025BA  0E0B               	movlw	11
 17052  0025BC  18DE               	xorwf	postinc2,w,c
 17053  0025BE  A4D8               	btfss	status,2,c
 17054  0025C0  D035               	goto	i2l7941
 17055                           
 17056                           ; BSR set to: 0
 17057                           ;can.c: 164: {;can.c: 165: lenght = RXB0DLC & 0x0F;
 17058  0025C2  5065               	movf	101,w,c	;volatile
 17059  0025C4  0B0F               	andlw	15
 17060  0025C6  6E39               	movwf	InterruptHandlerHigh@lenght^0,c
 17061                           
 17062                           ;can.c: 166: ptr = (BYTE*)&RXB0D0;
 17063  0025C8  0E66               	movlw	102
 17064  0025CA  6E37               	movwf	InterruptHandlerHigh@ptr^0,c
 17065  0025CC  0E0F               	movlw	15
 17066  0025CE  6E38               	movwf	(InterruptHandlerHigh@ptr+1)^0,c
 17067                           
 17068                           ; BSR set to: 0
 17069                           ;can.c: 167: for (i = 0; i < lenght; i++)
 17070  0025D0  0E00               	movlw	0
 17071  0025D2  6E3A               	movwf	InterruptHandlerHigh@i^0,c
 17072  0025D4  D01D               	goto	i2l7933
 17073  0025D6                     i2l7929:
 17074                           
 17075                           ;can.c: 168: rx[ri][2 + i] = ptr[i];
 17076  0025D6  503A               	movf	InterruptHandlerHigh@i^0,w,c
 17077  0025D8  2437               	addwf	InterruptHandlerHigh@ptr^0,w,c
 17078  0025DA  6ED9               	movwf	fsr2l,c
 17079  0025DC  0E00               	movlw	0
 17080  0025DE  2038               	addwfc	(InterruptHandlerHigh@ptr+1)^0,w,c
 17081  0025E0  6EDA               	movwf	fsr2h,c
 17082  0025E2  500C               	movf	_ri^0,w,c	;volatile
 17083  0025E4  0D0A               	mullw	10
 17084  0025E6  0EB7               	movlw	low _rx
 17085  0025E8  6E2C               	movwf	??_InterruptHandlerHigh^0,c
 17086  0025EA  0E02               	movlw	high _rx
 17087  0025EC  6E2D               	movwf	(??_InterruptHandlerHigh+1)^0,c
 17088  0025EE  0E02               	movlw	2
 17089  0025F0  262C               	addwf	??_InterruptHandlerHigh^0,f,c
 17090  0025F2  0E00               	movlw	0
 17091  0025F4  222D               	addwfc	(??_InterruptHandlerHigh+1)^0,f,c
 17092  0025F6  50F3               	movf	243,w,c
 17093  0025F8  262C               	addwf	??_InterruptHandlerHigh^0,f,c
 17094  0025FA  50F4               	movf	244,w,c
 17095  0025FC  222D               	addwfc	(??_InterruptHandlerHigh+1)^0,f,c
 17096  0025FE  503A               	movf	InterruptHandlerHigh@i^0,w,c
 17097  002600  242C               	addwf	??_InterruptHandlerHigh^0,w,c
 17098  002602  6EE1               	movwf	fsr1l,c
 17099  002604  0E00               	movlw	0
 17100  002606  202D               	addwfc	(??_InterruptHandlerHigh+1)^0,w,c
 17101  002608  6EE2               	movwf	fsr1h,c
 17102  00260A  CFDF FFE7          	movff	indf2,indf1
 17103  00260E  2A3A               	incf	InterruptHandlerHigh@i^0,f,c
 17104  002610                     i2l7933:
 17105  002610  5039               	movf	InterruptHandlerHigh@lenght^0,w,c
 17106  002612  5C3A               	subwf	InterruptHandlerHigh@i^0,w,c
 17107  002614  A0D8               	btfss	status,0,c
 17108  002616  D7DF               	goto	i2l7929
 17109                           
 17110                           ;can.c: 169: if (ri == (30 - 1))
 17111  002618  0E1D               	movlw	29
 17112  00261A  180C               	xorwf	_ri^0,w,c	;volatile
 17113  00261C  A4D8               	btfss	status,2,c
 17114  00261E  D003               	goto	i2l7939
 17115                           
 17116                           ;can.c: 170: ri = 0;
 17117  002620  0E00               	movlw	0
 17118  002622  6E0C               	movwf	_ri^0,c	;volatile
 17119  002624  D001               	goto	i2l884
 17120  002626                     i2l7939:
 17121                           
 17122                           ;can.c: 171: else;can.c: 172: ri++;
 17123  002626  2A0C               	incf	_ri^0,f,c	;volatile
 17124  002628                     i2l884:
 17125                           
 17126                           ;can.c: 173: rc++;
 17127  002628  0100               	movlb	0	; () banked
 17128  00262A  2B92               	incf	_rc& (0+255),f,b	;volatile
 17129  00262C                     i2l7941:
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;can.c: 174: };can.c: 175: };can.c: 176: RXB0CONbits.RXFUL = 0;
 17133  00262C  9E60               	bcf	96,7,c	;volatile
 17134                           
 17135                           ; BSR set to: 0
 17136                           ;can.c: 177: PIR5bits.RXB0IF = 0;
 17137  00262E  9077               	bcf	119,0,c	;volatile
 17138                           
 17139                           ;can.c: 178: break;
 17140  002630  D042               	goto	i2l896
 17141  002632                     i2l885:
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;can.c: 181: PIR5bits.WAKIF = 0;
 17145  002632  9C77               	bcf	119,6,c	;volatile
 17146                           
 17147                           ;can.c: 182: break;
 17148  002634  D040               	goto	i2l896
 17149  002636                     i2l886:
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;can.c: 185: PIR5bits.TXB1IF = 0;
 17153  002636  9677               	bcf	119,3,c	;volatile
 17154                           
 17155                           ;can.c: 186: break;
 17156  002638  D03E               	goto	i2l896
 17157  00263A                     i2l887:
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;can.c: 189: PIR5bits.TXB2IF = 0;
 17161  00263A  9877               	bcf	119,4,c	;volatile
 17162                           
 17163                           ;can.c: 190: break;
 17164  00263C  D03C               	goto	i2l896
 17165  00263E                     i2l888:
 17166                           
 17167                           ; BSR set to: 0
 17168                           ;can.c: 192: PIR5bits.ERRIF = 0;
 17169  00263E  9A77               	bcf	119,5,c	;volatile
 17170                           
 17171                           ;can.c: 193: if ((COMSTATbits.RXB1OVFL) && (!can_passive_time))
 17172  002640  AC71               	btfss	113,6,c	;volatile
 17173  002642  D00A               	goto	i2l7953
 17174                           
 17175                           ; BSR set to: 0
 17176  002644  5016               	movf	_can_passive_time^0,w,c
 17177  002646  A4D8               	btfss	status,2,c
 17178  002648  D007               	goto	i2l7953
 17179                           
 17180                           ; BSR set to: 0
 17181                           ;can.c: 194: {;can.c: 195: COMSTATbits.RXB1OVFL = 0;
 17182  00264A  9C71               	bcf	113,6,c	;volatile
 17183                           
 17184                           ;can.c: 196: RXB1CONbits.RXFUL = 0;
 17185  00264C  010F               	movlb	15	; () banked
 17186  00264E  9F30               	bcf	48,7,b	;volatile
 17187                           
 17188                           ; BSR set to: 15
 17189                           ;can.c: 197: errorregister |= 0x10;
 17190  002650  0100               	movlb	0	; () banked
 17191  002652  89BA               	bsf	_errorregister& (0+255),4,b
 17192                           
 17193                           ; BSR set to: 0
 17194                           ;can.c: 198: can_passive_time = 20;
 17195  002654  0E14               	movlw	20
 17196  002656  6E16               	movwf	_can_passive_time^0,c
 17197  002658                     i2l7953:
 17198                           
 17199                           ; BSR set to: 0
 17200                           ;can.c: 199: };can.c: 200: if (COMSTATbits.RXB0OVFL)
 17201  002658  AE71               	btfss	113,7,c	;volatile
 17202  00265A  D002               	goto	i2l890
 17203                           
 17204                           ; BSR set to: 0
 17205                           ;can.c: 201: {;can.c: 202: COMSTATbits.RXB0OVFL = 0;
 17206  00265C  9E71               	bcf	113,7,c	;volatile
 17207                           
 17208                           ;can.c: 203: RXB0CONbits.RXFUL = 0;
 17209  00265E  9E60               	bcf	96,7,c	;volatile
 17210  002660                     i2l890:
 17211                           
 17212                           ; BSR set to: 0
 17213                           ;can.c: 204: };can.c: 205: if (COMSTATbits.TXBO)
 17214  002660  AA71               	btfss	113,5,c	;volatile
 17215  002662  D008               	goto	i2l7961
 17216                           
 17217                           ; BSR set to: 0
 17218                           ;can.c: 206: {;can.c: 207: if(merker != 0x55)
 17219  002664  0E55               	movlw	85
 17220  002666  1991               	xorwf	_merker& (0+255),w,b
 17221  002668  B4D8               	btfsc	status,2,c
 17222  00266A  D004               	goto	i2l7961
 17223                           
 17224                           ; BSR set to: 0
 17225                           ;can.c: 208: {;can.c: 209: merker = 0x55;
 17226  00266C  0E55               	movlw	85
 17227  00266E  6F91               	movwf	_merker& (0+255),b
 17228                           
 17229                           ;can.c: 210: can_inittime = 4;
 17230  002670  0E04               	movlw	4
 17231  002672  6F86               	movwf	_can_inittime& (0+255),b	;volatile
 17232  002674                     i2l7961:
 17233                           
 17234                           ; BSR set to: 0
 17235                           ;can.c: 211: };can.c: 212: };can.c: 213: if ((COMSTATbits.TXBP || COMSTATbits.RXBP) && (
      +                          !can_passive_time))
 17236  002674  B871               	btfsc	113,4,c	;volatile
 17237  002676  D002               	goto	i2u922_40
 17238                           
 17239                           ; BSR set to: 0
 17240  002678  A671               	btfss	113,3,c	;volatile
 17241  00267A  D01D               	goto	i2l896
 17242  00267C                     i2u922_40:
 17243                           
 17244                           ; BSR set to: 0
 17245  00267C  5016               	movf	_can_passive_time^0,w,c
 17246  00267E  A4D8               	btfss	status,2,c
 17247  002680  D01A               	goto	i2l896
 17248                           
 17249                           ; BSR set to: 0
 17250                           ;can.c: 214: {;can.c: 215: errorregister |= 0x10;
 17251  002682  89BA               	bsf	_errorregister& (0+255),4,b
 17252                           
 17253                           ; BSR set to: 0
 17254                           ;can.c: 216: can_passive_time = 20;
 17255  002684  0E14               	movlw	20
 17256  002686  6E16               	movwf	_can_passive_time^0,c
 17257  002688  D016               	goto	i2l896
 17258  00268A                     i2l7973:
 17259                           
 17260                           ; BSR set to: 0
 17261  00268A  5036               	movf	InterruptHandlerHigh@tempCANSTAT^0,w,c
 17262                           
 17263                           ; Switch size 1, requested type "simple"
 17264                           ; Number of cases is 7, Range of values is 2 to 14
 17265                           ; switch strategies available:
 17266                           ; Name         Instructions Cycles
 17267                           ; simple_byte           22    12 (average)
 17268                           ;	Chosen strategy is simple_byte
 17269  00268C  0A02               	xorlw	2	; case 2
 17270  00268E  B4D8               	btfsc	status,2,c
 17271  002690  D7D6               	goto	i2l888
 17272  002692  0A06               	xorlw	6	; case 4
 17273  002694  B4D8               	btfsc	status,2,c
 17274  002696  D7D1               	goto	i2l887
 17275  002698  0A02               	xorlw	2	; case 6
 17276  00269A  B4D8               	btfsc	status,2,c
 17277  00269C  D7CC               	goto	i2l886
 17278  00269E  0A0E               	xorlw	14	; case 8
 17279  0026A0  B4D8               	btfsc	status,2,c
 17280  0026A2  D6B1               	goto	i2l7877
 17281  0026A4  0A02               	xorlw	2	; case 10
 17282  0026A6  B4D8               	btfsc	status,2,c
 17283  0026A8  D62E               	goto	i2l7845
 17284  0026AA  0A06               	xorlw	6	; case 12
 17285  0026AC  B4D8               	btfsc	status,2,c
 17286  0026AE  D722               	goto	i2l7905
 17287  0026B0  0A02               	xorlw	2	; case 14
 17288  0026B2  B4D8               	btfsc	status,2,c
 17289  0026B4  D7BE               	goto	i2l885
 17290  0026B6                     i2l896:
 17291  0026B6  C034  FFF4         	movff	??_InterruptHandlerHigh+8,prodh
 17292  0026BA  C033  FFF3         	movff	??_InterruptHandlerHigh+7,prodl
 17293  0026BE  C032  FFDA         	movff	??_InterruptHandlerHigh+6,fsr2h
 17294  0026C2  C031  FFD9         	movff	??_InterruptHandlerHigh+5,fsr2l
 17295  0026C6  C030  FFE2         	movff	??_InterruptHandlerHigh+4,fsr1h
 17296  0026CA  C02F  FFE1         	movff	??_InterruptHandlerHigh+3,fsr1l
 17297  0026CE  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17298  0026D0  0011               	retfie		f
 17299  0026D2                     __end_of_InterruptHandlerHigh:
 17300                           	callstack 0
 17301                           
 17302                           	psect	rparam
 17303  0000                     
 17304                           	psect	temp
 17305  00004D                     btemp:
 17306                           	callstack 0
 17307  00004D                     	ds	1
 17308  0000                     int$flags	set	btemp
 17309  0000                     wtemp8	set	btemp+1
 17310  0000                     ttemp5	set	btemp+1
 17311  0000                     ttemp6	set	btemp+4
 17312  0000                     ttemp7	set	btemp+8
 17313                           
 17314                           	psect	idloc
 17315                           
 17316                           ;Config register IDLOC0 @ 0x200000
 17317                           ;	unspecified, using default values
 17318  200000                     	org	2097152
 17319  200000  FF                 	db	255
 17320                           
 17321                           ;Config register IDLOC1 @ 0x200001
 17322                           ;	unspecified, using default values
 17323  200001                     	org	2097153
 17324  200001  FF                 	db	255
 17325                           
 17326                           ;Config register IDLOC2 @ 0x200002
 17327                           ;	unspecified, using default values
 17328  200002                     	org	2097154
 17329  200002  FF                 	db	255
 17330                           
 17331                           ;Config register IDLOC3 @ 0x200003
 17332                           ;	unspecified, using default values
 17333  200003                     	org	2097155
 17334  200003  FF                 	db	255
 17335                           
 17336                           ;Config register IDLOC4 @ 0x200004
 17337                           ;	unspecified, using default values
 17338  200004                     	org	2097156
 17339  200004  FF                 	db	255
 17340                           
 17341                           ;Config register IDLOC5 @ 0x200005
 17342                           ;	unspecified, using default values
 17343  200005                     	org	2097157
 17344  200005  FF                 	db	255
 17345                           
 17346                           ;Config register IDLOC6 @ 0x200006
 17347                           ;	unspecified, using default values
 17348  200006                     	org	2097158
 17349  200006  FF                 	db	255
 17350                           
 17351                           ;Config register IDLOC7 @ 0x200007
 17352                           ;	unspecified, using default values
 17353  200007                     	org	2097159
 17354  200007  FF                 	db	255
 17355                           
 17356                           	psect	config
 17357                           
 17358                           ;Config register CONFIG1L @ 0x300000
 17359                           ;	VREG Sleep Enable bit
 17360                           ;	RETEN = 0x1, unprogrammed default
 17361                           ;	LF-INTOSC Low-power Enable bit
 17362                           ;	INTOSCSEL = 0x1, unprogrammed default
 17363                           ;	SOSC Power Selection and mode Configuration bits
 17364                           ;	SOSCSEL = DIG, Digital (SCLKI) mode
 17365                           ;	Extended Instruction Set
 17366                           ;	XINST = OFF, Disabled
 17367  300000                     	org	3145728
 17368  300000  15                 	db	21
 17369                           
 17370                           ;Config register CONFIG1H @ 0x300001
 17371                           ;	Oscillator
 17372                           ;	FOSC = HS2, HS oscillator (High power, 16 MHz - 25 MHz)
 17373                           ;	PLL x4 Enable bit
 17374                           ;	PLLCFG = 0x0, unprogrammed default
 17375                           ;	Fail-Safe Clock Monitor
 17376                           ;	FCMEN = 0x0, unprogrammed default
 17377                           ;	Internal External Oscillator Switch Over Mode
 17378                           ;	IESO = 0x0, unprogrammed default
 17379  300001                     	org	3145729
 17380  300001  02                 	db	2
 17381                           
 17382                           ;Config register CONFIG2L @ 0x300002
 17383                           ;	Power Up Timer
 17384                           ;	PWRTEN = ON, Enabled
 17385                           ;	Brown Out Detect
 17386                           ;	BOREN = ON, Controlled with SBOREN bit
 17387                           ;	Brown-out Reset Voltage bits
 17388                           ;	BORV = 1, 2.7V
 17389                           ;	BORMV Power level
 17390                           ;	BORPWR = 0x3, unprogrammed default
 17391  300002                     	org	3145730
 17392  300002  6A                 	db	106
 17393                           
 17394                           ;Config register CONFIG2H @ 0x300003
 17395                           ;	Watchdog Timer
 17396                           ;	WDTEN = ON, WDT controlled by SWDTEN bit setting
 17397                           ;	Watchdog Postscaler
 17398                           ;	WDTPS = 1024, 1:1024
 17399  300003                     	org	3145731
 17400  300003  2A                 	db	42
 17401                           
 17402                           ; Padding undefined space
 17403  300004                     	org	3145732
 17404  300004  FF                 	db	255
 17405                           
 17406                           ;Config register CONFIG3H @ 0x300005
 17407                           ;	ECAN Mux bit
 17408                           ;	CANMX = PORTB, ECAN TX and RX pins are located on RB2 and RB3, respectively
 17409                           ;	MSSP address masking
 17410                           ;	MSSPMSK = 0x1, unprogrammed default
 17411                           ;	Master Clear Enable
 17412                           ;	MCLRE = ON, MCLR Enabled, RE3 Disabled
 17413  300005                     	org	3145733
 17414  300005  89                 	db	137
 17415                           
 17416                           ;Config register CONFIG4L @ 0x300006
 17417                           ;	unspecified, using default values
 17418                           ;	Stack Overflow Reset
 17419                           ;	STVREN = 0x1, unprogrammed default
 17420                           ;	Boot Block Size
 17421                           ;	BBSIZ = 0x1, unprogrammed default
 17422  300006                     	org	3145734
 17423  300006  91                 	db	145
 17424                           
 17425                           ; Padding undefined space
 17426  300007                     	org	3145735
 17427  300007  FF                 	db	255
 17428                           
 17429                           ;Config register CONFIG5L @ 0x300008
 17430                           ;	Code Protect 00800-01FFF
 17431                           ;	CP0 = ON, Enabled
 17432                           ;	Code Protect 02000-03FFF
 17433                           ;	CP1 = ON, Enabled
 17434                           ;	Code Protect 04000-05FFF
 17435                           ;	CP2 = ON, Enabled
 17436                           ;	Code Protect 06000-07FFF
 17437                           ;	CP3 = ON, Enabled
 17438  300008                     	org	3145736
 17439  300008  00                 	db	0
 17440                           
 17441                           ;Config register CONFIG5H @ 0x300009
 17442                           ;	Code Protect Boot
 17443                           ;	CPB = ON, Enabled
 17444                           ;	Data EE Read Protect
 17445                           ;	CPD = 0x1, unprogrammed default
 17446  300009                     	org	3145737
 17447  300009  80                 	db	128
 17448                           
 17449                           ;Config register CONFIG6L @ 0x30000A
 17450                           ;	unspecified, using default values
 17451                           ;	Table Write Protect 00800-01FFF
 17452                           ;	WRT0 = 0x1, unprogrammed default
 17453                           ;	Table Write Protect 02000-03FFF
 17454                           ;	WRT1 = 0x1, unprogrammed default
 17455                           ;	Table Write Protect 04000-05FFF
 17456                           ;	WRT2 = 0x1, unprogrammed default
 17457                           ;	Table Write Protect 06000-07FFF
 17458                           ;	WRT3 = 0x1, unprogrammed default
 17459  30000A                     	org	3145738
 17460  30000A  0F                 	db	15
 17461                           
 17462                           ;Config register CONFIG6H @ 0x30000B
 17463                           ;	unspecified, using default values
 17464                           ;	Config. Write Protect
 17465                           ;	WRTC = 0x1, unprogrammed default
 17466                           ;	Table Write Protect Boot
 17467                           ;	WRTB = 0x1, unprogrammed default
 17468                           ;	Data EE Write Protect
 17469                           ;	WRTD = 0x1, unprogrammed default
 17470  30000B                     	org	3145739
 17471  30000B  E0                 	db	224
 17472                           
 17473                           ;Config register CONFIG7L @ 0x30000C
 17474                           ;	unspecified, using default values
 17475                           ;	Table Read Protect 00800-01FFF
 17476                           ;	EBTR0 = 0x1, unprogrammed default
 17477                           ;	Table Read Protect 02000-03FFF
 17478                           ;	EBTR1 = 0x1, unprogrammed default
 17479                           ;	Table Read Protect 04000-05FFF
 17480                           ;	EBTR2 = 0x1, unprogrammed default
 17481                           ;	Table Read Protect 06000-07FFF
 17482                           ;	EBTR3 = 0x1, unprogrammed default
 17483  30000C                     	org	3145740
 17484  30000C  0F                 	db	15
 17485                           
 17486                           ;Config register CONFIG7H @ 0x30000D
 17487                           ;	unspecified, using default values
 17488                           ;	Table Read Protect Boot
 17489                           ;	EBTRB = 0x1, unprogrammed default
 17490  30000D                     	org	3145741
 17491  30000D  40                 	db	64
 17492                           tosu	equ	0xFFF
 17493                           tosh	equ	0xFFE
 17494                           tosl	equ	0xFFD
 17495                           stkptr	equ	0xFFC
 17496                           pclatu	equ	0xFFB
 17497                           pclath	equ	0xFFA
 17498                           pcl	equ	0xFF9
 17499                           tblptru	equ	0xFF8
 17500                           tblptrh	equ	0xFF7
 17501                           tblptrl	equ	0xFF6
 17502                           tablat	equ	0xFF5
 17503                           prodh	equ	0xFF4
 17504                           prodl	equ	0xFF3
 17505                           indf0	equ	0xFEF
 17506                           postinc0	equ	0xFEE
 17507                           postdec0	equ	0xFED
 17508                           preinc0	equ	0xFEC
 17509                           plusw0	equ	0xFEB
 17510                           fsr0h	equ	0xFEA
 17511                           fsr0l	equ	0xFE9
 17512                           wreg	equ	0xFE8
 17513                           indf1	equ	0xFE7
 17514                           postinc1	equ	0xFE6
 17515                           postdec1	equ	0xFE5
 17516                           preinc1	equ	0xFE4
 17517                           plusw1	equ	0xFE3
 17518                           fsr1h	equ	0xFE2
 17519                           fsr1l	equ	0xFE1
 17520                           bsr	equ	0xFE0
 17521                           indf2	equ	0xFDF
 17522                           postinc2	equ	0xFDE
 17523                           postdec2	equ	0xFDD
 17524                           preinc2	equ	0xFDC
 17525                           plusw2	equ	0xFDB
 17526                           fsr2h	equ	0xFDA
 17527                           fsr2l	equ	0xFD9
 17528                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    1555
    Data        0
    BSS         855
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      76
    BANK0           160     46     138
    BANK1           256     19     139
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    search_dict@pos	PTR unsigned char  size(1) Largest target is 1
		 -> read_rx@pos(BANK0[1]), 

    set_output@virt	PTR unsigned char  size(1) Largest target is 7
		 -> virt_out(BANK0[7]), 

    S1259_dict$pointer	PTR void  size(2) Largest target is 64
		 -> direction_ind_mode(COMRAM[1]), hardware_uea_G741(CODE[6]), device_name_G741(CODE[6]), NULL(NULL[0]), 
		 -> errorregister(BANK0[1]), out_polarity(COMRAM[1]), in_polarity(BANK0[1]), inpar(BANK1[56]), 
		 -> backlight_mode(COMRAM[1]), virtual_device(BANK0[6]), device_type(BANK0[4]), disp_lift(COMRAM[1]), 
		 -> arrowtype(BANK0[1]), outpar(BANK1[64]), out(COMRAM[1]), in(BANK0[1]), 
		 -> version_uea_G741(CODE[6]), 

    dict.pointer	PTR void  size(2) Largest target is 64
		 -> direction_ind_mode(COMRAM[1]), hardware_uea_G741(CODE[6]), device_name_G741(CODE[6]), NULL(NULL[0]), 
		 -> errorregister(BANK0[1]), out_polarity(COMRAM[1]), in_polarity(BANK0[1]), inpar(BANK1[56]), 
		 -> backlight_mode(COMRAM[1]), virtual_device(BANK0[6]), device_type(BANK0[4]), disp_lift(COMRAM[1]), 
		 -> arrowtype(BANK0[1]), outpar(BANK1[64]), out(COMRAM[1]), in(BANK0[1]), 
		 -> version_uea_G741(CODE[6]), 

    sdo_segment@value	PTR unsigned char  size(2) Largest target is 64
		 -> read_rx@buffer(BANK1[8]), NULL(NULL[0]), virt_out(BANK0[7]), virt_in(BANK0[7]), 
		 -> inpar(BANK1[56]), outpar(BANK1[64]), 

    transmit_in@input	PTR unsigned char  size(1) Largest target is 7
		 -> virt_in(BANK0[7]), 

    can_transmit@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB0D0(SFR_1[1]), 

    InterruptHandlerHigh@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> RXB0D0(SFR_2[1]), TXB0D0(SFR_1[1]), RXB1D0(SFR_1[1]), 

    check_version@buf1	PTR unsigned char  size(2) Largest target is 300
		 -> rx(BIGRAM[300]), 

    check_version@buf0	PTR unsigned char  size(2) Largest target is 300
		 -> rx(BIGRAM[300]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptHandlerLow in COMRAM

    _InterruptHandlerLow->i1___lbmod

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_read_rx
    _transmit_in->_can_transmit
    _transmit_error->_can_transmit
    _read_rx->_read_dict
    _set_output->_check_for_call
    _sdo_segment->_can_transmit
    _sdo_response->_can_transmit
    _abort_sdo->_can_transmit
    _check_hse->_check_for_call
    ___lwdiv->___wmul
    _TestMode->_Display_test
    _Display_test->___awmod
    _SetNodeId->___awmod
    ___awmod->___awdiv
    _KeyProg->_lss_response
    _write_eeprom->_read_eeprom
    _lss_response->_can_transmit

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_read_rx

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterruptHandlerLow in BANK3

    None.

Critical Paths under _InterruptHandlerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InterruptHandlerLow in BANK4

    None.

Critical Paths under _InterruptHandlerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _InterruptHandlerLow in BANK5

    None.

Critical Paths under _InterruptHandlerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _InterruptHandlerLow in BANK6

    None.

Critical Paths under _InterruptHandlerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _InterruptHandlerLow in BANK7

    None.

Critical Paths under _InterruptHandlerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _InterruptHandlerLow in BANK8

    None.

Critical Paths under _InterruptHandlerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _InterruptHandlerLow in BANK9

    None.

Critical Paths under _InterruptHandlerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _InterruptHandlerLow in BANK10

    None.

Critical Paths under _InterruptHandlerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _InterruptHandlerLow in BANK11

    None.

Critical Paths under _InterruptHandlerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _InterruptHandlerLow in BANK12

    None.

Critical Paths under _InterruptHandlerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _InterruptHandlerLow in BANK13

    None.

Critical Paths under _InterruptHandlerHigh in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _InterruptHandlerLow in BANK14

    None.

Critical Paths under _InterruptHandlerHigh in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   37552
                                             40 BANK0      6     6      0
                            _DelayMs
                          _InitPorts
                            _KeyProg
                            _KeyScan
                          _SetNodeId
                           _TestMode
                            ___lwdiv
                             ___wmul
                          _abort_sdo
                          _check_hse
                      _check_version
                           _init_can
                        _init_timer0
                        _init_timer1
                        _init_timer2
                      _init_userpara
                        _read_eeprom
                            _read_rx
                     _sent_heartbeat
                      _set_io_config
                     _transmit_error
                        _transmit_in
 ---------------------------------------------------------------------------------
 (1) _transmit_in                                          4     3      1     601
                                             16 BANK0      4     3      1
                       _can_transmit
 ---------------------------------------------------------------------------------
 (1) _transmit_error                                       3     3      0     297
                                             16 BANK0      3     3      0
                       _can_transmit
 ---------------------------------------------------------------------------------
 (1) _sent_heartbeat                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_rx                                             29    29      0   21462
                                             30 BANK0     10    10      0
                                              0 BANK1     19    19      0
                            ___awdiv
                            ___awmod
                            ___lbmod
                          _abort_sdo
                          _read_dict
                       _sdo_response
                        _sdo_segment
                        _search_dict
                      _set_io_config
                         _set_output
                         _write_dict
 ---------------------------------------------------------------------------------
 (2) _write_dict                                          16    11      5    1202
                                             10 BANK0     16    11      5
 ---------------------------------------------------------------------------------
 (2) _set_output                                          12    11      1    6299
                                             11 BANK0     12    11      1
                     _check_for_call
 ---------------------------------------------------------------------------------
 (1) _set_io_config                                        3     3      0     254
                                             10 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _search_dict                                          9     4      5    1423
                                             10 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (2) _sdo_segment                                          7     4      3    1932
                                             16 BANK0      7     4      3
                       _can_transmit
 ---------------------------------------------------------------------------------
 (2) _sdo_response                                         8     1      7    1808
                                             16 BANK0      8     1      7
                       _can_transmit
 ---------------------------------------------------------------------------------
 (2) _read_dict                                           20    16      4     802
                                             10 BANK0     20    16      4
 ---------------------------------------------------------------------------------
 (2) _abort_sdo                                            4     0      4    1231
                                             16 BANK0      4     0      4
                       _can_transmit
 ---------------------------------------------------------------------------------
 (1) _init_userpara                                        1     1      0     353
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_timer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_can                                             5     5      0     489
                                             10 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _check_version                                        8     4      4     489
                                             10 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _check_hse                                            5     5      0     601
                                             11 BANK0      5     5      0
                     _check_for_call
 ---------------------------------------------------------------------------------
 (3) _check_for_call                                       1     1      0      31
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     962
                                             10 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     421
                                             16 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TestMode                                             3     3      0    4176
                                             35 BANK0      3     3      0
                       _Display_test
 ---------------------------------------------------------------------------------
 (2) _Display_test                                        11    11      0    3922
                                             24 BANK0     11    11      0
                            ___awdiv
                            ___awmod
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     667
                                             10 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _SetNodeId                                            4     4      0    2498
                                             24 BANK0      4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1333
                                             18 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1165
                                             10 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _KeyScan                                              8     8      0     498
                                             10 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _KeyProg                                              1     1      0    1693
                                             21 BANK0      1     1      0
                       _lss_response
                       _write_eeprom
 ---------------------------------------------------------------------------------
 (2) _write_eeprom                                         3     0      3    1123
                                             12 BANK0      3     0      3
                        _read_eeprom
 ---------------------------------------------------------------------------------
 (1) _read_eeprom                                          2     0      2     245
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _lss_response                                         5     4      1     539
                                             16 BANK0      5     4      1
                       _can_transmit
 ---------------------------------------------------------------------------------
 (2) _can_transmit                                         6     6      0     198
                                             10 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayMs                                              6     4      2     279
                                             10 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _InterruptHandlerLow                                 24    24      0    1940
                                             19 COMRAM    14    14      0
                                              0 BANK0     10    10      0
                    _SPI_SendOneByte
                          i1___lbmod
 ---------------------------------------------------------------------------------
 (5) i1___lbmod                                            4     3      1     337
                                             15 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (5) _SPI_SendOneByte                                      3     3      0     109
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                15    15      0     410
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DelayMs
   _InitPorts
   _KeyProg
     _lss_response
       _can_transmit
     _write_eeprom
       _read_eeprom
   _KeyScan
   _SetNodeId
     ___awdiv
     ___awmod
       ___awdiv (ARG)
   _TestMode
     _Display_test
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       ___lbmod
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _abort_sdo
     _can_transmit
   _check_hse
     _check_for_call
   _check_version
   _init_can
   _init_timer0
   _init_timer1
   _init_timer2
   _init_userpara
   _read_eeprom
   _read_rx
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     ___lbmod
     _abort_sdo
       _can_transmit
     _read_dict
     _sdo_response
       _can_transmit
     _sdo_segment
       _can_transmit
     _search_dict
     _set_io_config
     _set_output
       _check_for_call
     _write_dict
   _sent_heartbeat
   _set_io_config
   _transmit_error
     _can_transmit
   _transmit_in
     _can_transmit

 _InterruptHandlerLow (ROOT)
   _SPI_SendOneByte
   i1___lbmod

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0     258      35       16.4%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     13      8B       8       54.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2E      8A       5       86.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      4C       1       80.9%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     161       6        0.0%
DATA                 0      0     3B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Oct 13 10:06:51 2020

                 ??_Display_test 00D4                     ___awdiv@sign 00CB  
                             _in 00BB                               _rc 0092  
                             _tc 000D                               _ri 000C  
                             _ti 000A                               _ro 0083  
                             _to 000B                               _tr 0009  
                             _rx 02B7                               _tx 018B  
                             bsr 000FE0              ___wmul@multiplicand 00C8  
                   _out_polarity 0029                              l100 390A  
                            l110 3964                              l131 3444  
                            l125 347E                              l135 347A  
                            l171 3D4A                              l500 34D0  
                            l501 34CC                              l191 35E6  
                            l169 3D42                              l197 3716  
                            l543 1F74                              l552 201C  
                            l537 1ED8                              l554 2066  
                            l547 1FA4                              l580 22D0  
                            l478 4212                              l840 3298  
                            l990 08AC                              l975 079E  
                            l992 08CA                              _PR2 000FCB  
                    _transmit_in 404E                   _check_for_call 4326  
                            _out 002B                              _row 0028  
                   ___awmod@sign 00D3                              prod 000FF3  
                            wreg 000FE8     InterruptHandlerLow@timer_cnt 0004  
                  write_dict@pos 00D5                     _version_fver 7FE9  
                           l1210 1BBC                             l1019 0D1A  
                           l1241 1C94                             l1155 168E  
                           l1077 116C                             l1238 1C7C  
                           l1087 1278                             l1272 3DEA  
                           l1409 42DC                             l2137 41D0  
                           l1097 432A                             l1382 3154  
                           l1374 3170                             l1376 30EC  
                           l9011 159A                             l9005 1580  
                           l9033 15D0                             l9211 1A38  
                           l9131 1876                             l9019 15AE  
                           l9301 1CCC                             l9223 1A4E  
                           l9127 1844                             l9151 189E  
                           l9215 1A42                             l9055 162C  
                           l9047 1614                             l9039 15EA  
                           l9321 1D64                             l9057 1630  
                           l9315 1D60                             l9155 18A8  
                           l8605 3994                             l9165 18C0  
                           l9077 1698                             l9069 1674  
                           l9085 16BA                             l8631 3A82  
                           l8623 3A64                             l8607 3996  
                           l9511 2ABA                             l9431 31B2  
                           l9415 3174                             l9343 1E88  
                           l9263 1BEE                             l9255 1BC6  
                           l9191 1A10                             l8633 3A86  
                           l8713 412A                             l8705 4112  
                           l9353 303C                             l9417 3176  
                           l9281 1C32                             l9273 1C0A  
                           l9441 2704                             l8635 3A88  
                           l8619 3A2A                             l8651 3FEE  
                           l9523 2C3C                             l9515 2B48  
                           l9347 1EB8                             l9283 1C42  
                           l9187 19DE                             l9099 16E4  
                           l9443 270A                             l8645 3FDE  
                           l8709 411C                             l9621 3900  
                           l9533 2CA6                             l9541 2D22  
                           l9509 2AB4                             l9293 1C80  
                           l9277 1C1E                             l9269 1C04  
                           l9461 2830                             l9453 27C4  
                           l8727 437C                             l8719 4364  
                           l8807 3020                             l8751 2DE2  
                           l9703 342A                             l8583 432E  
                           l9527 2C6C                             l9519 2BB8  
                           l8911 3CD8                             l9391 312C  
                           l9383 30F8                             l9279 1C22  
                           l9287 1C52                             l9455 27E4  
                           l8841 3F98                             l9801 360E  
                           l8657 4004                             l8673 4036  
                           l8809 3024                             l8737 2D9A  
                           l9713 3478                             l9705 3448  
                           l9537 2D08                             l9545 2D34  
                           l8905 3CC4                             l9289 1C68  
                           l9473 2978                             l9465 28B0  
                           l8659 400C                             l9651 3970  
                           l9619 38FA                             l9627 391E  
                           l8755 2DF0                             l8907 3CD0  
                           l9299 1C98                             l8829 3F3A  
                           l8677 4044                             l8669 402C  
                           l8693 40E4                             l9637 3932  
                           l8765 2E5C                             l8773 2E6E  
                           l9709 346C                             l9717 3482  
                           l8589 4332                             l8917 3D08  
                           l8861 3E24                             l9477 29E0  
                           l9469 294E                             l9903 430C  
                           l9807 3626                             l9751 3D68  
                           l8775 2EC0                             l8759 2E1C  
                           l9663 3356                             l9671 3382  
                           l8871 3E8A                             l9833 3670  
                           l9745 3D64                             l8697 40F2  
                           l8689 40D8                             l8785 2F30  
                           l8793 2F7C                             l9681 33A0  
                           l8857 3E06                             l8953 13C0  
                           l8929 1306                             l9489 2A36  
                           l9843 369C                             l8699 40FA  
                           l8779 2EF0                             l9915 439A  
                           l8883 3A90                             l8891 3C3E  
                           l8939 131E                             l9861 36D0  
                           l9829 365A                             l9693 33EE  
                           l9685 33A8                             l8869 3E56  
                           l8949 13B6                             l9783 3DCC  
                           l8799 2FBC                             l9695 33FA  
                           l9943 34C4                             l9919 43A0  
                           l8959 13C4                             l9881 3700  
                           l9769 3DB6                             l9697 3408  
                           l8985 1534                             l9891 41F6  
                           l9699 3418                             l9963 355C  
                           l9955 34E0                             l8899 3C8A  
                           l8979 14F0                             l9885 41DC  
                           l9893 4214                             l9869 36D4  
                           l8989 153E                             l9977 35D4  
                           l9987 4148                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             _IPR5 000F78  
                           _PIE5 000F76                             _PIR5 000F77  
                           _TMR2 000FCC                      main@instate 00E7  
                           _dict 7EAC                             _main 1EC2  
                  i1___lbmod@rem 003E                             _sign 79EB  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 004D            __end_of_check_version 4188  
                           prodh 000FF4                             prodl 000FF3  
                           start 065C                  _SPI_SendOneByte 4228  
                __end_of_DelayMs 4228                     ___param_bank 000000  
                __end_of_KeyScan 3DDE                  __end_of_KeyProg 371A  
                 write_dict@size 00D3       search_dict@subindex_exists 00CC  
                   KeyScan@value 00CB                            l10001 417C  
                          l10005 4184                            l10013 375C  
                          l10111 32F2                            l10103 3282  
                          l10031 3808                            l10107 328C  
                          l10019 3798                            l10221 0940  
                          l10213 08EC                            l10063 31EE  
                          l10311 0D3E                            l10231 0A24  
                          l10207 08E6                            l10135 0664  
                          l10057 31EA                            l10305 0D38  
                          l10241 0A36                            l10411 106E  
                          l10323 0D92                            l10315 0D54  
                          l10235 0A30                            l10227 0946  
                          l10155 0706                            l10147 06B0  
                          l10085 322A                            l10405 0FFE  
                          l10341 0DEC                            l10333 0DAE  
                          l10245 0B3C                            l10253 0B4C  
                          l10181 0842                            l10157 0720  
                          l10079 3226                            l10431 10E6  
                          l10423 10D4                            l10407 103E  
                          l10351 0E08                            l10263 0BA8  
                          l10255 0B88                            l10183 0848  
                          l10191 0858                            l10097 326A  
                          l10361 0E58                            l10329 0D98  
                          l10281 0C80                            l10193 087C  
                          l10443 1146                            l10435 10F0  
                          l10427 10DC                            l10363 0E6A  
                          l10347 0DF2                            l10371 0F14  
                          l10259 0B9E                            l10509 1294  
                          l10445 1150                            l10365 0E86  
                          l10189 0850                            l10615 419E  
                          l10471 11D2                            l10447 1156  
                          l10391 0FB2                            l10375 0F20  
                          l10359 0E46                            l10295 0CBC  
                          l10199 088E                            l10617 41A6  
                          l10481 1226                            l10457 1176  
                          l10385 0F96                            l11601 0F02  
                          l10369 0EB6                            l10297 0CD8  
                          l10289 0CA0                            l10377 0F36  
                          l10801 20D8                            l10627 41C6  
                          l11611 2D66                            l10459 1192  
                          l10395 0FD0                            l10387 0F9C  
                          l10379 0F6C                            l11603 0F0C  
                          l10299 0CFC                            l10491 1266  
                          l11613 2D70                            l10485 122E  
                          l10389 0FA8                            l10573 3F04  
                          l10821 2116                            l10813 20FA  
                          l10661 1EE8                            l11615 2D80  
                          l11607 2A62                            l10495 1276  
                          l10479 1224                            l10903 22B0  
                          l11609 2A72                            l10489 1232  
                          l10593 4082                            l10841 2154  
                          l10745 201E                            l10729 1FFE  
                          l10851 2166                            l10827 2126  
                          l10691 1F1C                            l11591 0B6C  
                          l10791 20AA                            l10783 2092  
                          l11593 0B76                            l10873 2220  
                          l10857 219C                            l10793 20AE  
                          l11595 0B80                            l10883 2258  
                          l10867 21B6                            l11597 0EDC  
                          l10877 2228                            l11599 0EF2  
                          l10895 2294                            l10887 2268  
         __end_of_check_for_call 4356                 _tDisp_FloorAscii 7F69  
                          ?_main 002C                  __end_of___awdiv 404E  
                          _EEADR 000F74                  __end_of___awmod 4134  
                __end_of___lbmod 4384                            u10005 39F2  
                          u10120 40FE                            u10060 4010  
                          u11110 19B0                            u10231 2EE8  
                          u11200 1AAE                            u12020 38F0  
                          u10260 2F76                            u11124 19C0  
                          u11125 19BC                            u10334 3DFA  
                          u11230 1AF6                            u11134 19EE  
                          u10335 3DF6                            u11135 19EA  
                          u10344 3E16                            u11080 1974  
                          _T0CON 000FD5                            u10345 3E12  
                          u11330 1BDE                            u11260 1B56  
                          u10700 160E                  ___awdiv@divisor 00C8  
                          u11405 1D50                            u12070 3956  
                          u11430 1DB4                            u10710 161C  
                          u11504 1E6A                            u10640 15A8  
                          _T1CON 000FCD                            u11505 1E66  
                          u12154 33B8                            u11514 1E98  
                          u10474 1396                            u12155 33B4  
                          u11531 305C                            u11515 1E94  
                          u10475 1392                            u12420 3656  
                          u11620 311A                            u10820 16CA  
                          u10660 15CC                            u10564 14B0  
                          u11700 2770                            u10565 14AC  
                          u12270 3D8E                            u12174 33E2  
                          u11470 1E36                            u11294 1B8A  
                          u10910 17C4                            u10574 1514  
                          u12175 33DE                            u11391 1D04  
                          u11295 1B86                            u10575 1510  
                          u12520 4212                            u12280 3DB0  
                          u10760 1668                            u11800 294C  
                          u13240 10CE                            _T2CON 000FCA  
                          u11705 2766                            u12194 345E  
                          u10930 1802                            u11714 278E  
                          u12195 345A                            u11651 3192  
                          u11715 278A                            u12460 36B4  
                          u11900 2C2C                            u11820 29DC  
                          u12390 363E                            u12550 4390  
                          u11590 30DA                            u10950 1816  
                          u11830 29E8                            u11807 2940  
                          u13440 41AA                            u12640 352C  
                          u11920 2D02                            u10880 177C  
                          u11760 282C                            u11744 27B8  
                          u13520 1F70                            u11841 2A08  
                          u11745 27B4                            u10778 166C  
                          u11754 27D8                            u11690 274E  
                          u11907 2C22                            u11827 29D0  
                          u11755 27D4                            u11860 2B06  
                          u10964 1826                            u11780 28AE  
                          u13380 12C2                            u10965 1822  
                          u12654 353C                            u10974 1854  
                          u12910 0786                            u13630 20A6  
                          u13550 1FA0                            u12655 3538  
                          u11927 2CF8                            u10975 1850  
                          u11767 2820                            u11697 2744  
                          u11970 385C                            u11890 2BA8  
                          u11874 2B12                            u13730 2134  
                          u11875 2B0E                            u11867 2AFC  
                          u11787 28AC                            u13804 21C6  
                          u13740 213A                            u11885 2B28  
                          u12941 082C                            u13805 21C2  
                          u11990 386A                            u12694 35B6  
                          u13814 21E2                            u12695 35B2  
                          u13815 21DE                            u12960 083E  
                          u11897 2B9E                            u13850 225E  
                          u13764 2186                            u13765 2182  
                          u13880 228C                  __end_of___lwdiv 41DA  
                          _ODCON 000F91                            i2l863 23FA  
                          i2l890 2660                            i2l884 2628  
                ___awdiv@counter 00CA                            i2l885 2632  
                          i2l877 258C                            i2l886 2636  
                          i2l887 263A                            i2l888 263E  
                          i2l896 26B6                            _TMR0H 000FD7  
                          _TMR1H 000FCF                            _TMR0L 000FD6  
                          _TMR1L 000FCE                            _PORTA 000F80  
                          _PORTB 000F81                            _PORTC 000F82  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96             InterruptHandlerLow@a 0005  
           InterruptHandlerLow@i 00C5             InterruptHandlerLow@j 00BF  
                   ?_init_timer0 002C                     ?_init_timer1 002C  
                   ?_init_timer2 002C                     ?_read_eeprom 00C6  
                          _bTime 000E                            _inpar 0140  
                          _inold 008D                            _input 0001  
                __end_of_read_rx 12CA              sdo_response@command 00D3  
            lss_response@command 00CF                            main@i 00E9  
                          main@j 00E8                            tablat 000FF5  
                          ttemp5 004E                            ttemp6 0051  
                          ttemp7 0055                            status 000FD8  
                          wtemp8 004E               __size_ofi1___lbmod 002A  
                __initialization 4270  InterruptHandlerHigh@tempCANSTAT 0036  
                   __end_of_dict 7F69                     __end_of_main 22E0  
                   __end_of_sign 7CBC                     KeyProg@value 00D1  
          __size_of_write_eeprom 003C                     ?_search_dict 00C6  
                write_dict@value 00C7                  ?_check_for_call 002C  
                         ??_main 00E4                   _version_chksum 7FE1  
                  __activetblptr 000002       InterruptHandlerHigh@hse_no 0035  
     InterruptHandlerHigh@lenght 0039                 __end_of_TestMode 3488  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
                         _CANCON 000F6F             __end_of_Display_test 302E  
                         _EEADRH 000F75                           _EEDATA 000F73  
                         _EECON2 000F7E                           _ANCON0 000F5D  
                         _ANCON1 000F5C                 ___awdiv@dividend 00C6  
                   ?_sdo_segment 00CC          __end_of_SPI_SendOneByte 4270  
                         i1l1600 03FE                           i1l1610 0432  
                         i1l1611 05FC                           i1l1603 0430  
                         i1l1550 0198                           i1l1617 0478  
                         i1l1553 006E                           i1l1635 0628  
                         i1l1564 00E6                           i1l1637 062C  
                         i1l1566 017C             _backlight_time_count 0076  
                         _INTCON 000FF2                           i1l9565 422E  
                         i2l7901 24EC                           i2l7903 24F0  
                         i2l7921 2592                           i2l7913 250A  
                         i2l7905 24F4                           i2l7933 2610  
                         i2l7941 262C                           i2l7861 23A8  
                         i2l7853 231C                           i2l7845 2306  
                         i2l7871 23F8                           i2l7961 2674  
                         i2l7953 2658                           i2l7929 25D6  
                         i2l7865 23E2                           i2l7873 23FE  
                         i2l7939 2626                           i2l7891 24CC  
                         i2l7877 2406                           i2l7973 268A  
                         i2l7887 2492                           i2l7899 24E8  
                      ??_DelayMs 00C8                    _C_INIT_NODEID 7FEB  
                         _RXB0D0 000F66                           _RXB1D0 000F36  
                         _TXB0D0 000F26                           _TXB1D0 000F16  
          __size_of_can_transmit 0114            InterruptHandlerHigh@i 003A  
                  _hse_heartbeat 0087               __size_of_InitPorts 0034  
                      ??_KeyScan 00C6                   _transmit_error 3E94  
                      ??_KeyProg 00D1                     _write_eeprom 42B6  
               __end_of_tKeyCode 7FE9                 __end_of_identyty 7FCF  
                         ___wmul 43D8                        ??___awdiv 00CA  
             __size_of_SetNodeId 012C                        ??___awmod 00D2  
                      ??___lbmod 00C7                   _arrowflash_old 001E  
                  can_transmit@i 00CB                        ??___lwdiv 00D0  
               __end_of_init_can 332E                     _can_inittime 0086  
         __end_of_version_chksum 7FE5                           _merker 0091  
                         clear_0 4278                           clear_1 428A  
                         clear_2 4296                           clear_3 42A2  
                         _inpush 001C                 ___awdiv@quotient 00CC  
                sdo_segment@size 00CC                  ___awmod@divisor 00D0  
                         _scroll 0025                  ___awmod@counter 00D2  
                         _testno 0096                check_version@buf0 00C6  
              check_version@buf1 00C8                           _outpar 0100  
                   _mLongKeyTime 0021                __end_ofi1___lbmod 43D8  
             write_dict@subindex 00C6                        ??_read_rx 00DA  
                   transmit_in@i 00CF                     __mediumconst 79EA  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                     _can_transmit 3978  
               _hardware_version 009A           __size_of_init_userpara 0132  
                    read_rx@size 0180                      read_rx@type 0186  
         __end_of_transmit_error 3F36                  ___lbmod@divisor 00C6  
                     __accesstop 0060          __end_of__initialization 42A8  
           sdo_response@subindex 00CE                  ___lbmod@counter 00C8  
          __end_of_set_io_config 3E94                    ___rparam_used 000001  
                 __pcstackCOMRAM 002C                    _light_para_ok 0010  
             __size_of_check_hse 0156               __size_of_abort_sdo 00D6  
                search_dict@size 00CD                sdo_response@index 00CC  
                search_dict@type 00C9                 _device_name_G741 7FF2  
               _device_name_G742 7FD5                sdo_response@value 00CF  
                   ?_transmit_in 00CC                __end_of_InitPorts 4326  
                  check_hse@help 00CA                    check_hse@mode 00C9  
  __size_of_InterruptHandlerHigh 26CA      __end_of_InterruptHandlerLow 065C  
               read_dict@address 00D6             __size_of_init_timer0 0014  
           __size_of_init_timer1 002A             __size_of_init_timer2 0012  
           __size_of_read_eeprom 0012                  SetNodeId@buffer 0073  
              __end_of_SetNodeId 3978          __size_of_sent_heartbeat 0020  
                     __pbssBANK0 0060                       __pbssBANK1 0100  
               ?_SPI_SendOneByte 002C                  ?_transmit_error 002C  
       __end_of_tDisp_FloorAscii 7FBF               __size_of_read_dict 030E  
                      ?_TestMode 002C                          ?___wmul 00C6  
                  _init_userpara 371A                       _tFloor_Tab 7CBC  
                        _CANSTAT 000F6E                          _BRGCON1 000E43  
                        _BRGCON2 000E44                          _BRGCON3 000E45  
                        _PADCFG1 000F56             __size_of_search_dict 0196  
                        i1l11101 03BC                          i1l11013 01D4  
                        i1l11005 01B4                          i1l11023 0222  
                        i1l11033 0234                          i1l11017 01DC  
                        i1l11203 053C                          i1l11027 0226  
                        i1l11043 02A2                          i1l11213 05B6  
                        i1l11151 0424                          i1l11135 0400  
                        i1l11161 0454                          i1l11057 02D6  
                        i1l11243 060E                          i1l11171 0474  
                        i1l11147 041E                          i1l11067 0334  
                        i1l11181 0496                          i1l11165 045E  
                        i1l11085 0384                          i1l11079 0364  
                        i1l10641 43D0                          i1l10633 43B8  
                        i1l11193 04B4                          i1l11187 04AC  
                        i1l11179 0492                          i1l11189 04B0  
                        i1l10953 009E                          i1l10971 00F2  
                        i1l10981 0178                          i1l10965 00DA  
                        i1l10967 00EA                          i1l10993 0192  
                        i1l10995 0194                    ?_sdo_response 00CC  
          __size_of_Display_test 029E                       _fire_alarm 0082  
                        _RXB0DLC 000F65                          _RXB1DLC 000F35  
                        _RXB0CON 000F60                          _RXB1CON 000F30  
                     _flashtimer 0099                          _TXB0DLC 000F25  
                        _TXB1DLC 000F15                      _u8PWM_Count 0012  
                     _fire_state 0080                    _errorregister 00BA  
              __end_of_check_hse 35DE                __end_of_abort_sdo 3C3C  
                        _DelayMs 41DA           InterruptHandlerLow@buf 00BD  
         InterruptHandlerLow@ten 00C3           InterruptHandlerLow@pos 00C0  
                      ?_init_can 002C             __size_of_sdo_segment 00D2  
                     _arrowflash 0095                          _KeyScan 3D0E  
                        _KeyProg 35DE                          __Hparam 0000  
                        __Lparam 0000                          _bKey_Fg 0022  
                     ??_TestMode 00DF                   ?_init_userpara 002C  
               ??_check_for_call 00C6                 SPI_SendOneByte@i 003D  
                        ___awdiv 3FCA                          ___awmod 40C4  
                        ___lbmod 4356                  __size_of___wmul 0026  
                   _Display_test 2D90                          ___lwdiv 4188  
                  ?_lss_response 00CC                    _recei_monitor 0060  
                     check_hse@i 00CB                     _com_can_work 0084  
                        __pcinit 4270                          __ramtop 0F00  
                        _id_buff 006C                          __ptext0 1EC2  
                        __ptext1 404E                          __ptext2 3E94  
                        __ptext3 43FE                          __ptext4 0660  
                        __ptext5 26D2                          __ptext6 12CA  
                        __ptext7 3DDE                          __ptext8 302E  
                        __ptext9 3C3C                          _disp_id 009E  
                        _display 0068                   ??_sdo_response 00D3  
                        _read_rx 0660                          _hsetime 0017  
              __end_of_read_dict 2D90                 ___awmod@dividend 00CE  
                        _node_id 009D           __size_of_check_version 0054  
               sdo_segment@value 00CD                          _nmtwait 007E  
                   _mSwitch_code 001F              search_dict@subindex 00C8  
                        _virt_in 00A6                          _outpush 001B  
                 __pintcode_body 22E0             end_of_initialization 42A8  
                set_output@index 00CB                _hardware_uea_G741 7FEC  
              _hardware_uea_G742 7FCF                   set_io_config@i 00C8  
                     ??_init_can 00C6                    __Lmediumconst 79EA  
                        int_func 22E0                        i1u1409_24 0158  
                      i1u1409_25 0154                        i1u1434_20 037C  
                      i1u1418_24 01EC                        i1u1194_25 4236  
                      i1u1418_25 01E8                        i1u1443_20 042C  
                      i1u1428_20 032A                        i1u1458_24 05DA  
                      i1u1458_25 05D6                     read_dict@pos 00D9  
                   _flashcontent 0024                      set_output@i 00D2  
             abort_sdo@errorcode 00CC                          postdec1 000FE5  
                        postdec2 000FDD                       _setid_mode 009B  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                   ??_lss_response 00CD  
                     _set_output 12CA                   _virtual_device 00AD  
                      _PORTCbits 000F82                     read_rx@index 0187  
                   read_rx@value 0182                 _can_passive_time 0016  
               ___lbmod@dividend 00C7                        _TRISBbits 000F93  
           __size_of_transmit_in 0076                 _landingcallfloor 008A  
               _landingcalltimer 008B                        i1___lbmod 43AE  
      __end_of_hardware_uea_G741 7FF2        __end_of_hardware_uea_G742 7FD5  
                 _sent_heartbeat 43FE         __end_of_device_name_G741 7FF8  
       __end_of_device_name_G742 7FDB                      ___lbmod@rem 00C9  
                  _check_version 4134               _backlight_off_time 0078  
                ??_init_userpara 00C6                lss_response@value 00CC  
       InterruptHandlerLow@count 0006                   _backlight_func 0011  
                 _backlight_mode 0026                 init_can@baudrate 00C8  
                 __end_of___wmul 43FE                       _write_dict 26D2  
                 _setid_mode_old 009C                 search_dict@index 00C6  
            start_initialization 4270           __end_of_sent_heartbeat 441E  
               ??_transmit_error 00CC                        _InitPorts 42F2  
                     ?i1___lbmod 003B                write_dict@address 00D1  
                      _SetNodeId 384C     __end_of_InterruptHandlerHigh 26D2  
                 ?_check_version 00C6             __end_of_sdo_response 3B66  
        search_dict@index_exists 00CB                        TestMode@i 00E1  
                  TestMode@oldin 0093                         ??___wmul 00CA  
                    ?_set_output 00C7                __size_of_TestMode 015A  
                     read_dict@i 00D8                  Display_test@buf 00DA  
                     read_rx@cte 0008                       read_rx@pos 00B7  
                     read_rx@sub 0181               SPI_SendOneByte@dat 003C  
                    __pbssBIGRAM 018B                   _mKeyValue_Back 0023  
                  ??_init_timer0 00C6                    ??_init_timer1 00C6  
                  ??_init_timer2 00C6                      __pbssCOMRAM 0001  
         __size_of_set_io_config 00B6                    ??_read_eeprom 00C8  
                KeyScan@key_code 00CC                    __pcstackBANK0 00BC  
                  __pcstackBANK1 0178                 _version_uea_G741 7FF8  
               _version_uea_G742 7FDB                  ?_sent_heartbeat 002C  
                     ?_InitPorts 002C                   search_dict@pos 00CA  
           __end_of_lss_response 3FCA                        _mKeyValue 0020  
   __size_of_InterruptHandlerLow 0644                         ?_DelayMs 00C6  
              read_dict@subindex 00C6                   check_version@i 00CD  
                 check_version@k 00CB                   check_version@m 00CA  
                     ?_SetNodeId 002C                         ?_KeyScan 002C  
                      _check_hse 3488                        _abort_sdo 3B66  
                       ?_KeyProg 002C                 transmit_in@input 00CC  
                   search_dict@i 00CE                __size_of_init_can 016A  
               ___lwdiv@dividend 00CC         __size_of_SPI_SendOneByte 0048  
                      __pintcode 0008                    __pmediumconst 79EA  
                       ?___awdiv 00C6                         ?___awmod 00CE  
                       ?___lbmod 00C6                         ?___lwdiv 00CC  
                      _heartbeat 008C                    ??_search_dict 00CB  
             i1___lbmod@dividend 003C                      __pintcodelo 0018  
                    ?_write_dict 00C6                        _disp_lift 002A  
             _direction_ind_mode 0027                      _COMSTATbits 000F71  
                       ?_read_rx 002C                        _arrowtype 00B8  
                    _device_type 00B3               can_transmit@lenght 00CA  
                    ??i1___lbmod 003C                 ___lwdiv@quotient 00D1  
                      _read_dict 2A82                    ??_sdo_segment 00CF  
                      _errorcode 007A   InterruptHandlerLow@timer_100ms 0007  
             sdo_segment@command 00D1            __end_of_C_INIT_NODEID 7FEC  
            __size_of_set_output 0BF8              __end_of_init_timer0 4432  
            __end_of_init_timer1 43AE              __end_of_init_timer2 4444  
            __end_of_read_eeprom 4456                         _CTMUCONH 000F55  
                       _CTMUCONL 000F54                  ??_check_version 00CA  
                 ___wmul@product 00CA                         _LATAbits 000F89  
                       _LATBbits 000F8A                         _LATCbits 000F8B  
                       _LATDbits 000F8C                         _LATEbits 000F8D  
                       DelayMs@i 00C8                       ?_check_hse 002C  
                     ?_abort_sdo 00CC                   set_output@virt 00C7  
                       _IPR1bits 000F9F                         _PIE1bits 000F9D  
                  ?_write_eeprom 00C8                        _sdo_index 007C  
                  _set_io_config 3DDE                        _sdo_timer 008E  
              _display_scantimer 0085                         _PIR1bits 000F9E  
                       _PIR4bits 000FB7                         _PIR5bits 000F77  
                       i2u910_45 256C                         i2u903_45 245E  
                       i2u922_40 267C                         i2u908_45 2538  
                       _RCONbits 000FD0                         i2u897_45 234C  
                       i2u899_40 2392                        _scrollpos 001A  
                      _timer_1S5 0098                         _RXB0SIDH 000F61  
                       _RXB0SIDL 000F62                         _RXB1SIDH 000F31  
                       _RXB1SIDL 000F32                         _RXF0SIDH 000EE0  
                       _RXF0SIDL 000EE1                         _RXF1SIDH 000EE4  
                       _RXF1SIDL 000EE5                         _RXF2SIDH 000EE8  
                       _RXF2SIDL 000EE9                         _RXF3SIDH 000EEC  
                       _RXF3SIDL 000EED                         _RXF4SIDH 000EF0  
                       _RXF4SIDL 000EF1                         _RXF5SIDH 000EF4  
                       _RXF5SIDL 000EF5                         _TXB0SIDH 000F21  
                       _TXB0SIDL 000F22                         _TXB1SIDH 000F11  
                       _TXB1SIDL 000F12                         _RXM0SIDH 000EF8  
                       _RXM0SIDL 000EF9                         _RXM1SIDH 000EFC  
                       _RXM1SIDL 000EFD                     _input_detect 0018  
        InterruptHandlerHigh@ptr 0037                write_eeprom@value 00CA  
              ___wmul@multiplier 00C6                         KeyScan@i 00CD  
                       KeyScan@j 00CA                   _preset_node_id 0094  
                    write_dict@i 00D4                      write_dict@j 00D2  
           _InterruptHandlerHigh 0008              __end_of_search_dict 31C4  
                  ?_can_transmit 002C                 _display_STN_mode 000F  
        InterruptHandlerLow@unit 00C1                      ??_InitPorts 00C6  
                  _timer1_countH 0015                    _timer1_countL 0014  
                     ?_read_dict 00C6                      _INTCON2bits 000FF1  
                   sdo_segment@i 00D2            __size_of_sdo_response 00DA  
           check_version@version 00CC                      DelayMs@tick 00C6  
                  lss_response@i 00D0              __size_of_write_dict 03B0  
               __size_of_DelayMs 004E               __end_of_tFloor_Tab 7DBC  
                    ??_SetNodeId 00D4                   ??_write_eeprom 00CB  
                     _EECON1bits 000F7F                   ?_set_io_config 002C  
            __end_of_sdo_segment 3D0E                      _in_polarity 00B9  
               __size_of_KeyScan 00D0                 __size_of_KeyProg 013C  
                       __Hrparam 0000                         __Lrparam 0000  
                      init_can@i 00C9                        init_can@j 00CA  
                       _TestMode 332E             __end_of_version_fver 7FEB  
               __size_of___awdiv 0084                       _CIOCONbits 000F70  
               __size_of___awmod 0070                 __size_of___lbmod 002E  
               __size_of___lwdiv 0052                ??_SPI_SendOneByte 003B  
                  ??_transmit_in 00CD               read_eeprom@address 00C6  
          ?_InterruptHandlerHigh 002C                     _sdo_response 3A8C  
                       _baudrate 0089          __size_of_check_for_call 0030  
          __size_of_lss_response 0094                   ??_can_transmit 00C6  
                 read_dict@value 00D2                      _init_timer0 441E  
                    _init_timer1 4384                      _init_timer2 4432  
               __size_of_read_rx 0C6A                  _fire_evacuation 0081  
                    _read_eeprom 4444                  ___lwdiv@divisor 00CE  
                   _sdo_subindex 008F                         _tKeyCode 7FE5  
                ___lwdiv@counter 00D0                         __ptext10 3A8C  
                       __ptext11 2A82                         __ptext20 4326  
                       __ptext12 3B66                         __ptext21 43D8  
                       __ptext13 371A                         __ptext30 35DE  
                       __ptext22 4188                         __ptext14 4432  
                       __ptext31 42B6                         __ptext23 332E  
                       __ptext15 4384                         __ptext32 4444  
                       __ptext24 2D90                         __ptext16 441E  
                       __ptext33 3F36                         __ptext25 4356  
                       __ptext17 31C4                         __ptext34 3978  
                       __ptext26 384C                         __ptext18 4134  
                       __ptext35 42F2                         __ptext27 40C4  
                       __ptext19 3488                         __ptext36 41DA  
                       __ptext28 3FCA                         __ptext29 3D0E  
                       __ptext38 43AE                         __ptext39 4228  
                can_transmit@ptr 00C8                  transmit_error@i 00CE  
               set_output@F12475 0070                i1___lbmod@divisor 003B  
                       _identyty 7FBF                i1___lbmod@counter 003D  
                       _hsecheck 0088                         _init_can 31C4  
                  __size_of_main 041E                      ??_check_hse 00C7  
                    ??_abort_sdo 00D0                         _keytimer 001D  
                  set_output@buf 00CD                    set_output@sub 00D0  
       __end_of_version_uea_G741 7FFE         __end_of_version_uea_G742 7FE1  
            __end_of_testdisplay 7EAC            __end_of_init_userpara 384C  
                       _nmtstate 0090                     ??_set_output 00C8  
                       int$flags 004D                     _lss_response 3F36  
                       main@help 00E6                         _virt_out 009F  
                    _search_dict 302E              _InterruptHandlerLow 0018  
               ??_sent_heartbeat 00C6                      _RXB0CONbits 000F60  
               set_output@iotype 00D1                      _RXB1CONbits 000F30  
                     _INTCONbits 000FF2                   init_userpara@i 00C6  
                       read_rx@i 018A              __end_of_transmit_in 40C4  
                    ??_read_dict 00CA                      _sdo_segment 3C3C  
                       intlevel1 0000                         intlevel2 0000  
           ?_InterruptHandlerLow 002C                    read_dict@size 00D7  
             __end_of_set_output 1EC2                  ??_set_io_config 00C6  
                read_rx@subindex 0189                      _TXB0CONbits 000F20  
                    _TXB1CONbits 000F10                    ?_Display_test 002C  
                   ??_write_dict 00CB                      _scrolltimer 0019  
         ??_InterruptHandlerHigh 002C             __end_of_write_eeprom 42F2  
            check_for_call@value 00C6               Display_test@number 00DE  
                   _u8Start_Dark 0013                    read_rx@buffer 0178  
          ??_InterruptHandlerLow 003F              write_eeprom@address 00C8  
                  _display_timer 0097     InterruptHandlerLow@arrow_mes 00BC  
                    _testdisplay 7DBC               __end_of_write_dict 2A82  
        __size_of_transmit_error 00A2             __end_of_can_transmit 3A8C  
